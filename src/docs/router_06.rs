use dioxus::prelude::*;
#[derive(
    Clone,
    Copy,
    dioxus_router::prelude::Routable,
    PartialEq,
    Eq,
    Hash,
    Debug,
    serde::Serialize,
    serde::Deserialize,
)]
pub enum BookRoute {
    #[route("/#:section")]
    Index { section: IndexSection },
    #[route("/getting_started/#:section")]
    GettingStartedIndex { section: GettingStartedIndexSection },
    #[route("/guide/#:section")]
    GuideIndex { section: GuideIndexSection },
    #[route("/guide/tooling#:section")]
    GuideTooling { section: GuideToolingSection },
    #[route("/guide/new_app#:section")]
    GuideNewApp { section: GuideNewAppSection },
    #[route("/guide/component#:section")]
    GuideComponent { section: GuideComponentSection },
    #[route("/guide/rsx#:section")]
    GuideRsx { section: GuideRsxSection },
    #[route("/guide/assets#:section")]
    GuideAssets { section: GuideAssetsSection },
    #[route("/guide/state#:section")]
    GuideState { section: GuideStateSection },
    #[route("/guide/data_fetching#:section")]
    GuideDataFetching { section: GuideDataFetchingSection },
    #[route("/guide/backend#:section")]
    GuideBackend { section: GuideBackendSection },
    #[route("/guide/databases#:section")]
    GuideDatabases { section: GuideDatabasesSection },
    #[route("/guide/routing#:section")]
    GuideRouting { section: GuideRoutingSection },
    #[route("/guide/bundle#:section")]
    GuideBundle { section: GuideBundleSection },
    #[route("/guide/deploy#:section")]
    GuideDeploy { section: GuideDeploySection },
    #[route("/guide/next_steps#:section")]
    GuideNextSteps { section: GuideNextStepsSection },
    #[route("/essentials/#:section")]
    EssentialsIndex { section: EssentialsIndexSection },
    #[route("/essentials/rsx/#:section")]
    EssentialsRsxIndex { section: EssentialsRsxIndexSection },
    #[route("/essentials/lifecycle/#:section")]
    EssentialsLifecycleIndex {
        section: EssentialsLifecycleIndexSection,
    },
    #[route("/essentials/state/#:section")]
    EssentialsStateIndex {
        section: EssentialsStateIndexSection,
    },
    #[route("/essentials/breaking/#:section")]
    EssentialsBreakingIndex {
        section: EssentialsBreakingIndexSection,
    },
    #[route("/guides/#:section")]
    GuidesIndex { section: GuidesIndexSection },
    #[route("/guides/managing_state#:section")]
    GuidesManagingState { section: GuidesManagingStateSection },
    #[route("/router/#:section")]
    RouterIndex { section: RouterIndexSection },
    #[route("/router/example/#:section")]
    RouterExampleIndex { section: RouterExampleIndexSection },
    #[route("/router/example/first-route#:section")]
    RouterExampleFirstRoute {
        section: RouterExampleFirstRouteSection,
    },
    #[route("/router/example/building-a-nest#:section")]
    RouterExampleBuildingANest {
        section: RouterExampleBuildingANestSection,
    },
    #[route("/router/example/navigation-targets#:section")]
    RouterExampleNavigationTargets {
        section: RouterExampleNavigationTargetsSection,
    },
    #[route("/router/example/redirection-perfection#:section")]
    RouterExampleRedirectionPerfection {
        section: RouterExampleRedirectionPerfectionSection,
    },
    #[route("/router/example/full-code#:section")]
    RouterExampleFullCode {
        section: RouterExampleFullCodeSection,
    },
    #[route("/router/reference/#:section")]
    RouterReferenceIndex {
        section: RouterReferenceIndexSection,
    },
    #[route("/router/reference/routes/#:section")]
    RouterReferenceRoutesIndex {
        section: RouterReferenceRoutesIndexSection,
    },
    #[route("/router/reference/routes/nested#:section")]
    RouterReferenceRoutesNested {
        section: RouterReferenceRoutesNestedSection,
    },
    #[route("/router/reference/layouts#:section")]
    RouterReferenceLayouts {
        section: RouterReferenceLayoutsSection,
    },
    #[route("/router/reference/navigation/#:section")]
    RouterReferenceNavigationIndex {
        section: RouterReferenceNavigationIndexSection,
    },
    #[route("/router/reference/navigation/programmatic#:section")]
    RouterReferenceNavigationProgrammatic {
        section: RouterReferenceNavigationProgrammaticSection,
    },
    #[route("/router/reference/history-providers#:section")]
    RouterReferenceHistoryProviders {
        section: RouterReferenceHistoryProvidersSection,
    },
    #[route("/router/reference/history-buttons#:section")]
    RouterReferenceHistoryButtons {
        section: RouterReferenceHistoryButtonsSection,
    },
    #[route("/router/reference/routing-update-callback#:section")]
    RouterReferenceRoutingUpdateCallback {
        section: RouterReferenceRoutingUpdateCallbackSection,
    },
    #[route("/guides/assets#:section")]
    GuidesAssets { section: GuidesAssetsSection },
    #[route("/guides/web/#:section")]
    GuidesWebIndex { section: GuidesWebIndexSection },
    #[route("/guides/desktop/#:section")]
    GuidesDesktopIndex { section: GuidesDesktopIndexSection },
    #[route("/guides/mobile/#:section")]
    GuidesMobileIndex { section: GuidesMobileIndexSection },
    #[route("/guides/mobile/apis#:section")]
    GuidesMobileApis { section: GuidesMobileApisSection },
    #[route("/guides/ssr#:section")]
    GuidesSsr { section: GuidesSsrSection },
    #[route("/guides/fullstack/#:section")]
    GuidesFullstackIndex {
        section: GuidesFullstackIndexSection,
    },
    #[route("/guides/fullstack/managing_dependencies#:section")]
    GuidesFullstackManagingDependencies {
        section: GuidesFullstackManagingDependenciesSection,
    },
    #[route("/guides/fullstack/server_functions#:section")]
    GuidesFullstackServerFunctions {
        section: GuidesFullstackServerFunctionsSection,
    },
    #[route("/guides/fullstack/extractors#:section")]
    GuidesFullstackExtractors {
        section: GuidesFullstackExtractorsSection,
    },
    #[route("/guides/fullstack/middleware#:section")]
    GuidesFullstackMiddleware {
        section: GuidesFullstackMiddlewareSection,
    },
    #[route("/guides/fullstack/authentication#:section")]
    GuidesFullstackAuthentication {
        section: GuidesFullstackAuthenticationSection,
    },
    #[route("/guides/fullstack/routing#:section")]
    GuidesFullstackRouting {
        section: GuidesFullstackRoutingSection,
    },
    #[route("/cookbook/publishing#:section")]
    CookbookPublishing { section: CookbookPublishingSection },
    #[route("/cookbook/antipatterns#:section")]
    CookbookAntipatterns {
        section: CookbookAntipatternsSection,
    },
    #[route("/cookbook/error_handling#:section")]
    CookbookErrorHandling {
        section: CookbookErrorHandlingSection,
    },
    #[route("/cookbook/integrations/#:section")]
    CookbookIntegrationsIndex {
        section: CookbookIntegrationsIndexSection,
    },
    #[route("/cookbook/integrations/logging#:section")]
    CookbookIntegrationsLogging {
        section: CookbookIntegrationsLoggingSection,
    },
    #[route("/cookbook/integrations/internationalization#:section")]
    CookbookIntegrationsInternationalization {
        section: CookbookIntegrationsInternationalizationSection,
    },
    #[route("/cookbook/state/#:section")]
    CookbookStateIndex { section: CookbookStateIndexSection },
    #[route("/cookbook/state/external/#:section")]
    CookbookStateExternalIndex {
        section: CookbookStateExternalIndexSection,
    },
    #[route("/cookbook/state/custom_hooks/#:section")]
    CookbookStateCustomHooksIndex {
        section: CookbookStateCustomHooksIndexSection,
    },
    #[route("/cookbook/bundling#:section")]
    CookbookBundling { section: CookbookBundlingSection },
    #[route("/cookbook/testing#:section")]
    CookbookTesting { section: CookbookTestingSection },
    #[route("/cookbook/tailwind#:section")]
    CookbookTailwind { section: CookbookTailwindSection },
    #[route("/cookbook/optimizing#:section")]
    CookbookOptimizing { section: CookbookOptimizingSection },
    #[route("/migration/#:section")]
    MigrationIndex { section: MigrationIndexSection },
    #[route("/reference/#:section")]
    ReferenceIndex { section: ReferenceIndexSection },
    #[route("/reference/hotreload#:section")]
    ReferenceHotreload { section: ReferenceHotreloadSection },
    #[route("/reference/rsx#:section")]
    ReferenceRsx { section: ReferenceRsxSection },
    #[route("/reference/components#:section")]
    ReferenceComponents { section: ReferenceComponentsSection },
    #[route("/reference/component_props#:section")]
    ReferenceComponentProps {
        section: ReferenceComponentPropsSection,
    },
    #[route("/reference/event_handlers#:section")]
    ReferenceEventHandlers {
        section: ReferenceEventHandlersSection,
    },
    #[route("/reference/hooks#:section")]
    ReferenceHooks { section: ReferenceHooksSection },
    #[route("/reference/user_input#:section")]
    ReferenceUserInput { section: ReferenceUserInputSection },
    #[route("/reference/context#:section")]
    ReferenceContext { section: ReferenceContextSection },
    #[route("/reference/dynamic_rendering#:section")]
    ReferenceDynamicRendering {
        section: ReferenceDynamicRenderingSection,
    },
    #[route("/reference/router#:section")]
    ReferenceRouter { section: ReferenceRouterSection },
    #[route("/reference/use_resource#:section")]
    ReferenceUseResource {
        section: ReferenceUseResourceSection,
    },
    #[route("/reference/use_coroutine#:section")]
    ReferenceUseCoroutine {
        section: ReferenceUseCoroutineSection,
    },
    #[route("/reference/spawn#:section")]
    ReferenceSpawn { section: ReferenceSpawnSection },
    #[route("/contributing/#:section")]
    ContributingIndex { section: ContributingIndexSection },
    #[route("/contributing/project_structure#:section")]
    ContributingProjectStructure {
        section: ContributingProjectStructureSection,
    },
    #[route("/contributing/guiding_principles#:section")]
    ContributingGuidingPrinciples {
        section: ContributingGuidingPrinciplesSection,
    },
    #[route("/CLI/#:section")]
    CliIndex { section: CliIndexSection },
    #[route("/CLI/creating#:section")]
    CliCreating { section: CliCreatingSection },
    #[route("/CLI/configure#:section")]
    CliConfigure { section: CliConfigureSection },
    #[route("/CLI/translate#:section")]
    CliTranslate { section: CliTranslateSection },
}
impl BookRoute {
    pub fn sections(&self) -> &'static [use_mdbook::mdbook_shared::Section] {
        &self.page().sections
    }
    pub fn page(&self) -> &'static use_mdbook::mdbook_shared::Page<Self> {
        LAZY_BOOK.get_page(self)
    }
    pub fn page_id(&self) -> use_mdbook::mdbook_shared::PageId {
        match self {
            BookRoute::Index { .. } => use_mdbook::mdbook_shared::PageId(0usize),
            BookRoute::GettingStartedIndex { .. } => use_mdbook::mdbook_shared::PageId(1usize),
            BookRoute::GuideIndex { .. } => use_mdbook::mdbook_shared::PageId(2usize),
            BookRoute::GuideTooling { .. } => use_mdbook::mdbook_shared::PageId(3usize),
            BookRoute::GuideNewApp { .. } => use_mdbook::mdbook_shared::PageId(4usize),
            BookRoute::GuideComponent { .. } => use_mdbook::mdbook_shared::PageId(5usize),
            BookRoute::GuideRsx { .. } => use_mdbook::mdbook_shared::PageId(6usize),
            BookRoute::GuideAssets { .. } => use_mdbook::mdbook_shared::PageId(7usize),
            BookRoute::GuideState { .. } => use_mdbook::mdbook_shared::PageId(8usize),
            BookRoute::GuideDataFetching { .. } => use_mdbook::mdbook_shared::PageId(9usize),
            BookRoute::GuideBackend { .. } => use_mdbook::mdbook_shared::PageId(10usize),
            BookRoute::GuideDatabases { .. } => use_mdbook::mdbook_shared::PageId(11usize),
            BookRoute::GuideRouting { .. } => use_mdbook::mdbook_shared::PageId(12usize),
            BookRoute::GuideBundle { .. } => use_mdbook::mdbook_shared::PageId(13usize),
            BookRoute::GuideDeploy { .. } => use_mdbook::mdbook_shared::PageId(14usize),
            BookRoute::GuideNextSteps { .. } => use_mdbook::mdbook_shared::PageId(15usize),
            BookRoute::EssentialsIndex { .. } => use_mdbook::mdbook_shared::PageId(16usize),
            BookRoute::EssentialsRsxIndex { .. } => use_mdbook::mdbook_shared::PageId(17usize),
            BookRoute::EssentialsLifecycleIndex { .. } => {
                use_mdbook::mdbook_shared::PageId(18usize)
            }
            BookRoute::EssentialsStateIndex { .. } => use_mdbook::mdbook_shared::PageId(19usize),
            BookRoute::EssentialsBreakingIndex { .. } => use_mdbook::mdbook_shared::PageId(20usize),
            BookRoute::GuidesIndex { .. } => use_mdbook::mdbook_shared::PageId(21usize),
            BookRoute::GuidesManagingState { .. } => use_mdbook::mdbook_shared::PageId(22usize),
            BookRoute::RouterIndex { .. } => use_mdbook::mdbook_shared::PageId(23usize),
            BookRoute::RouterExampleIndex { .. } => use_mdbook::mdbook_shared::PageId(24usize),
            BookRoute::RouterExampleFirstRoute { .. } => use_mdbook::mdbook_shared::PageId(25usize),
            BookRoute::RouterExampleBuildingANest { .. } => {
                use_mdbook::mdbook_shared::PageId(26usize)
            }
            BookRoute::RouterExampleNavigationTargets { .. } => {
                use_mdbook::mdbook_shared::PageId(27usize)
            }
            BookRoute::RouterExampleRedirectionPerfection { .. } => {
                use_mdbook::mdbook_shared::PageId(28usize)
            }
            BookRoute::RouterExampleFullCode { .. } => use_mdbook::mdbook_shared::PageId(29usize),
            BookRoute::RouterReferenceIndex { .. } => use_mdbook::mdbook_shared::PageId(30usize),
            BookRoute::RouterReferenceRoutesIndex { .. } => {
                use_mdbook::mdbook_shared::PageId(31usize)
            }
            BookRoute::RouterReferenceRoutesNested { .. } => {
                use_mdbook::mdbook_shared::PageId(32usize)
            }
            BookRoute::RouterReferenceLayouts { .. } => use_mdbook::mdbook_shared::PageId(33usize),
            BookRoute::RouterReferenceNavigationIndex { .. } => {
                use_mdbook::mdbook_shared::PageId(34usize)
            }
            BookRoute::RouterReferenceNavigationProgrammatic { .. } => {
                use_mdbook::mdbook_shared::PageId(35usize)
            }
            BookRoute::RouterReferenceHistoryProviders { .. } => {
                use_mdbook::mdbook_shared::PageId(36usize)
            }
            BookRoute::RouterReferenceHistoryButtons { .. } => {
                use_mdbook::mdbook_shared::PageId(37usize)
            }
            BookRoute::RouterReferenceRoutingUpdateCallback { .. } => {
                use_mdbook::mdbook_shared::PageId(38usize)
            }
            BookRoute::GuidesAssets { .. } => use_mdbook::mdbook_shared::PageId(39usize),
            BookRoute::GuidesWebIndex { .. } => use_mdbook::mdbook_shared::PageId(40usize),
            BookRoute::GuidesDesktopIndex { .. } => use_mdbook::mdbook_shared::PageId(41usize),
            BookRoute::GuidesMobileIndex { .. } => use_mdbook::mdbook_shared::PageId(42usize),
            BookRoute::GuidesMobileApis { .. } => use_mdbook::mdbook_shared::PageId(43usize),
            BookRoute::GuidesSsr { .. } => use_mdbook::mdbook_shared::PageId(44usize),
            BookRoute::GuidesFullstackIndex { .. } => use_mdbook::mdbook_shared::PageId(45usize),
            BookRoute::GuidesFullstackManagingDependencies { .. } => {
                use_mdbook::mdbook_shared::PageId(46usize)
            }
            BookRoute::GuidesFullstackServerFunctions { .. } => {
                use_mdbook::mdbook_shared::PageId(47usize)
            }
            BookRoute::GuidesFullstackExtractors { .. } => {
                use_mdbook::mdbook_shared::PageId(48usize)
            }
            BookRoute::GuidesFullstackMiddleware { .. } => {
                use_mdbook::mdbook_shared::PageId(49usize)
            }
            BookRoute::GuidesFullstackAuthentication { .. } => {
                use_mdbook::mdbook_shared::PageId(50usize)
            }
            BookRoute::GuidesFullstackRouting { .. } => use_mdbook::mdbook_shared::PageId(51usize),
            BookRoute::CookbookPublishing { .. } => use_mdbook::mdbook_shared::PageId(52usize),
            BookRoute::CookbookAntipatterns { .. } => use_mdbook::mdbook_shared::PageId(53usize),
            BookRoute::CookbookErrorHandling { .. } => use_mdbook::mdbook_shared::PageId(54usize),
            BookRoute::CookbookIntegrationsIndex { .. } => {
                use_mdbook::mdbook_shared::PageId(55usize)
            }
            BookRoute::CookbookIntegrationsLogging { .. } => {
                use_mdbook::mdbook_shared::PageId(56usize)
            }
            BookRoute::CookbookIntegrationsInternationalization { .. } => {
                use_mdbook::mdbook_shared::PageId(57usize)
            }
            BookRoute::CookbookStateIndex { .. } => use_mdbook::mdbook_shared::PageId(58usize),
            BookRoute::CookbookStateExternalIndex { .. } => {
                use_mdbook::mdbook_shared::PageId(59usize)
            }
            BookRoute::CookbookStateCustomHooksIndex { .. } => {
                use_mdbook::mdbook_shared::PageId(60usize)
            }
            BookRoute::CookbookBundling { .. } => use_mdbook::mdbook_shared::PageId(61usize),
            BookRoute::CookbookTesting { .. } => use_mdbook::mdbook_shared::PageId(62usize),
            BookRoute::CookbookTailwind { .. } => use_mdbook::mdbook_shared::PageId(63usize),
            BookRoute::CookbookOptimizing { .. } => use_mdbook::mdbook_shared::PageId(64usize),
            BookRoute::MigrationIndex { .. } => use_mdbook::mdbook_shared::PageId(65usize),
            BookRoute::ReferenceIndex { .. } => use_mdbook::mdbook_shared::PageId(66usize),
            BookRoute::ReferenceHotreload { .. } => use_mdbook::mdbook_shared::PageId(67usize),
            BookRoute::ReferenceRsx { .. } => use_mdbook::mdbook_shared::PageId(68usize),
            BookRoute::ReferenceComponents { .. } => use_mdbook::mdbook_shared::PageId(69usize),
            BookRoute::ReferenceComponentProps { .. } => use_mdbook::mdbook_shared::PageId(70usize),
            BookRoute::ReferenceEventHandlers { .. } => use_mdbook::mdbook_shared::PageId(71usize),
            BookRoute::ReferenceHooks { .. } => use_mdbook::mdbook_shared::PageId(72usize),
            BookRoute::ReferenceUserInput { .. } => use_mdbook::mdbook_shared::PageId(73usize),
            BookRoute::ReferenceContext { .. } => use_mdbook::mdbook_shared::PageId(74usize),
            BookRoute::ReferenceDynamicRendering { .. } => {
                use_mdbook::mdbook_shared::PageId(75usize)
            }
            BookRoute::ReferenceRouter { .. } => use_mdbook::mdbook_shared::PageId(76usize),
            BookRoute::ReferenceUseResource { .. } => use_mdbook::mdbook_shared::PageId(77usize),
            BookRoute::ReferenceUseCoroutine { .. } => use_mdbook::mdbook_shared::PageId(78usize),
            BookRoute::ReferenceSpawn { .. } => use_mdbook::mdbook_shared::PageId(79usize),
            BookRoute::ContributingIndex { .. } => use_mdbook::mdbook_shared::PageId(80usize),
            BookRoute::ContributingProjectStructure { .. } => {
                use_mdbook::mdbook_shared::PageId(81usize)
            }
            BookRoute::ContributingGuidingPrinciples { .. } => {
                use_mdbook::mdbook_shared::PageId(82usize)
            }
            BookRoute::CliIndex { .. } => use_mdbook::mdbook_shared::PageId(83usize),
            BookRoute::CliCreating { .. } => use_mdbook::mdbook_shared::PageId(84usize),
            BookRoute::CliConfigure { .. } => use_mdbook::mdbook_shared::PageId(85usize),
            BookRoute::CliTranslate { .. } => use_mdbook::mdbook_shared::PageId(86usize),
        }
    }
}
impl Default for BookRoute {
    fn default() -> Self {
        BookRoute::Index {
            section: IndexSection::Empty,
        }
    }
}
pub static LAZY_BOOK: use_mdbook::Lazy<use_mdbook::mdbook_shared::MdBook<BookRoute>> =
    use_mdbook::Lazy::new(|| {
        let mut page_id_mapping = ::std::collections::HashMap::new();
        let mut pages = Vec::new();
        pages.push((0usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Introduction".to_string(),
                url: BookRoute::Index {
                    section: IndexSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Introduction".to_string(),
                        id: "introduction".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "What is Dioxus?".to_string(),
                        id: "what-is-dioxus?".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Why Dioxus?".to_string(),
                        id: "why-dioxus?".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Syntax and Ecosystem".to_string(),
                        id: "syntax-and-ecosystem".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Stability".to_string(),
                        id: "stability".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Examples, projects, tutorials, and more".to_string(),
                        id: "examples,-projects,-tutorials,-and-more".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Who's funding Dioxus?".to_string(),
                        id: "who's-funding-dioxus?".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(0usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::Index {
                section: IndexSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(0usize),
        );
        pages.push((1usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Getting Started".to_string(),
                url: BookRoute::GettingStartedIndex {
                    section: GettingStartedIndexSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Getting Started".to_string(),
                        id: "getting-started".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Pick an Editor".to_string(),
                        id: "pick-an-editor".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Install Rust-Analyzer".to_string(),
                        id: "install-rust-analyzer".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Install Rust".to_string(),
                        id: "install-rust".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Install cargo-binstall".to_string(),
                        id: "install-cargo-binstall".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Install the Dioxus CLI".to_string(),
                        id: "install-the-dioxus-cli".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Platform-specific dependencies".to_string(),
                        id: "platform-specific-dependencies".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "macOS".to_string(),
                        id: "macos".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Windows".to_string(),
                        id: "windows".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Linux".to_string(),
                        id: "linux".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "WSL".to_string(),
                        id: "wsl".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "iOS".to_string(),
                        id: "ios".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Android".to_string(),
                        id: "android".to_string(),
                        level: 3usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(1usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GettingStartedIndex {
                section: GettingStartedIndexSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(1usize),
        );
        pages.push((2usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Tutorial".to_string(),
                url: BookRoute::GuideIndex {
                    section: GuideIndexSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Dioxus Tutorial".to_string(),
                        id: "dioxus-tutorial".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "What will we be learning?".to_string(),
                        id: "what-will-we-be-learning?".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "What are we building?".to_string(),
                        id: "what-are-we-building?".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(2usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuideIndex {
                section: GuideIndexSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(2usize),
        );
        pages.push((3usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Tooling Setup".to_string(),
                url: BookRoute::GuideTooling {
                    section: GuideToolingSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Setting up Tooling".to_string(),
                        id: "setting-up-tooling".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Checklist".to_string(),
                        id: "checklist".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Verify your setup".to_string(),
                        id: "verify-your-setup".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "All the Commands".to_string(),
                        id: "all-the-commands".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(3usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuideTooling {
                section: GuideToolingSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(3usize),
        );
        pages.push((4usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Creating a new app".to_string(),
                url: BookRoute::GuideNewApp {
                    section: GuideNewAppSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Create a new project".to_string(),
                        id: "create-a-new-project".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Running the project".to_string(),
                        id: "running-the-project".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Structure of the app".to_string(),
                        id: "structure-of-the-app".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "The Cargo.toml".to_string(),
                        id: "the-cargo.toml".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Dioxus.toml".to_string(),
                        id: "dioxus.toml".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Assets Folder".to_string(),
                        id: "assets-folder".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "main.rs".to_string(),
                        id: "main.rs".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Resetting to Basics".to_string(),
                        id: "resetting-to-basics".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(4usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuideNewApp {
                section: GuideNewAppSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(4usize),
        );
        pages.push((5usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Your First Component".to_string(),
                url: BookRoute::GuideComponent {
                    section: GuideComponentSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Your First Component".to_string(),
                        id: "your-first-component".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "What is a component?".to_string(),
                        id: "what-is-a-component?".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Component Properties".to_string(),
                        id: "component-properties".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Properties are Immutable".to_string(),
                        id: "properties-are-immutable".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Component Functions are Called Multiple Times".to_string(),
                        id: "component-functions-are-called-multiple-times".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Composing Components".to_string(),
                        id: "composing-components".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(5usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuideComponent {
                section: GuideComponentSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(5usize),
        );
        pages.push((6usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Creating UI with RSX".to_string(),
                url: BookRoute::GuideRsx {
                    section: GuideRsxSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Describing the UI".to_string(),
                        id: "describing-the-ui".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Editing RSX with Hot-Reloading".to_string(),
                        id: "editing-rsx-with-hot-reloading".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "RSX is just HTML".to_string(),
                        id: "rsx-is-just-html".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Adding UI to our ".to_string(),
                        id: "adding-ui-to-our".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(6usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuideRsx {
                section: GuideRsxSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(6usize),
        );
        pages.push((7usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Styling and Assets".to_string(),
                url: BookRoute::GuideAssets {
                    section: GuideAssetsSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Styling and Assets".to_string(),
                        id: "styling-and-assets".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Dioxus uses CSS for Styling".to_string(),
                        id: "dioxus-uses-css-for-styling".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Adding the CSS File with asset!()".to_string(),
                        id: "adding-the-css-file-with-asset!()".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Hot-Reloading".to_string(),
                        id: "hot-reloading".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Including Images".to_string(),
                        id: "including-images".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Optimizations".to_string(),
                        id: "optimizations".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "The Final CSS".to_string(),
                        id: "the-final-css".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(7usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuideAssets {
                section: GuideAssetsSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(7usize),
        );
        pages.push((8usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Adding State".to_string(),
                url: BookRoute::GuideState {
                    section: GuideStateSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Interactivity".to_string(),
                        id: "interactivity".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Encapsulating State".to_string(),
                        id: "encapsulating-state".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Event Handlers".to_string(),
                        id: "event-handlers".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "State with use_hook".to_string(),
                        id: "state-with-use_hook".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Signals and use_signal".to_string(),
                        id: "signals-and-use_signal".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Global State with Context".to_string(),
                        id: "global-state-with-context".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Global Signals".to_string(),
                        id: "global-signals".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(8usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuideState {
                section: GuideStateSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(8usize),
        );
        pages.push((9usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Fetching Data".to_string(),
                url: BookRoute::GuideDataFetching {
                    section: GuideDataFetchingSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Fetching Data".to_string(),
                        id: "fetching-data".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Adding Dependencies".to_string(),
                        id: "adding-dependencies".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Defining a Response Type".to_string(),
                        id: "defining-a-response-type".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Using ".to_string(),
                        id: "using".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Managing Data Fetching with use_resource".to_string(),
                        id: "managing-data-fetching-with-use_resource".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(9usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuideDataFetching {
                section: GuideDataFetchingSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(9usize),
        );
        pages.push((10usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Add a Backend".to_string(),
                url: BookRoute::GuideBackend {
                    section: GuideBackendSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Adding a Backend".to_string(),
                        id: "adding-a-backend".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Enabling Fullstack".to_string(),
                        id: "enabling-fullstack".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Server Functions: an inline RPC system".to_string(),
                        id: "server-functions:-an-inline-rpc-system".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "The Client/Server split".to_string(),
                        id: "the-client/server-split".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Managing Dependencies".to_string(),
                        id: "managing-dependencies".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Our HotDog Server Function".to_string(),
                        id: "our-hotdog-server-function".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Calling the server function".to_string(),
                        id: "calling-the-server-function".to_string(),
                        level: 3usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(10usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuideBackend {
                section: GuideBackendSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(10usize),
        );
        pages.push((11usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Working with Databases".to_string(),
                url: BookRoute::GuideDatabases {
                    section: GuideDatabasesSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Working with Databases".to_string(),
                        id: "working-with-databases".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Choosing a Database".to_string(),
                        id: "choosing-a-database".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Adding Database operations to HotDog".to_string(),
                        id: "adding-database-operations-to-hotdog".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Notes on Databases and Rust".to_string(),
                        id: "notes-on-databases-and-rust".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Choosing a Database Provider".to_string(),
                        id: "choosing-a-database-provider".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(11usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuideDatabases {
                section: GuideDatabasesSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(11usize),
        );
        pages.push((12usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Routing and Structure".to_string(),
                url: BookRoute::GuideRouting {
                    section: GuideRoutingSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Adding More Routes".to_string(),
                        id: "adding-more-routes".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Organizing our Project".to_string(),
                        id: "organizing-our-project".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Creating a Route".to_string(),
                        id: "creating-a-route".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Rendering the Route".to_string(),
                        id: "rendering-the-route".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Rendering the NavBar with a Layout".to_string(),
                        id: "rendering-the-navbar-with-a-layout".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Adding a Favorites Route".to_string(),
                        id: "adding-a-favorites-route".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Our Favorites Page".to_string(),
                        id: "our-favorites-page".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(12usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuideRouting {
                section: GuideRoutingSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(12usize),
        );
        pages.push((13usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Bundling".to_string(),
                url: BookRoute::GuideBundle {
                    section: GuideBundleSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Bundling".to_string(),
                        id: "bundling".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Testing on Desktop and Mobile".to_string(),
                        id: "testing-on-desktop-and-mobile".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Testing on iOS".to_string(),
                        id: "testing-on-ios".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Testing on Android".to_string(),
                        id: "testing-on-android".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Testing on Desktop".to_string(),
                        id: "testing-on-desktop".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Bundling for the web".to_string(),
                        id: "bundling-for-the-web".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Bundling for Desktop and Mobile".to_string(),
                        id: "bundling-for-desktop-and-mobile".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Customizing your Bundle".to_string(),
                        id: "customizing-your-bundle".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Automating dx bundle with JSON mode".to_string(),
                        id: "automating-dx-bundle-with-json-mode".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(13usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuideBundle {
                section: GuideBundleSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(13usize),
        );
        pages.push((14usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Deploying".to_string(),
                url: BookRoute::GuideDeploy {
                    section: GuideDeploySection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Deploying".to_string(),
                        id: "deploying".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Dioxus Deploy".to_string(),
                        id: "dioxus-deploy".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Deploying your Desktop and Mobile apps".to_string(),
                        id: "deploying-your-desktop-and-mobile-apps".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Deploy Requirements".to_string(),
                        id: "deploy-requirements".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Choosing a deploy provider".to_string(),
                        id: "choosing-a-deploy-provider".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Building a Dockerfile".to_string(),
                        id: "building-a-dockerfile".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Deploying to Fly".to_string(),
                        id: "deploying-to-fly".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Continuous Deployment".to_string(),
                        id: "continuous-deployment".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Fullstack Desktop and Mobile".to_string(),
                        id: "fullstack-desktop-and-mobile".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Next Steps".to_string(),
                        id: "next-steps".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(14usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuideDeploy {
                section: GuideDeploySection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(14usize),
        );
        pages.push((15usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Next Steps".to_string(),
                url: BookRoute::GuideNextSteps {
                    section: GuideNextStepsSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Wrapping Up".to_string(),
                        id: "wrapping-up".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Up Next".to_string(),
                        id: "up-next".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Ideas for New Features".to_string(),
                        id: "ideas-for-new-features".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "FAQ".to_string(),
                        id: "faq".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Is Dioxus Fast?".to_string(),
                        id: "is-dioxus-fast?".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Is Rust too hard?".to_string(),
                        id: "is-rust-too-hard?".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Does Dioxus support \"xyz\"?".to_string(),
                        id: "does-dioxus-support-\"xyz\"?".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Why RSX instead of HTML?".to_string(),
                        id: "why-rsx-instead-of-html?".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Should I use Dioxus or Tauri or Leptos or Iced or...?".to_string(),
                        id: "should-i-use-dioxus-or-tauri-or-leptos-or-iced-or...?".to_string(),
                        level: 3usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(15usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuideNextSteps {
                section: GuideNextStepsSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(15usize),
        );
        pages.push((16usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Core Concepts".to_string(),
                url: BookRoute::EssentialsIndex {
                    section: EssentialsIndexSection::Empty,
                },
                segments: vec![],
                sections: vec![::use_mdbook::mdbook_shared::Section {
                    title: "Core Topics".to_string(),
                    id: "core-topics".to_string(),
                    level: 1usize,
                }],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(16usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::EssentialsIndex {
                section: EssentialsIndexSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(16usize),
        );
        pages.push((17usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Building UIs with RSX".to_string(),
                url: BookRoute::EssentialsRsxIndex {
                    section: EssentialsRsxIndexSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Building UIs with RSX".to_string(),
                        id: "building-uis-with-rsx".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Text Nodes".to_string(),
                        id: "text-nodes".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Elements".to_string(),
                        id: "elements".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Attributes".to_string(),
                        id: "attributes".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Conditional Attributes".to_string(),
                        id: "conditional-attributes".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Event Listeners".to_string(),
                        id: "event-listeners".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Children".to_string(),
                        id: "children".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Loops".to_string(),
                        id: "loops".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "If Statements".to_string(),
                        id: "if-statements".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Why RSX and not HTML ?".to_string(),
                        id: "why-rsx-and-not-html-?".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(17usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::EssentialsRsxIndex {
                section: EssentialsRsxIndexSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(17usize),
        );
        pages.push((18usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Component Lifecycle".to_string(),
                url: BookRoute::EssentialsLifecycleIndex {
                    section: EssentialsLifecycleIndexSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Component Lifecycle".to_string(),
                        id: "component-lifecycle".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Initializing State with ".to_string(),
                        id: "initializing-state-with".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Rerendering".to_string(),
                        id: "rerendering".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "⚠\u{fe0f} Don't mutate state in the body of a component"
                            .to_string(),
                        id: "⚠\u{fe0f}-don't-mutate-state-in-the-body-of-a-component".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Using Effects".to_string(),
                        id: "using-effects".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Cleaning Up Components with Drop".to_string(),
                        id: "cleaning-up-components-with-drop".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(18usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::EssentialsLifecycleIndex {
                section: EssentialsLifecycleIndexSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(18usize),
        );
        pages.push((19usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Managing State".to_string(),
                url: BookRoute::EssentialsStateIndex {
                    section: EssentialsStateIndexSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Managing State".to_string(),
                        id: "managing-state".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Creating State".to_string(),
                        id: "creating-state".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Reactive Scopes".to_string(),
                        id: "reactive-scopes".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Derived State".to_string(),
                        id: "derived-state".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Derived Async State".to_string(),
                        id: "derived-async-state".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Derived UI".to_string(),
                        id: "derived-ui".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Working with Untracked State".to_string(),
                        id: "working-with-untracked-state".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Making Props Reactive".to_string(),
                        id: "making-props-reactive".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Moving Around State".to_string(),
                        id: "moving-around-state".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Passing props".to_string(),
                        id: "passing-props".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Passing context".to_string(),
                        id: "passing-context".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Using globals".to_string(),
                        id: "using-globals".to_string(),
                        level: 3usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(19usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::EssentialsStateIndex {
                section: EssentialsStateIndexSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(19usize),
        );
        pages.push((20usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Breaking Out".to_string(),
                url: BookRoute::EssentialsBreakingIndex {
                    section: EssentialsBreakingIndexSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Breaking Out of Dioxus".to_string(),
                        id: "breaking-out-of-dioxus".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Interacting with JavaScript with ".to_string(),
                        id: "interacting-with-javascript-with".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Synchronizing DOM updates with ".to_string(),
                        id: "synchronizing-dom-updates-with".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Getting access to elements with ".to_string(),
                        id: "getting-access-to-elements-with".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Down casting web sys events".to_string(),
                        id: "down-casting-web-sys-events".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(20usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::EssentialsBreakingIndex {
                section: EssentialsBreakingIndexSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(20usize),
        );
        pages.push((21usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Guides".to_string(),
                url: BookRoute::GuidesIndex {
                    section: GuidesIndexSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Dioxus Guides".to_string(),
                        id: "dioxus-guides".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "State".to_string(),
                        id: "state".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Assets".to_string(),
                        id: "assets".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Platforms".to_string(),
                        id: "platforms".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(21usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuidesIndex {
                section: GuidesIndexSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(21usize),
        );
        pages.push((22usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Managing State".to_string(),
                url: BookRoute::GuidesManagingState {
                    section: GuidesManagingStateSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "The Rules of Hooks".to_string(),
                        id: "the-rules-of-hooks".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "No Hooks in Conditionals".to_string(),
                        id: "no-hooks-in-conditionals".to_string(),
                        level: 4usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "No Hooks in Closures".to_string(),
                        id: "no-hooks-in-closures".to_string(),
                        level: 4usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "No Hooks in Loops".to_string(),
                        id: "no-hooks-in-loops".to_string(),
                        level: 4usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(22usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuidesManagingState {
                section: GuidesManagingStateSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(22usize),
        );
        pages.push((23usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Router".to_string(),
                url: BookRoute::RouterIndex {
                    section: RouterIndexSection::Empty,
                },
                segments: vec![],
                sections: vec![::use_mdbook::mdbook_shared::Section {
                    title: "Introduction".to_string(),
                    id: "introduction".to_string(),
                    level: 1usize,
                }],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(23usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::RouterIndex {
                section: RouterIndexSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(23usize),
        );
        pages.push((24usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Example Project".to_string(),
                url: BookRoute::RouterExampleIndex {
                    section: RouterExampleIndexSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Overview".to_string(),
                        id: "overview".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "You'll learn how to".to_string(),
                        id: "you'll-learn-how-to".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(24usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::RouterExampleIndex {
                section: RouterExampleIndexSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(24usize),
        );
        pages.push((25usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Creating Our First Route".to_string(),
                url: BookRoute::RouterExampleFirstRoute {
                    section: RouterExampleFirstRouteSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Creating Our First Route".to_string(),
                        id: "creating-our-first-route".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Fundamentals".to_string(),
                        id: "fundamentals".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Creating Routes".to_string(),
                        id: "creating-routes".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Fallback Route".to_string(),
                        id: "fallback-route".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Conclusion".to_string(),
                        id: "conclusion".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(25usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::RouterExampleFirstRoute {
                section: RouterExampleFirstRouteSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(25usize),
        );
        pages.push((26usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Building a Nest".to_string(),
                url: BookRoute::RouterExampleBuildingANest {
                    section: RouterExampleBuildingANestSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Building a Nest".to_string(),
                        id: "building-a-nest".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Site Navigation".to_string(),
                        id: "site-navigation".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "URL Parameters and Nested Routes".to_string(),
                        id: "url-parameters-and-nested-routes".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Conclusion".to_string(),
                        id: "conclusion".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(26usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::RouterExampleBuildingANest {
                section: RouterExampleBuildingANestSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(26usize),
        );
        pages.push((27usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Navigation Targets".to_string(),
                url: BookRoute::RouterExampleNavigationTargets {
                    section: RouterExampleNavigationTargetsSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Navigation Targets".to_string(),
                        id: "navigation-targets".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "What is a navigation target?".to_string(),
                        id: "what-is-a-navigation-target?".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "External navigation".to_string(),
                        id: "external-navigation".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(27usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::RouterExampleNavigationTargets {
                section: RouterExampleNavigationTargetsSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(27usize),
        );
        pages.push((28usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Redirection Perfection".to_string(),
                url: BookRoute::RouterExampleRedirectionPerfection {
                    section: RouterExampleRedirectionPerfectionSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Redirection Perfection".to_string(),
                        id: "redirection-perfection".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Creating Redirects".to_string(),
                        id: "creating-redirects".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Conclusion".to_string(),
                        id: "conclusion".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Challenges".to_string(),
                        id: "challenges".to_string(),
                        level: 3usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(28usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::RouterExampleRedirectionPerfection {
                section: RouterExampleRedirectionPerfectionSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(28usize),
        );
        pages.push((29usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Full Code".to_string(),
                url: BookRoute::RouterExampleFullCode {
                    section: RouterExampleFullCodeSection::Empty,
                },
                segments: vec![],
                sections: vec![::use_mdbook::mdbook_shared::Section {
                    title: "Full Code".to_string(),
                    id: "full-code".to_string(),
                    level: 1usize,
                }],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(29usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::RouterExampleFullCode {
                section: RouterExampleFullCodeSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(29usize),
        );
        pages.push((30usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Reference".to_string(),
                url: BookRoute::RouterReferenceIndex {
                    section: RouterReferenceIndexSection::Empty,
                },
                segments: vec![],
                sections: vec![::use_mdbook::mdbook_shared::Section {
                    title: "Adding the router to your application".to_string(),
                    id: "adding-the-router-to-your-application".to_string(),
                    level: 1usize,
                }],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(30usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::RouterReferenceIndex {
                section: RouterReferenceIndexSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(30usize),
        );
        pages.push((31usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Defining Routes".to_string(),
                url: BookRoute::RouterReferenceRoutesIndex {
                    section: RouterReferenceRoutesIndexSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Defining Routes".to_string(),
                        id: "defining-routes".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Route Segments".to_string(),
                        id: "route-segments".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Static segments".to_string(),
                        id: "static-segments".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Dynamic Segments".to_string(),
                        id: "dynamic-segments".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Catch All Segments".to_string(),
                        id: "catch-all-segments".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Query Segments".to_string(),
                        id: "query-segments".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(31usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::RouterReferenceRoutesIndex {
                section: RouterReferenceRoutesIndexSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(31usize),
        );
        pages.push((32usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Nested Routes".to_string(),
                url: BookRoute::RouterReferenceRoutesNested {
                    section: RouterReferenceRoutesNestedSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Nested Routes".to_string(),
                        id: "nested-routes".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Nesting".to_string(),
                        id: "nesting".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(32usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::RouterReferenceRoutesNested {
                section: RouterReferenceRoutesNestedSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(32usize),
        );
        pages.push((33usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Layouts".to_string(),
                url: BookRoute::RouterReferenceLayouts {
                    section: RouterReferenceLayoutsSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Layouts".to_string(),
                        id: "layouts".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Layouts with dynamic segments".to_string(),
                        id: "layouts-with-dynamic-segments".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(33usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::RouterReferenceLayouts {
                section: RouterReferenceLayoutsSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(33usize),
        );
        pages.push((34usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Navigation".to_string(),
                url: BookRoute::RouterReferenceNavigationIndex {
                    section: RouterReferenceNavigationIndexSection::Empty,
                },
                segments: vec![],
                sections: vec![::use_mdbook::mdbook_shared::Section {
                    title: "Links & Navigation".to_string(),
                    id: "links-&-navigation".to_string(),
                    level: 1usize,
                }],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(34usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::RouterReferenceNavigationIndex {
                section: RouterReferenceNavigationIndexSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(34usize),
        );
        pages.push((35usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Programmatic Navigation".to_string(),
                url: BookRoute::RouterReferenceNavigationProgrammatic {
                    section: RouterReferenceNavigationProgrammaticSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Programmatic Navigation".to_string(),
                        id: "programmatic-navigation".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Using a Navigator".to_string(),
                        id: "using-a-navigator".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "External Navigation Targets".to_string(),
                        id: "external-navigation-targets".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(35usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::RouterReferenceNavigationProgrammatic {
                section: RouterReferenceNavigationProgrammaticSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(35usize),
        );
        pages.push((36usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "History Providers".to_string(),
                url: BookRoute::RouterReferenceHistoryProviders {
                    section: RouterReferenceHistoryProvidersSection::Empty,
                },
                segments: vec![],
                sections: vec![::use_mdbook::mdbook_shared::Section {
                    title: "History Providers".to_string(),
                    id: "history-providers".to_string(),
                    level: 1usize,
                }],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(36usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::RouterReferenceHistoryProviders {
                section: RouterReferenceHistoryProvidersSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(36usize),
        );
        pages.push((37usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "History Buttons".to_string(),
                url: BookRoute::RouterReferenceHistoryButtons {
                    section: RouterReferenceHistoryButtonsSection::Empty,
                },
                segments: vec![],
                sections: vec![::use_mdbook::mdbook_shared::Section {
                    title: "History Buttons".to_string(),
                    id: "history-buttons".to_string(),
                    level: 1usize,
                }],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(37usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::RouterReferenceHistoryButtons {
                section: RouterReferenceHistoryButtonsSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(37usize),
        );
        pages.push((38usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Routing Update Callback".to_string(),
                url: BookRoute::RouterReferenceRoutingUpdateCallback {
                    section: RouterReferenceRoutingUpdateCallbackSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Routing Update Callback".to_string(),
                        id: "routing-update-callback".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "How does the callback behave?".to_string(),
                        id: "how-does-the-callback-behave?".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Code Example".to_string(),
                        id: "code-example".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(38usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::RouterReferenceRoutingUpdateCallback {
                section: RouterReferenceRoutingUpdateCallbackSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(38usize),
        );
        pages.push((39usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Assets".to_string(),
                url: BookRoute::GuidesAssets {
                    section: GuidesAssetsSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Assets".to_string(),
                        id: "assets".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Including images".to_string(),
                        id: "including-images".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Including arbitrary files".to_string(),
                        id: "including-arbitrary-files".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Including stylesheets".to_string(),
                        id: "including-stylesheets".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Conclusion".to_string(),
                        id: "conclusion".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(39usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuidesAssets {
                section: GuidesAssetsSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(39usize),
        );
        pages.push((40usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Web".to_string(),
                url: BookRoute::GuidesWebIndex {
                    section: GuidesWebIndexSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Web".to_string(),
                        id: "web".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Support".to_string(),
                        id: "support".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Running Javascript".to_string(),
                        id: "running-javascript".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Customizing Index Template".to_string(),
                        id: "customizing-index-template".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(40usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuidesWebIndex {
                section: GuidesWebIndexSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(40usize),
        );
        pages.push((41usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Desktop".to_string(),
                url: BookRoute::GuidesDesktopIndex {
                    section: GuidesDesktopIndexSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Desktop".to_string(),
                        id: "desktop".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Examples".to_string(),
                        id: "examples".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Running Javascript".to_string(),
                        id: "running-javascript".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Custom Assets".to_string(),
                        id: "custom-assets".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Integrating with Wry".to_string(),
                        id: "integrating-with-wry".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(41usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuidesDesktopIndex {
                section: GuidesDesktopIndexSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(41usize),
        );
        pages.push((42usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Mobile".to_string(),
                url: BookRoute::GuidesMobileIndex {
                    section: GuidesMobileIndexSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Mobile App".to_string(),
                        id: "mobile-app".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Support".to_string(),
                        id: "support".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Getting Set up".to_string(),
                        id: "getting-set-up".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Android".to_string(),
                        id: "android".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "IOS".to_string(),
                        id: "ios".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Running your app".to_string(),
                        id: "running-your-app".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(42usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuidesMobileIndex {
                section: GuidesMobileIndexSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(42usize),
        );
        pages.push((43usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "APIs".to_string(),
                url: BookRoute::GuidesMobileApis {
                    section: GuidesMobileApisSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Mobile".to_string(),
                        id: "mobile".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Running Javascript".to_string(),
                        id: "running-javascript".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Custom Assets".to_string(),
                        id: "custom-assets".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Integrating with Wry".to_string(),
                        id: "integrating-with-wry".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(43usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuidesMobileApis {
                section: GuidesMobileApisSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(43usize),
        );
        pages.push((44usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Streaming and SSR".to_string(),
                url: BookRoute::GuidesSsr {
                    section: GuidesSsrSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Server-Side Rendering".to_string(),
                        id: "server-side-rendering".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Setup".to_string(),
                        id: "setup".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Multithreaded Support".to_string(),
                        id: "multithreaded-support".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(44usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuidesSsr {
                section: GuidesSsrSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(44usize),
        );
        pages.push((45usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Fullstack".to_string(),
                url: BookRoute::GuidesFullstackIndex {
                    section: GuidesFullstackIndexSection::Empty,
                },
                segments: vec![],
                sections: vec![::use_mdbook::mdbook_shared::Section {
                    title: "Fullstack development".to_string(),
                    id: "fullstack-development".to_string(),
                    level: 1usize,
                }],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(45usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuidesFullstackIndex {
                section: GuidesFullstackIndexSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(45usize),
        );
        pages.push((46usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Managing Dependencies".to_string(),
                url: BookRoute::GuidesFullstackManagingDependencies {
                    section: GuidesFullstackManagingDependenciesSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Managing Fullstack Dependencies".to_string(),
                        id: "managing-fullstack-dependencies".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Client and Server Feature Flags".to_string(),
                        id: "client-and-server-feature-flags".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Adding Server Only Dependencies".to_string(),
                        id: "adding-server-only-dependencies".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Adding Client Only Dependencies".to_string(),
                        id: "adding-client-only-dependencies".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Managing Binary Specific Imports".to_string(),
                        id: "managing-binary-specific-imports".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(46usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuidesFullstackManagingDependencies {
                section: GuidesFullstackManagingDependenciesSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(46usize),
        );
        pages.push((47usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Server Functions".to_string(),
                url: BookRoute::GuidesFullstackServerFunctions {
                    section: GuidesFullstackServerFunctionsSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Communicating with the server".to_string(),
                        id: "communicating-with-the-server".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Cached data fetching".to_string(),
                        id: "cached-data-fetching".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Running the client with dioxus-desktop".to_string(),
                        id: "running-the-client-with-dioxus-desktop".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Client code".to_string(),
                        id: "client-code".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Server code".to_string(),
                        id: "server-code".to_string(),
                        level: 3usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(47usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuidesFullstackServerFunctions {
                section: GuidesFullstackServerFunctionsSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(47usize),
        );
        pages.push((48usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Extractors".to_string(),
                url: BookRoute::GuidesFullstackExtractors {
                    section: GuidesFullstackExtractorsSection::Empty,
                },
                segments: vec![],
                sections: vec![::use_mdbook::mdbook_shared::Section {
                    title: "Extractors".to_string(),
                    id: "extractors".to_string(),
                    level: 1usize,
                }],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(48usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuidesFullstackExtractors {
                section: GuidesFullstackExtractorsSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(48usize),
        );
        pages.push((49usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Middleware".to_string(),
                url: BookRoute::GuidesFullstackMiddleware {
                    section: GuidesFullstackMiddlewareSection::Empty,
                },
                segments: vec![],
                sections: vec![::use_mdbook::mdbook_shared::Section {
                    title: "Middleware".to_string(),
                    id: "middleware".to_string(),
                    level: 1usize,
                }],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(49usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuidesFullstackMiddleware {
                section: GuidesFullstackMiddlewareSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(49usize),
        );
        pages.push((50usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Authentication".to_string(),
                url: BookRoute::GuidesFullstackAuthentication {
                    section: GuidesFullstackAuthenticationSection::Empty,
                },
                segments: vec![],
                sections: vec![::use_mdbook::mdbook_shared::Section {
                    title: "Authentication".to_string(),
                    id: "authentication".to_string(),
                    level: 1usize,
                }],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(50usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuidesFullstackAuthentication {
                section: GuidesFullstackAuthenticationSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(50usize),
        );
        pages.push((51usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Routing".to_string(),
                url: BookRoute::GuidesFullstackRouting {
                    section: GuidesFullstackRoutingSection::Empty,
                },
                segments: vec![],
                sections: vec![::use_mdbook::mdbook_shared::Section {
                    title: "Routing".to_string(),
                    id: "routing".to_string(),
                    level: 1usize,
                }],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(51usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::GuidesFullstackRouting {
                section: GuidesFullstackRoutingSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(51usize),
        );
        pages.push((52usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Publishing".to_string(),
                url: BookRoute::CookbookPublishing {
                    section: CookbookPublishingSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Publishing".to_string(),
                        id: "publishing".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Web: Publishing with GitHub Pages".to_string(),
                        id: "web:-publishing-with-github-pages".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Desktop: Creating an installer".to_string(),
                        id: "desktop:-creating-an-installer".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Preparing your application for bundling".to_string(),
                        id: "preparing-your-application-for-bundling".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Adding assets to your application".to_string(),
                        id: "adding-assets-to-your-application".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Install ".to_string(),
                        id: "install".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Building".to_string(),
                        id: "building".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(52usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::CookbookPublishing {
                section: CookbookPublishingSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(52usize),
        );
        pages.push((53usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Anti-patterns".to_string(),
                url: BookRoute::CookbookAntipatterns {
                    section: CookbookAntipatternsSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Antipatterns".to_string(),
                        id: "antipatterns".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Unnecessarily Nested Fragments".to_string(),
                        id: "unnecessarily-nested-fragments".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Incorrect Iterator Keys".to_string(),
                        id: "incorrect-iterator-keys".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Avoid Interior Mutability in Props".to_string(),
                        id: "avoid-interior-mutability-in-props".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Avoid Updating State During Render".to_string(),
                        id: "avoid-updating-state-during-render".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Avoid Large Groups of State".to_string(),
                        id: "avoid-large-groups-of-state".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Running Non-Deterministic Code in the Body of a Component"
                            .to_string(),
                        id: "running-non-deterministic-code-in-the-body-of-a-component".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Overly Permissive PartialEq for Props".to_string(),
                        id: "overly-permissive-partialeq-for-props".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(53usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::CookbookAntipatterns {
                section: CookbookAntipatternsSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(53usize),
        );
        pages.push((54usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Error Handling".to_string(),
                url: BookRoute::CookbookErrorHandling {
                    section: CookbookErrorHandlingSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Error handling".to_string(),
                        id: "error-handling".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "The simplest – returning None".to_string(),
                        id: "the-simplest-–-returning-none".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Early return on result".to_string(),
                        id: "early-return-on-result".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Match results".to_string(),
                        id: "match-results".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Passing error states through components".to_string(),
                        id: "passing-error-states-through-components".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Throwing errors".to_string(),
                        id: "throwing-errors".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(54usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::CookbookErrorHandling {
                section: CookbookErrorHandlingSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(54usize),
        );
        pages.push((55usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Integrations".to_string(),
                url: BookRoute::CookbookIntegrationsIndex {
                    section: CookbookIntegrationsIndexSection::Empty,
                },
                segments: vec![],
                sections: vec![],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(55usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::CookbookIntegrationsIndex {
                section: CookbookIntegrationsIndexSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(55usize),
        );
        pages.push((56usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Logging".to_string(),
                url: BookRoute::CookbookIntegrationsLogging {
                    section: CookbookIntegrationsLoggingSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Logging".to_string(),
                        id: "logging".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Dioxus Logger".to_string(),
                        id: "dioxus-logger".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "The Tracing Crate".to_string(),
                        id: "the-tracing-crate".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Platform Intricacies".to_string(),
                        id: "platform-intricacies".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Viewing Logs".to_string(),
                        id: "viewing-logs".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Final Notes".to_string(),
                        id: "final-notes".to_string(),
                        level: 4usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(56usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::CookbookIntegrationsLogging {
                section: CookbookIntegrationsLoggingSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(56usize),
        );
        pages.push((57usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Internationalization".to_string(),
                url: BookRoute::CookbookIntegrationsInternationalization {
                    section: CookbookIntegrationsInternationalizationSection::Empty,
                },
                segments: vec![],
                sections: vec![::use_mdbook::mdbook_shared::Section {
                    title: "Internationalization".to_string(),
                    id: "internationalization".to_string(),
                    level: 1usize,
                }],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(57usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::CookbookIntegrationsInternationalization {
                section: CookbookIntegrationsInternationalizationSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(57usize),
        );
        pages.push((58usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "State Management".to_string(),
                url: BookRoute::CookbookStateIndex {
                    section: CookbookStateIndexSection::Empty,
                },
                segments: vec![],
                sections: vec![::use_mdbook::mdbook_shared::Section {
                    title: "State Cookbook".to_string(),
                    id: "state-cookbook".to_string(),
                    level: 1usize,
                }],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(58usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::CookbookStateIndex {
                section: CookbookStateIndexSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(58usize),
        );
        pages.push((59usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "External State".to_string(),
                url: BookRoute::CookbookStateExternalIndex {
                    section: CookbookStateExternalIndexSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Working with External State".to_string(),
                        id: "working-with-external-state".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Working with non-reactive State".to_string(),
                        id: "working-with-non-reactive-state".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Making Reactive State External".to_string(),
                        id: "making-reactive-state-external".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(59usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::CookbookStateExternalIndex {
                section: CookbookStateExternalIndexSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(59usize),
        );
        pages.push((60usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Custom Hooks".to_string(),
                url: BookRoute::CookbookStateCustomHooksIndex {
                    section: CookbookStateCustomHooksIndexSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Custom Hooks".to_string(),
                        id: "custom-hooks".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Composing Hooks".to_string(),
                        id: "composing-hooks".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Custom Hook Logic".to_string(),
                        id: "custom-hook-logic".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(60usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::CookbookStateCustomHooksIndex {
                section: CookbookStateCustomHooksIndexSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(60usize),
        );
        pages.push((61usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Bundle Config".to_string(),
                url: BookRoute::CookbookBundling {
                    section: CookbookBundlingSection::Empty,
                },
                segments: vec![],
                sections: vec![::use_mdbook::mdbook_shared::Section {
                    title: "Bundling config".to_string(),
                    id: "bundling-config".to_string(),
                    level: 3usize,
                }],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(61usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::CookbookBundling {
                section: CookbookBundlingSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(61usize),
        );
        pages.push((62usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Testing".to_string(),
                url: BookRoute::CookbookTesting {
                    section: CookbookTestingSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Testing".to_string(),
                        id: "testing".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Component Testing".to_string(),
                        id: "component-testing".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Hook Testing".to_string(),
                        id: "hook-testing".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "End to End Testing".to_string(),
                        id: "end-to-end-testing".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(62usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::CookbookTesting {
                section: CookbookTestingSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(62usize),
        );
        pages.push((63usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Tailwind".to_string(),
                url: BookRoute::CookbookTailwind {
                    section: CookbookTailwindSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Tailwind".to_string(),
                        id: "tailwind".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Setup".to_string(),
                        id: "setup".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Bonus Steps".to_string(),
                        id: "bonus-steps".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Development".to_string(),
                        id: "development".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Web".to_string(),
                        id: "web".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Desktop".to_string(),
                        id: "desktop".to_string(),
                        level: 3usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(63usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::CookbookTailwind {
                section: CookbookTailwindSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(63usize),
        );
        pages.push((64usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Optimizing".to_string(),
                url: BookRoute::CookbookOptimizing {
                    section: CookbookOptimizingSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Optimizing".to_string(),
                        id: "optimizing".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Building in release mode".to_string(),
                        id: "building-in-release-mode".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "UPX".to_string(),
                        id: "upx".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Build configuration".to_string(),
                        id: "build-configuration".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Stable".to_string(),
                        id: "stable".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Unstable".to_string(),
                        id: "unstable".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "wasm-opt".to_string(),
                        id: "wasm-opt".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Improving Dioxus code".to_string(),
                        id: "improving-dioxus-code".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Optimizing the size of assets".to_string(),
                        id: "optimizing-the-size-of-assets".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(64usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::CookbookOptimizing {
                section: CookbookOptimizingSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(64usize),
        );
        pages.push((65usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Migrating to v0.6".to_string(),
                url: BookRoute::MigrationIndex {
                    section: MigrationIndexSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "How to Upgrade to Dioxus 0.6".to_string(),
                        id: "how-to-upgrade-to-dioxus-0.6".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Element".to_string(),
                        id: "element".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Prevent Default".to_string(),
                        id: "prevent-default".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Assets".to_string(),
                        id: "assets".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Logging".to_string(),
                        id: "logging".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Launch".to_string(),
                        id: "launch".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Eval".to_string(),
                        id: "eval".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Fullstack".to_string(),
                        id: "fullstack".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Router".to_string(),
                        id: "router".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "derive(Props)".to_string(),
                        id: "derive(props)".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "State Management".to_string(),
                        id: "state-management".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Core changes".to_string(),
                        id: "core-changes".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Custom Renderers".to_string(),
                        id: "custom-renderers".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Minor Breaking Changes".to_string(),
                        id: "minor-breaking-changes".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(65usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::MigrationIndex {
                section: MigrationIndexSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(65usize),
        );
        pages.push((66usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Reference".to_string(),
                url: BookRoute::ReferenceIndex {
                    section: ReferenceIndexSection::Empty,
                },
                segments: vec![],
                sections: vec![::use_mdbook::mdbook_shared::Section {
                    title: "Reference".to_string(),
                    id: "reference".to_string(),
                    level: 1usize,
                }],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(66usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::ReferenceIndex {
                section: ReferenceIndexSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(66usize),
        );
        pages.push((67usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Hot-Reload".to_string(),
                url: BookRoute::ReferenceHotreload {
                    section: ReferenceHotreloadSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Dioxus Hot-Reloading Reference".to_string(),
                        id: "dioxus-hot-reloading-reference".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "What can be hot-reloaded?".to_string(),
                        id: "what-can-be-hot-reloaded?".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "What causes a full-rebuild?".to_string(),
                        id: "what-causes-a-full-rebuild?".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(67usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::ReferenceHotreload {
                section: ReferenceHotreloadSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(67usize),
        );
        pages.push((68usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "RSX".to_string(),
                url: BookRoute::ReferenceRsx {
                    section: ReferenceRsxSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Describing the UI".to_string(),
                        id: "describing-the-ui".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "RSX Features".to_string(),
                        id: "rsx-features".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Attributes".to_string(),
                        id: "attributes".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Conditional Attributes".to_string(),
                        id: "conditional-attributes".to_string(),
                        level: 4usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Custom Attributes".to_string(),
                        id: "custom-attributes".to_string(),
                        level: 4usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Special Attributes".to_string(),
                        id: "special-attributes".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "The HTML Escape Hatch".to_string(),
                        id: "the-html-escape-hatch".to_string(),
                        level: 4usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Boolean Attributes".to_string(),
                        id: "boolean-attributes".to_string(),
                        level: 4usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Interpolation".to_string(),
                        id: "interpolation".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Children".to_string(),
                        id: "children".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Fragments".to_string(),
                        id: "fragments".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Expressions".to_string(),
                        id: "expressions".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Loops".to_string(),
                        id: "loops".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "If statements".to_string(),
                        id: "if-statements".to_string(),
                        level: 3usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(68usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::ReferenceRsx {
                section: ReferenceRsxSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(68usize),
        );
        pages.push((69usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Components".to_string(),
                url: BookRoute::ReferenceComponents {
                    section: ReferenceComponentsSection::Empty,
                },
                segments: vec![],
                sections: vec![::use_mdbook::mdbook_shared::Section {
                    title: "Components".to_string(),
                    id: "components".to_string(),
                    level: 1usize,
                }],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(69usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::ReferenceComponents {
                section: ReferenceComponentsSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(69usize),
        );
        pages.push((70usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Props".to_string(),
                url: BookRoute::ReferenceComponentProps {
                    section: ReferenceComponentPropsSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Component Props".to_string(),
                        id: "component-props".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "derive(Props)".to_string(),
                        id: "derive(props)".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Prop Options".to_string(),
                        id: "prop-options".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Optional Props".to_string(),
                        id: "optional-props".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Explicitly Required Option".to_string(),
                        id: "explicitly-required-option".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Default Props".to_string(),
                        id: "default-props".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Automatic Conversion with into".to_string(),
                        id: "automatic-conversion-with-into".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "The component macro".to_string(),
                        id: "the-component-macro".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Component Children".to_string(),
                        id: "component-children".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "The children field".to_string(),
                        id: "the-children-field".to_string(),
                        level: 3usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(70usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::ReferenceComponentProps {
                section: ReferenceComponentPropsSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(70usize),
        );
        pages.push((71usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Event Handlers".to_string(),
                url: BookRoute::ReferenceEventHandlers {
                    section: ReferenceEventHandlersSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Event Handlers".to_string(),
                        id: "event-handlers".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "The Event object".to_string(),
                        id: "the-event-object".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Event propagation".to_string(),
                        id: "event-propagation".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Prevent Default".to_string(),
                        id: "prevent-default".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Handler Props".to_string(),
                        id: "handler-props".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Custom Data".to_string(),
                        id: "custom-data".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Returning a value from an event handler".to_string(),
                        id: "returning-a-value-from-an-event-handler".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(71usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::ReferenceEventHandlers {
                section: ReferenceEventHandlersSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(71usize),
        );
        pages.push((72usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Hooks".to_string(),
                url: BookRoute::ReferenceHooks {
                    section: ReferenceHooksSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Hooks and component state".to_string(),
                        id: "hooks-and-component-state".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "use_signal hook".to_string(),
                        id: "use_signal-hook".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Rules of hooks".to_string(),
                        id: "rules-of-hooks".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "No hooks in conditionals".to_string(),
                        id: "no-hooks-in-conditionals".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "No hooks in closures".to_string(),
                        id: "no-hooks-in-closures".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "No hooks in loops".to_string(),
                        id: "no-hooks-in-loops".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Additional resources".to_string(),
                        id: "additional-resources".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(72usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::ReferenceHooks {
                section: ReferenceHooksSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(72usize),
        );
        pages.push((73usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "User Input".to_string(),
                url: BookRoute::ReferenceUserInput {
                    section: ReferenceUserInputSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "User Input".to_string(),
                        id: "user-input".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Controlled Inputs".to_string(),
                        id: "controlled-inputs".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Uncontrolled Inputs".to_string(),
                        id: "uncontrolled-inputs".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Handling files".to_string(),
                        id: "handling-files".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(73usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::ReferenceUserInput {
                section: ReferenceUserInputSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(73usize),
        );
        pages.push((74usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Context".to_string(),
                url: BookRoute::ReferenceContext {
                    section: ReferenceContextSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Sharing State".to_string(),
                        id: "sharing-state".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Lifting State".to_string(),
                        id: "lifting-state".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Using Shared State".to_string(),
                        id: "using-shared-state".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(74usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::ReferenceContext {
                section: ReferenceContextSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(74usize),
        );
        pages.push((75usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Dynamic Rendering".to_string(),
                url: BookRoute::ReferenceDynamicRendering {
                    section: ReferenceDynamicRenderingSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Dynamic Rendering".to_string(),
                        id: "dynamic-rendering".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Conditional Rendering".to_string(),
                        id: "conditional-rendering".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Improving the ".to_string(),
                        id: "improving-the".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Inspecting ".to_string(),
                        id: "inspecting".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Rendering Nothing".to_string(),
                        id: "rendering-nothing".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Rendering Lists".to_string(),
                        id: "rendering-lists".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Inline for loops".to_string(),
                        id: "inline-for-loops".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "The key Attribute".to_string(),
                        id: "the-key-attribute".to_string(),
                        level: 3usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(75usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::ReferenceDynamicRendering {
                section: ReferenceDynamicRenderingSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(75usize),
        );
        pages.push((76usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Routing".to_string(),
                url: BookRoute::ReferenceRouter {
                    section: ReferenceRouterSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Router".to_string(),
                        id: "router".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "What is it?".to_string(),
                        id: "what-is-it?".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Using the router".to_string(),
                        id: "using-the-router".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Links".to_string(),
                        id: "links".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "More reading".to_string(),
                        id: "more-reading".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(76usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::ReferenceRouter {
                section: ReferenceRouterSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(76usize),
        );
        pages.push((77usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Resource".to_string(),
                url: BookRoute::ReferenceUseResource {
                    section: ReferenceUseResourceSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Resource".to_string(),
                        id: "resource".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Restarting the Future".to_string(),
                        id: "restarting-the-future".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Dependencies".to_string(),
                        id: "dependencies".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(77usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::ReferenceUseResource {
                section: ReferenceUseResourceSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(77usize),
        );
        pages.push((78usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "UseCoroutine".to_string(),
                url: BookRoute::ReferenceUseCoroutine {
                    section: ReferenceUseCoroutineSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Coroutines".to_string(),
                        id: "coroutines".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "use_coroutine".to_string(),
                        id: "use_coroutine".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Yielding Values".to_string(),
                        id: "yielding-values".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Sending Values".to_string(),
                        id: "sending-values".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Automatic injection into the Context API".to_string(),
                        id: "automatic-injection-into-the-context-api".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(78usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::ReferenceUseCoroutine {
                section: ReferenceUseCoroutineSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(78usize),
        );
        pages.push((79usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Spawn".to_string(),
                url: BookRoute::ReferenceSpawn {
                    section: ReferenceSpawnSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Spawning Futures".to_string(),
                        id: "spawning-futures".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Spawning Tokio Tasks".to_string(),
                        id: "spawning-tokio-tasks".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(79usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::ReferenceSpawn {
                section: ReferenceSpawnSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(79usize),
        );
        pages.push((80usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Contributing".to_string(),
                url: BookRoute::ContributingIndex {
                    section: ContributingIndexSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Contributing".to_string(),
                        id: "contributing".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Improving Docs".to_string(),
                        id: "improving-docs".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Working on the Ecosystem".to_string(),
                        id: "working-on-the-ecosystem".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Bugs & Features".to_string(),
                        id: "bugs-&-features".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Before you contribute".to_string(),
                        id: "before-you-contribute".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "How to test dioxus with local crate".to_string(),
                        id: "how-to-test-dioxus-with-local-crate".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(80usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::ContributingIndex {
                section: ContributingIndexSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(80usize),
        );
        pages.push((81usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Project Structure".to_string(),
                url: BookRoute::ContributingProjectStructure {
                    section: ContributingProjectStructureSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Project Structure".to_string(),
                        id: "project-structure".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Entry Points".to_string(),
                        id: "entry-points".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Renderers".to_string(),
                        id: "renderers".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Experimental Native Rendering".to_string(),
                        id: "experimental-native-rendering".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Fullstack".to_string(),
                        id: "fullstack".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Core utilities".to_string(),
                        id: "core-utilities".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Web utilities".to_string(),
                        id: "web-utilities".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "State Management".to_string(),
                        id: "state-management".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Logging".to_string(),
                        id: "logging".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Routing".to_string(),
                        id: "routing".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Assets".to_string(),
                        id: "assets".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Formatting".to_string(),
                        id: "formatting".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Linting".to_string(),
                        id: "linting".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Translation".to_string(),
                        id: "translation".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Hot Reloading".to_string(),
                        id: "hot-reloading".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "CLI".to_string(),
                        id: "cli".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Extension".to_string(),
                        id: "extension".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Testing".to_string(),
                        id: "testing".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(81usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::ContributingProjectStructure {
                section: ContributingProjectStructureSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(81usize),
        );
        pages.push((82usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Guiding Principles".to_string(),
                url: BookRoute::ContributingGuidingPrinciples {
                    section: ContributingGuidingPrinciplesSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Overall Goals".to_string(),
                        id: "overall-goals".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Cross-Platform".to_string(),
                        id: "cross-platform".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Performance".to_string(),
                        id: "performance".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Type Safety".to_string(),
                        id: "type-safety".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Developer Experience".to_string(),
                        id: "developer-experience".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(82usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::ContributingGuidingPrinciples {
                section: ContributingGuidingPrinciplesSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(82usize),
        );
        pages.push((83usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "CLI".to_string(),
                url: BookRoute::CliIndex {
                    section: CliIndexSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Introduction".to_string(),
                        id: "introduction".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Features".to_string(),
                        id: "features".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(83usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::CliIndex {
                section: CliIndexSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(83usize),
        );
        pages.push((84usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Create a Project".to_string(),
                url: BookRoute::CliCreating {
                    section: CliCreatingSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Create a Project".to_string(),
                        id: "create-a-project".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Initializing a project".to_string(),
                        id: "initializing-a-project".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(84usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::CliCreating {
                section: CliCreatingSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(84usize),
        );
        pages.push((85usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Configure Project".to_string(),
                url: BookRoute::CliConfigure {
                    section: CliConfigureSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Configure Project".to_string(),
                        id: "configure-project".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Structure".to_string(),
                        id: "structure".to_string(),
                        level: 2usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Application 🔒".to_string(),
                        id: "application-🔒".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Web.App 🔒".to_string(),
                        id: "web.app-🔒".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Web.Watcher 🔒".to_string(),
                        id: "web.watcher-🔒".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Web.Resource 🔒".to_string(),
                        id: "web.resource-🔒".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Web.Resource.Dev 🔒".to_string(),
                        id: "web.resource.dev-🔒".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Web.Proxy".to_string(),
                        id: "web.proxy".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Web.https".to_string(),
                        id: "web.https".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Web.pre_compress".to_string(),
                        id: "web.pre_compress".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Web.wasm_opt".to_string(),
                        id: "web.wasm_opt".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Bundle".to_string(),
                        id: "bundle".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Bundle.macos".to_string(),
                        id: "bundle.macos".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Bundle.windows".to_string(),
                        id: "bundle.windows".to_string(),
                        level: 3usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Config example".to_string(),
                        id: "config-example".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(85usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::CliConfigure {
                section: CliConfigureSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(85usize),
        );
        pages.push((86usize, {
            ::use_mdbook::mdbook_shared::Page {
                title: "Translate HTML".to_string(),
                url: BookRoute::CliTranslate {
                    section: CliTranslateSection::Empty,
                },
                segments: vec![],
                sections: vec![
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Translating existing HTML".to_string(),
                        id: "translating-existing-html".to_string(),
                        level: 1usize,
                    },
                    ::use_mdbook::mdbook_shared::Section {
                        title: "Usage".to_string(),
                        id: "usage".to_string(),
                        level: 2usize,
                    },
                ],
                raw: String::new(),
                id: ::use_mdbook::mdbook_shared::PageId(86usize),
            }
        }));
        page_id_mapping.insert(
            BookRoute::CliTranslate {
                section: CliTranslateSection::Empty,
            },
            ::use_mdbook::mdbook_shared::PageId(86usize),
        );
        ::use_mdbook::mdbook_shared::MdBook {
            summary: ::use_mdbook::mdbook_shared::Summary {
                title: Some("Summary".to_string()),
                prefix_chapters: vec![],
                numbered_chapters: vec![
                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                        name: "Introduction".to_string(),
                        location: Some(BookRoute::Index {
                            section: IndexSection::Empty,
                        }),
                        number: Some(
                            ::use_mdbook::mdbook_shared::SectionNumber(vec![1u32]),
                        ),
                        nested_items: vec![
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Getting Started".to_string(),
                                location: Some(BookRoute::GettingStartedIndex {
                                    section: GettingStartedIndexSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![1u32, 1u32]),
                                ),
                                nested_items: vec![],
                            }),
                        ],
                    }),
                    ::use_mdbook::mdbook_shared::SummaryItem::Separator,
                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                        name: "Tutorial".to_string(),
                        location: Some(BookRoute::GuideIndex {
                            section: GuideIndexSection::Empty,
                        }),
                        number: Some(
                            ::use_mdbook::mdbook_shared::SectionNumber(vec![2u32]),
                        ),
                        nested_items: vec![
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Tooling Setup".to_string(),
                                location: Some(BookRoute::GuideTooling {
                                    section: GuideToolingSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![2u32, 1u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Creating a new app".to_string(),
                                location: Some(BookRoute::GuideNewApp {
                                    section: GuideNewAppSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![2u32, 2u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Your First Component".to_string(),
                                location: Some(BookRoute::GuideComponent {
                                    section: GuideComponentSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![2u32, 3u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Creating UI with RSX".to_string(),
                                location: Some(BookRoute::GuideRsx {
                                    section: GuideRsxSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![2u32, 4u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Styling and Assets".to_string(),
                                location: Some(BookRoute::GuideAssets {
                                    section: GuideAssetsSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![2u32, 5u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Adding State".to_string(),
                                location: Some(BookRoute::GuideState {
                                    section: GuideStateSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![2u32, 6u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Fetching Data".to_string(),
                                location: Some(BookRoute::GuideDataFetching {
                                    section: GuideDataFetchingSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![2u32, 7u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Add a Backend".to_string(),
                                location: Some(BookRoute::GuideBackend {
                                    section: GuideBackendSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![2u32, 8u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Working with Databases".to_string(),
                                location: Some(BookRoute::GuideDatabases {
                                    section: GuideDatabasesSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![2u32, 9u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Routing and Structure".to_string(),
                                location: Some(BookRoute::GuideRouting {
                                    section: GuideRoutingSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                        vec![2u32, 10u32],
                                    ),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Bundling".to_string(),
                                location: Some(BookRoute::GuideBundle {
                                    section: GuideBundleSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                        vec![2u32, 11u32],
                                    ),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Deploying".to_string(),
                                location: Some(BookRoute::GuideDeploy {
                                    section: GuideDeploySection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                        vec![2u32, 12u32],
                                    ),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Next Steps".to_string(),
                                location: Some(BookRoute::GuideNextSteps {
                                    section: GuideNextStepsSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                        vec![2u32, 13u32],
                                    ),
                                ),
                                nested_items: vec![],
                            }),
                        ],
                    }),
                    ::use_mdbook::mdbook_shared::SummaryItem::Separator,
                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                        name: "Core Concepts".to_string(),
                        location: Some(BookRoute::EssentialsIndex {
                            section: EssentialsIndexSection::Empty,
                        }),
                        number: Some(
                            ::use_mdbook::mdbook_shared::SectionNumber(vec![3u32]),
                        ),
                        nested_items: vec![
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Building UIs with RSX".to_string(),
                                location: Some(BookRoute::EssentialsRsxIndex {
                                    section: EssentialsRsxIndexSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![3u32, 1u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Component Lifecycle".to_string(),
                                location: Some(BookRoute::EssentialsLifecycleIndex {
                                    section: EssentialsLifecycleIndexSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![3u32, 2u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Managing State".to_string(),
                                location: Some(BookRoute::EssentialsStateIndex {
                                    section: EssentialsStateIndexSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![3u32, 3u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Breaking Out".to_string(),
                                location: Some(BookRoute::EssentialsBreakingIndex {
                                    section: EssentialsBreakingIndexSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![3u32, 4u32]),
                                ),
                                nested_items: vec![],
                            }),
                        ],
                    }),
                    ::use_mdbook::mdbook_shared::SummaryItem::Separator,
                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                        name: "Guides".to_string(),
                        location: Some(BookRoute::GuidesIndex {
                            section: GuidesIndexSection::Empty,
                        }),
                        number: Some(
                            ::use_mdbook::mdbook_shared::SectionNumber(vec![4u32]),
                        ),
                        nested_items: vec![
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Managing State".to_string(),
                                location: Some(BookRoute::GuidesManagingState {
                                    section: GuidesManagingStateSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![4u32, 1u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Router".to_string(),
                                location: Some(BookRoute::RouterIndex {
                                    section: RouterIndexSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![4u32, 2u32]),
                                ),
                                nested_items: vec![
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Example Project".to_string(),
                                        location: Some(BookRoute::RouterExampleIndex {
                                            section: RouterExampleIndexSection::Empty,
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![4u32, 2u32, 1u32],
                                            ),
                                        ),
                                        nested_items: vec![
                                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                                name: "Creating Our First Route".to_string(),
                                                location: Some(BookRoute::RouterExampleFirstRoute {
                                                    section: RouterExampleFirstRouteSection::Empty,
                                                }),
                                                number: Some(
                                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                                        vec![4u32, 2u32, 1u32, 1u32],
                                                    ),
                                                ),
                                                nested_items: vec![],
                                            }),
                                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                                name: "Building a Nest".to_string(),
                                                location: Some(BookRoute::RouterExampleBuildingANest {
                                                    section: RouterExampleBuildingANestSection::Empty,
                                                }),
                                                number: Some(
                                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                                        vec![4u32, 2u32, 1u32, 2u32],
                                                    ),
                                                ),
                                                nested_items: vec![],
                                            }),
                                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                                name: "Navigation Targets".to_string(),
                                                location: Some(BookRoute::RouterExampleNavigationTargets {
                                                    section: RouterExampleNavigationTargetsSection::Empty,
                                                }),
                                                number: Some(
                                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                                        vec![4u32, 2u32, 1u32, 3u32],
                                                    ),
                                                ),
                                                nested_items: vec![],
                                            }),
                                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                                name: "Redirection Perfection".to_string(),
                                                location: Some(BookRoute::RouterExampleRedirectionPerfection {
                                                    section: RouterExampleRedirectionPerfectionSection::Empty,
                                                }),
                                                number: Some(
                                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                                        vec![4u32, 2u32, 1u32, 4u32],
                                                    ),
                                                ),
                                                nested_items: vec![],
                                            }),
                                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                                name: "Full Code".to_string(),
                                                location: Some(BookRoute::RouterExampleFullCode {
                                                    section: RouterExampleFullCodeSection::Empty,
                                                }),
                                                number: Some(
                                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                                        vec![4u32, 2u32, 1u32, 5u32],
                                                    ),
                                                ),
                                                nested_items: vec![],
                                            }),
                                        ],
                                    }),
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Reference".to_string(),
                                        location: Some(BookRoute::RouterReferenceIndex {
                                            section: RouterReferenceIndexSection::Empty,
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![4u32, 2u32, 2u32],
                                            ),
                                        ),
                                        nested_items: vec![
                                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                                name: "Defining Routes".to_string(),
                                                location: Some(BookRoute::RouterReferenceRoutesIndex {
                                                    section: RouterReferenceRoutesIndexSection::Empty,
                                                }),
                                                number: Some(
                                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                                        vec![4u32, 2u32, 2u32, 1u32],
                                                    ),
                                                ),
                                                nested_items: vec![],
                                            }),
                                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                                name: "Nested Routes".to_string(),
                                                location: Some(BookRoute::RouterReferenceRoutesNested {
                                                    section: RouterReferenceRoutesNestedSection::Empty,
                                                }),
                                                number: Some(
                                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                                        vec![4u32, 2u32, 2u32, 2u32],
                                                    ),
                                                ),
                                                nested_items: vec![],
                                            }),
                                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                                name: "Layouts".to_string(),
                                                location: Some(BookRoute::RouterReferenceLayouts {
                                                    section: RouterReferenceLayoutsSection::Empty,
                                                }),
                                                number: Some(
                                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                                        vec![4u32, 2u32, 2u32, 3u32],
                                                    ),
                                                ),
                                                nested_items: vec![],
                                            }),
                                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                                name: "Navigation".to_string(),
                                                location: Some(BookRoute::RouterReferenceNavigationIndex {
                                                    section: RouterReferenceNavigationIndexSection::Empty,
                                                }),
                                                number: Some(
                                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                                        vec![4u32, 2u32, 2u32, 4u32],
                                                    ),
                                                ),
                                                nested_items: vec![],
                                            }),
                                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                                name: "Programmatic Navigation".to_string(),
                                                location: Some(BookRoute::RouterReferenceNavigationProgrammatic {
                                                    section: RouterReferenceNavigationProgrammaticSection::Empty,
                                                }),
                                                number: Some(
                                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                                        vec![4u32, 2u32, 2u32, 5u32],
                                                    ),
                                                ),
                                                nested_items: vec![],
                                            }),
                                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                                name: "History Providers".to_string(),
                                                location: Some(BookRoute::RouterReferenceHistoryProviders {
                                                    section: RouterReferenceHistoryProvidersSection::Empty,
                                                }),
                                                number: Some(
                                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                                        vec![4u32, 2u32, 2u32, 6u32],
                                                    ),
                                                ),
                                                nested_items: vec![],
                                            }),
                                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                                name: "History Buttons".to_string(),
                                                location: Some(BookRoute::RouterReferenceHistoryButtons {
                                                    section: RouterReferenceHistoryButtonsSection::Empty,
                                                }),
                                                number: Some(
                                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                                        vec![4u32, 2u32, 2u32, 7u32],
                                                    ),
                                                ),
                                                nested_items: vec![],
                                            }),
                                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                                name: "Routing Update Callback".to_string(),
                                                location: Some(BookRoute::RouterReferenceRoutingUpdateCallback {
                                                    section: RouterReferenceRoutingUpdateCallbackSection::Empty,
                                                }),
                                                number: Some(
                                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                                        vec![4u32, 2u32, 2u32, 8u32],
                                                    ),
                                                ),
                                                nested_items: vec![],
                                            }),
                                        ],
                                    }),
                                ],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Assets".to_string(),
                                location: Some(BookRoute::GuidesAssets {
                                    section: GuidesAssetsSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![4u32, 3u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Web".to_string(),
                                location: Some(BookRoute::GuidesWebIndex {
                                    section: GuidesWebIndexSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![4u32, 4u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Desktop".to_string(),
                                location: Some(BookRoute::GuidesDesktopIndex {
                                    section: GuidesDesktopIndexSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![4u32, 5u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Mobile".to_string(),
                                location: Some(BookRoute::GuidesMobileIndex {
                                    section: GuidesMobileIndexSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![4u32, 6u32]),
                                ),
                                nested_items: vec![
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "APIs".to_string(),
                                        location: Some(BookRoute::GuidesMobileApis {
                                            section: GuidesMobileApisSection::Empty,
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![4u32, 6u32, 1u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                ],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Streaming and SSR".to_string(),
                                location: Some(BookRoute::GuidesSsr {
                                    section: GuidesSsrSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![4u32, 7u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Fullstack".to_string(),
                                location: Some(BookRoute::GuidesFullstackIndex {
                                    section: GuidesFullstackIndexSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![4u32, 8u32]),
                                ),
                                nested_items: vec![
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Managing Dependencies".to_string(),
                                        location: Some(BookRoute::GuidesFullstackManagingDependencies {
                                            section: GuidesFullstackManagingDependenciesSection::Empty,
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![4u32, 8u32, 1u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Server Functions".to_string(),
                                        location: Some(BookRoute::GuidesFullstackServerFunctions {
                                            section: GuidesFullstackServerFunctionsSection::Empty,
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![4u32, 8u32, 2u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Extractors".to_string(),
                                        location: Some(BookRoute::GuidesFullstackExtractors {
                                            section: GuidesFullstackExtractorsSection::Empty,
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![4u32, 8u32, 3u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Middleware".to_string(),
                                        location: Some(BookRoute::GuidesFullstackMiddleware {
                                            section: GuidesFullstackMiddlewareSection::Empty,
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![4u32, 8u32, 4u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Authentication".to_string(),
                                        location: Some(BookRoute::GuidesFullstackAuthentication {
                                            section: GuidesFullstackAuthenticationSection::Empty,
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![4u32, 8u32, 5u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Routing".to_string(),
                                        location: Some(BookRoute::GuidesFullstackRouting {
                                            section: GuidesFullstackRoutingSection::Empty,
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![4u32, 8u32, 6u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                ],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Publishing".to_string(),
                                location: Some(BookRoute::CookbookPublishing {
                                    section: CookbookPublishingSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![4u32, 9u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Anti-patterns".to_string(),
                                location: Some(BookRoute::CookbookAntipatterns {
                                    section: CookbookAntipatternsSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                        vec![4u32, 10u32],
                                    ),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Error Handling".to_string(),
                                location: Some(BookRoute::CookbookErrorHandling {
                                    section: CookbookErrorHandlingSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                        vec![4u32, 11u32],
                                    ),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Integrations".to_string(),
                                location: Some(BookRoute::CookbookIntegrationsIndex {
                                    section: CookbookIntegrationsIndexSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                        vec![4u32, 12u32],
                                    ),
                                ),
                                nested_items: vec![
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Logging".to_string(),
                                        location: Some(BookRoute::CookbookIntegrationsLogging {
                                            section: CookbookIntegrationsLoggingSection::Empty,
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![4u32, 12u32, 1u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Internationalization".to_string(),
                                        location: Some(BookRoute::CookbookIntegrationsInternationalization {
                                            section: CookbookIntegrationsInternationalizationSection::Empty,
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![4u32, 12u32, 2u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                ],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "State Management".to_string(),
                                location: Some(BookRoute::CookbookStateIndex {
                                    section: CookbookStateIndexSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                        vec![4u32, 13u32],
                                    ),
                                ),
                                nested_items: vec![
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "External State".to_string(),
                                        location: Some(BookRoute::CookbookStateExternalIndex {
                                            section: CookbookStateExternalIndexSection::Empty,
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![4u32, 13u32, 1u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Custom Hooks".to_string(),
                                        location: Some(BookRoute::CookbookStateCustomHooksIndex {
                                            section: CookbookStateCustomHooksIndexSection::Empty,
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![4u32, 13u32, 2u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                ],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Bundle Config".to_string(),
                                location: Some(BookRoute::CookbookBundling {
                                    section: CookbookBundlingSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                        vec![4u32, 14u32],
                                    ),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Testing".to_string(),
                                location: Some(BookRoute::CookbookTesting {
                                    section: CookbookTestingSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                        vec![4u32, 15u32],
                                    ),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Tailwind".to_string(),
                                location: Some(BookRoute::CookbookTailwind {
                                    section: CookbookTailwindSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                        vec![4u32, 16u32],
                                    ),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Optimizing".to_string(),
                                location: Some(BookRoute::CookbookOptimizing {
                                    section: CookbookOptimizingSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                        vec![4u32, 17u32],
                                    ),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Migrating to v0.6".to_string(),
                                location: Some(BookRoute::MigrationIndex {
                                    section: MigrationIndexSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                        vec![4u32, 18u32],
                                    ),
                                ),
                                nested_items: vec![],
                            }),
                        ],
                    }),
                    ::use_mdbook::mdbook_shared::SummaryItem::Separator,
                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                        name: "Reference".to_string(),
                        location: Some(BookRoute::ReferenceIndex {
                            section: ReferenceIndexSection::Empty,
                        }),
                        number: Some(
                            ::use_mdbook::mdbook_shared::SectionNumber(vec![5u32]),
                        ),
                        nested_items: vec![
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Hot-Reload".to_string(),
                                location: Some(BookRoute::ReferenceHotreload {
                                    section: ReferenceHotreloadSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![5u32, 1u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "RSX".to_string(),
                                location: Some(BookRoute::ReferenceRsx {
                                    section: ReferenceRsxSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![5u32, 2u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Components".to_string(),
                                location: Some(BookRoute::ReferenceComponents {
                                    section: ReferenceComponentsSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![5u32, 3u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Props".to_string(),
                                location: Some(BookRoute::ReferenceComponentProps {
                                    section: ReferenceComponentPropsSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![5u32, 4u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Event Handlers".to_string(),
                                location: Some(BookRoute::ReferenceEventHandlers {
                                    section: ReferenceEventHandlersSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![5u32, 5u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Hooks".to_string(),
                                location: Some(BookRoute::ReferenceHooks {
                                    section: ReferenceHooksSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![5u32, 6u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "User Input".to_string(),
                                location: Some(BookRoute::ReferenceUserInput {
                                    section: ReferenceUserInputSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![5u32, 7u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Context".to_string(),
                                location: Some(BookRoute::ReferenceContext {
                                    section: ReferenceContextSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![5u32, 8u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Dynamic Rendering".to_string(),
                                location: Some(BookRoute::ReferenceDynamicRendering {
                                    section: ReferenceDynamicRenderingSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![5u32, 9u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Routing".to_string(),
                                location: Some(BookRoute::ReferenceRouter {
                                    section: ReferenceRouterSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                        vec![5u32, 10u32],
                                    ),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Resource".to_string(),
                                location: Some(BookRoute::ReferenceUseResource {
                                    section: ReferenceUseResourceSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                        vec![5u32, 11u32],
                                    ),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "UseCoroutine".to_string(),
                                location: Some(BookRoute::ReferenceUseCoroutine {
                                    section: ReferenceUseCoroutineSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                        vec![5u32, 12u32],
                                    ),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Spawn".to_string(),
                                location: Some(BookRoute::ReferenceSpawn {
                                    section: ReferenceSpawnSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                        vec![5u32, 13u32],
                                    ),
                                ),
                                nested_items: vec![],
                            }),
                        ],
                    }),
                    ::use_mdbook::mdbook_shared::SummaryItem::Separator,
                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                        name: "Contributing".to_string(),
                        location: Some(BookRoute::ContributingIndex {
                            section: ContributingIndexSection::Empty,
                        }),
                        number: Some(
                            ::use_mdbook::mdbook_shared::SectionNumber(vec![6u32]),
                        ),
                        nested_items: vec![
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Project Structure".to_string(),
                                location: Some(BookRoute::ContributingProjectStructure {
                                    section: ContributingProjectStructureSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![6u32, 1u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Guiding Principles".to_string(),
                                location: Some(BookRoute::ContributingGuidingPrinciples {
                                    section: ContributingGuidingPrinciplesSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![6u32, 2u32]),
                                ),
                                nested_items: vec![],
                            }),
                        ],
                    }),
                    ::use_mdbook::mdbook_shared::SummaryItem::Separator,
                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                        name: "CLI".to_string(),
                        location: Some(BookRoute::CliIndex {
                            section: CliIndexSection::Empty,
                        }),
                        number: Some(
                            ::use_mdbook::mdbook_shared::SectionNumber(vec![7u32]),
                        ),
                        nested_items: vec![
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Create a Project".to_string(),
                                location: Some(BookRoute::CliCreating {
                                    section: CliCreatingSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![7u32, 1u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Configure Project".to_string(),
                                location: Some(BookRoute::CliConfigure {
                                    section: CliConfigureSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![7u32, 2u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Translate HTML".to_string(),
                                location: Some(BookRoute::CliTranslate {
                                    section: CliTranslateSection::Empty,
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![7u32, 3u32]),
                                ),
                                nested_items: vec![],
                            }),
                        ],
                    }),
                ],
                suffix_chapters: vec![],
            },
            pages: pages.into_iter().collect(),
            page_id_mapping,
        }
    });
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum IndexSection {
    #[default]
    Empty,
    Introduction,
    WhatIsDioxus,
    WhyDioxus,
    SyntaxAndEcosystem,
    Stability,
    ExamplesProjectsTutorialsAndMore,
    WhosFundingDioxus,
}
impl std::str::FromStr for IndexSection {
    type Err = IndexSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "introduction" => Ok(Self::Introduction),
            "what-is-dioxus" => Ok(Self::WhatIsDioxus),
            "why-dioxus" => Ok(Self::WhyDioxus),
            "syntax-and-ecosystem" => Ok(Self::SyntaxAndEcosystem),
            "stability" => Ok(Self::Stability),
            "examples-projects-tutorials-and-more" => Ok(Self::ExamplesProjectsTutorialsAndMore),
            "whos-funding-dioxus" => Ok(Self::WhosFundingDioxus),
            _ => Err(IndexSectionParseError),
        }
    }
}
impl std::fmt::Display for IndexSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Introduction => f.write_str("introduction"),
            Self::WhatIsDioxus => f.write_str("what-is-dioxus"),
            Self::WhyDioxus => f.write_str("why-dioxus"),
            Self::SyntaxAndEcosystem => f.write_str("syntax-and-ecosystem"),
            Self::Stability => f.write_str("stability"),
            Self::ExamplesProjectsTutorialsAndMore => {
                f.write_str("examples-projects-tutorials-and-more")
            }
            Self::WhosFundingDioxus => f.write_str("whos-funding-dioxus"),
        }
    }
}
#[derive(Debug)]
pub struct IndexSectionParseError;
impl std::fmt::Display for IndexSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of IndexSectionintroduction, what-is-dioxus, why-dioxus, syntax-and-ecosystem, stability, examples-projects-tutorials-and-more, whos-funding-dioxus",
        )?;
        Ok(())
    }
}
impl std::error::Error for IndexSectionParseError {}
#[component(no_case_check)]
pub fn Index(section: IndexSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "introduction",
            Link {
                to: BookRoute::Index {
                    section: IndexSection::Introduction,
                },
                class: "header",
                "Introduction"
            }
        }
        p {
            "Welcome to the Dioxus documentation! Dioxus is a framework for building cross-platform apps with the Rust programming language. With one codebase, you can build apps that run on web, desktop, and mobile."
        }
        p {
            "Dioxus is designed to be familiar for developers who already know tools like React and Flutter."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        h1 {{ </span><span style=\"color:#ffee99;\">&quot;High-Five counter: {{count}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        button {{ onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">+= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;Up high!&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        button {{ onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">-= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;Down low!&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "readme.rs".to_string(),
        }
        DemoFrame { readme::App {} }
        p { "This guide is split into different sections:" }
        ul {
            li {
                Link {
                    to: BookRoute::GuideIndex {
                        section: GuideIndexSection::Empty,
                    },
                    "Tutorial"
                }
                " walks you through your first Dioxus app."
            }
            li {
                Link {
                    to: BookRoute::EssentialsIndex {
                        section: EssentialsIndexSection::Empty,
                    },
                    "Core Concepts"
                }
                " provides detail on topics like managing state."
            }
            li {
                Link {
                    to: BookRoute::ReferenceIndex {
                        section: ReferenceIndexSection::Empty,
                    },
                    "Guides"
                }
                " provides references for things like assets, routing, testing, and more."
            }
        }
        p {
            "First, try walking through the "
            Link {
                to: BookRoute::GuideIndex {
                    section: GuideIndexSection::Empty,
                },
                "Tutorial"
            }
            " to get familiar with Dioxus. Before embarking on a larger project, we strongly recommend reading the entire "
            Link {
                to: BookRoute::EssentialsIndex {
                    section: EssentialsIndexSection::Empty,
                },
                "Essential Concepts"
            }
            " and glancing through the "
            Link {
                to: BookRoute::GuidesIndex {
                    section: GuidesIndexSection::Empty,
                },
                "Guides Overview"
            }
            "."
        }
        blockquote {
            p {
                "This guide assumes you already know some "
                Link { to: "https://www.rust-lang.org/", "Rust" }
                "! If not, we recommend reading "
                Link { to: "https://doc.rust-lang.org/book/ch01-00-getting-started.html",
                    em { "the book" }
                }
                " to learn Rust first."
            }
        }
        h2 { id: "what-is-dioxus",
            Link {
                to: BookRoute::Index {
                    section: IndexSection::WhatIsDioxus,
                },
                class: "header",
                "What is Dioxus?"
            }
        }
        p {
            "Dioxus is a developer-friendly framework that empowers developers to ship cross-platform apps with one codebase."
        }
        p {
            img {
                src: asset!(
                    "/assets/static/dioxus-architecture-diagram.png", ImageAssetOptions::new()
                    .with_avif()
                ),
                alt: "Multi-platform app architecture diagram",
                title: "",
            }
        }
        p {
            "In many ways, Dioxus is similar to Flutter: we integrate our own build tools, foster an ecosystem, and provide a markup language for declaring UI. In key areas, Dioxus takes a different approach:"
        }
        ul {
            li { "Apps are declared with HTML and CSS instead of custom styling solution" }
            li { "Reactivity is inspired by web frameworks like React and SolidJS" }
            li {
                "Dioxus code runs natively with no virtual machine and enables direct FFI with system APIs"
            }
        }
        p {
            "Our goal is to provide a \"better Flutter\": faster, slimmer, and web-native. You can think of Dioxus is a hybrid of "
            Link { to: "http://flutter.dev", "Flutter" }
            " and "
            Link { to: "http://nextjs.org", "NextJS" }
            ": cross-platform apps with stellar fullstack support. Today, Dioxus apps can only be written in Rust, but we plan to support more languages in the future."
        }
        h2 { id: "why-dioxus",
            Link {
                to: BookRoute::Index {
                    section: IndexSection::WhyDioxus,
                },
                class: "header",
                "Why Dioxus?"
            }
        }
        p {
            "We started Dioxus because we believe the current standard of building apps is too complex. Developers need to learn and install dozens of different tools just to get their app into the world."
        }
        p {
            img {
                src: asset!("/assets/static/dioxus-app-stack.png", ImageAssetOptions::new().with_avif()),
                alt: "App stack",
                title: "",
            }
        }
        p {
            "Our vision for Dioxus is a framework that is fast, flexible, and has a minimal learning curve. We want developers to confidently ship their app from idea to production as fast as possible. We believe that fewer tools and a simpler architecture makes it easier to develop apps. Apps that are easier to build also ship faster and are more likely to succeed."
        }
        h2 { id: "syntax-and-ecosystem",
            Link {
                to: BookRoute::Index {
                    section: IndexSection::SyntaxAndEcosystem,
                },
                class: "header",
                "Syntax and Ecosystem"
            }
        }
        p {
            "The Dioxus syntax is similar to React's JSX markup, borrowing React's component and hooks approach. All components are Rust functions that take  "
            code { "Properties" }
            ", define state with hooks, and return an  "
            code { "Element" }
            ". We only support markup in with the  "
            code { "rsx! {{}}" }
            " markup; this ensures your app is automatically optimized and has stellar devtools support like advanced hot-reloading."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Component</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">name</span><span style=\"color:#f8f8f2;\">: String) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        h1 {{ </span><span style=\"color:#ffee99;\">&quot;Hello, {{name}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        p {{ </span><span style=\"color:#ffee99;\">&quot;Count: {{count}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        p {
            "Dioxus is designed to be easy to extend and fairly thin over system APIs. This means you can easily drop into system APIs when first-party APIs are lacking. When targeting the web, this might mean using "
            Link { to: "http://crates.io/crates/web-sys/",
                code { "web-sys" }
            }
            " and on Android using "
            Link { to: "http://crates.io/crates/jni",
                code { "jni" }
            }
            "."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">PromptModal</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    #[cfg(web)]\n</span><span style=\"color:#f8f8f2;\">    web_sys::call_web_function();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    #[cfg(android)]\n</span><span style=\"color:#f8f8f2;\">    jni_sys::call_android_function();\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "The core Dioxus framework covers a number of utilities that are either challenging to design or integrate the  "
            code { "dx" }
            " tooling:"
        }
        ul {
            li {
                Link {
                    to: BookRoute::RouterIndex {
                        section: RouterIndexSection::Empty,
                    },
                    "App Routing"
                }
            }
            li {
                Link {
                    to: BookRoute::GuidesFullstackServerFunctions {
                        section: GuidesFullstackServerFunctionsSection::Empty,
                    },
                    "Backend integration via server functions"
                }
            }
            li {
                Link {
                    to: BookRoute::GuidesAssets {
                        section: GuidesAssetsSection::Empty,
                    },
                    "Including and optimizing"
                }
                " assets"
            }
            li {
                Link {
                    to: BookRoute::EssentialsStateIndex {
                        section: EssentialsStateIndexSection::Empty,
                    },
                    "State management"
                }
                " (signals-based reactivity)"
            }
            li {
                Link { to: "http://github.com/dioxusLabs/sdk", "SDK" }
                ": 1st-party System integrations"
            }
        }
        h2 { id: "stability",
            Link {
                to: BookRoute::Index {
                    section: IndexSection::Stability,
                },
                class: "header",
                "Stability"
            }
        }
        p { "Dioxus has not reached a \"1.0\" release yet." }
        p {
            "We are currently on version 0.6, which has stabilized a huge number of APIs and drastically improved the developer experience. In version 0.5 we overhauled the state management system and in 0.6 we overhauled tooling."
        }
        p {
            "It's likely that the next few versions of Dioxus (0.7, 0.8) will bring breaking changes to your apps. Fortunately, these planned changes will only affect the syntax of specific APIs and not your apps at large. With every version update, we ship a rather comprehensive migration guide - eg "
            Link {
                to: BookRoute::MigrationIndex {
                    section: MigrationIndexSection::Empty,
                },
                "0.6"
            }
            "."
        }
        h2 { id: "examples-projects-tutorials-and-more",
            Link {
                to: BookRoute::Index {
                    section: IndexSection::ExamplesProjectsTutorialsAndMore,
                },
                class: "header",
                "Examples, projects, tutorials, and more"
            }
        }
        p {
            "The Dioxus ecosystem is growing and so are the number of examples, projects, tutorials, books, and other learning resources."
        }
        p { "We highly recommend a few first-party sources:" }
        ul {
            li {
                "The "
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/examples",
                    "official folder of small examples"
                }
            }
            li {
                "The "
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/example-projects",
                    "official repository of example projects"
                }
            }
            li {
                "The official "
                Link { to: "https://www.youtube.com/@DioxusLabs", "YouTube channel" }
            }
        }
        h2 { id: "whos-funding-dioxus",
            Link {
                to: BookRoute::Index {
                    section: IndexSection::WhosFundingDioxus,
                },
                class: "header",
                "Who's funding Dioxus?"
            }
        }
        p {
            "Dioxus is funded by a mix of corporate sponsorships, enterprise support contracts, "
            Link { to: "https://github.com/sponsors/DioxusLabs#sponsors", "crowd-sourced funding" }
            ", and "
            Link { to: "http://ycombinator.com/companies/dioxus-labs", "venture capital" }
            ". We strive to maintain a healthy mix of funding to balance the various competing visions of the future. We want to provide a \"Flutter but better\" for everyone - not controlled by Apple, Meta, or Google - and we need to make sure Dioxus has a sustainable long-term financial future."
        }
        p {
            "Ultimately, we'd like Dioxus to be self-sustaining. This means that you'll eventually have the option to deploy your production apps with "
            Link { to: "/deploy", "Dioxus Deploy" }
            ". Revenue from "
            em { "Dioxus Deploy" }
            " will in turn fund development on Dioxus itself."
        }
        p {
            "We're committed to keeping Dioxus free and open source forever. You'll never need to pay us to build apps nor will we ever change the license of Dioxus."
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GettingStartedIndexSection {
    #[default]
    Empty,
    GettingStarted,
    PickAnEditor,
    InstallRustAnalyzer,
    InstallRust,
    InstallCargoBinstall,
    InstallTheDioxusCli,
    PlatformSpecificDependencies,
    Macos,
    Windows,
    Linux,
    Wsl,
    Ios,
    Android,
}
impl std::str::FromStr for GettingStartedIndexSection {
    type Err = GettingStartedIndexSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "getting-started" => Ok(Self::GettingStarted),
            "pick-an-editor" => Ok(Self::PickAnEditor),
            "install-rust-analyzer" => Ok(Self::InstallRustAnalyzer),
            "install-rust" => Ok(Self::InstallRust),
            "install-cargo-binstall" => Ok(Self::InstallCargoBinstall),
            "install-the-dioxus-cli" => Ok(Self::InstallTheDioxusCli),
            "platform-specific-dependencies" => Ok(Self::PlatformSpecificDependencies),
            "macos" => Ok(Self::Macos),
            "windows" => Ok(Self::Windows),
            "linux" => Ok(Self::Linux),
            "wsl" => Ok(Self::Wsl),
            "ios" => Ok(Self::Ios),
            "android" => Ok(Self::Android),
            _ => Err(GettingStartedIndexSectionParseError),
        }
    }
}
impl std::fmt::Display for GettingStartedIndexSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::GettingStarted => f.write_str("getting-started"),
            Self::PickAnEditor => f.write_str("pick-an-editor"),
            Self::InstallRustAnalyzer => f.write_str("install-rust-analyzer"),
            Self::InstallRust => f.write_str("install-rust"),
            Self::InstallCargoBinstall => f.write_str("install-cargo-binstall"),
            Self::InstallTheDioxusCli => f.write_str("install-the-dioxus-cli"),
            Self::PlatformSpecificDependencies => f.write_str("platform-specific-dependencies"),
            Self::Macos => f.write_str("macos"),
            Self::Windows => f.write_str("windows"),
            Self::Linux => f.write_str("linux"),
            Self::Wsl => f.write_str("wsl"),
            Self::Ios => f.write_str("ios"),
            Self::Android => f.write_str("android"),
        }
    }
}
#[derive(Debug)]
pub struct GettingStartedIndexSectionParseError;
impl std::fmt::Display for GettingStartedIndexSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GettingStartedIndexSectiongetting-started, pick-an-editor, install-rust-analyzer, install-rust, install-cargo-binstall, install-the-dioxus-cli, platform-specific-dependencies, macos, windows, linux, wsl, ios, android",
        )?;
        Ok(())
    }
}
impl std::error::Error for GettingStartedIndexSectionParseError {}
#[component(no_case_check)]
pub fn GettingStartedIndex(section: GettingStartedIndexSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "getting-started",
            Link {
                to: BookRoute::GettingStartedIndex {
                    section: GettingStartedIndexSection::GettingStarted,
                },
                class: "header",
                "Getting Started"
            }
        }
        p { "Getting started with Dioxus is quick and shouldn't take more than a minute or two." }
        h2 { id: "pick-an-editor",
            Link {
                to: BookRoute::GettingStartedIndex {
                    section: GettingStartedIndexSection::PickAnEditor,
                },
                class: "header",
                "Pick an Editor"
            }
        }
        p { "Pick your favorite editor!" }
        p {
            "We recommend using "
            Link { to: "https://code.visualstudio.com", "VSCode" }
            " since Dioxus ships with its "
            Link { to: "https://marketplace.visualstudio.com/items?itemName=DioxusLabs.dioxus",
                "own VSCode extension"
            }
            "."
        }
        p {
            "Our build tool  "
            code { "dx" }
            " is standalone and works with any editor."
        }
        h2 { id: "install-rust-analyzer",
            Link {
                to: BookRoute::GettingStartedIndex {
                    section: GettingStartedIndexSection::InstallRustAnalyzer,
                },
                class: "header",
                "Install Rust-Analyzer"
            }
        }
        p {
            "Dioxus integrates very well with the "
            Link { to: "https://rust-analyzer.github.io", "Rust-Analyzer LSP plugin" }
            " which provides appropriate syntax highlighting, code navigation, folding, and more."
        }
        p {
            "You can follow the "
            Link { to: "https://rust-analyzer.github.io/manual.html#installation",
                "installation instructions"
            }
            " for your editor of choice."
        }
        ul {
            li {
                Link { to: "https://rust-analyzer.github.io/manual.html#vs-code", "VSCode" }
            }
            li {
                Link { to: "https://rust-analyzer.github.io/manual.html#zed", "Zed" }
            }
            li {
                Link { to: "https://rust-analyzer.github.io/manual.html#emacs", "Emacs" }
            }
            li {
                Link { to: "https://rust-analyzer.github.io/manual.html#vimneovim", "Vim" }
            }
        }
        h2 { id: "install-rust",
            Link {
                to: BookRoute::GettingStartedIndex {
                    section: GettingStartedIndexSection::InstallRust,
                },
                class: "header",
                "Install Rust"
            }
        }
        p {
            "Head over to "
            Link { to: "http://rust-lang.org", "https://rust-lang.org" }
            " and install the Rust compiler."
        }
        p {
            "We strongly recommend going through the "
            Link { to: "https://doc.rust-lang.org/book/ch01-00-getting-started.html",
                "official Rust book"
            }
            " "
            em { "completely" }
            ". However, we hope that a Dioxus app can serve as a great first Rust project."
        }
        p {
            "We've put a lot of care into making Dioxus syntax familiar and easy to understand, so you won't need deep knowledge of async, lifetimes, or smart pointers until you start building complex Dioxus apps."
        }
        h2 { id: "install-cargo-binstall",
            Link {
                to: BookRoute::GettingStartedIndex {
                    section: GettingStartedIndexSection::InstallCargoBinstall,
                },
                class: "header",
                "Install cargo-binstall"
            }
        }
        p {
            "Dioxus ships prebuilt binaries for its CLI using "
            Link { to: "https://github.com/cargo-bins/cargo-binstall?tab=readme-ov-file#installation",
                code { "cargo-binstall" }
            }
            ". This means you can install "
            code { "dx" }
            " without needing to compile from source."
        }
        p {
            "You can install  "
            code { "cargo-binstall" }
            " with the following command:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">curl </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">L </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">proto </span><span style=\"color:#f92672;\">&#39;=</span><span style=\"color:#f8f8f2;\">https</span><span style=\"color:#f92672;\">&#39; --</span><span style=\"color:#f8f8f2;\">tlsv1.</span><span style=\"color:#ff80f4;\">2 </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">sSf https:</span><span style=\"color:#8c8c8c;\">//raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash</span></pre>\n" }
        p { "or alternatively:" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> through brew\n</span><span style=\"color:#f8f8f2;\">brew install cargo</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">binstall\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> or from source\n</span><span style=\"color:#f8f8f2;\">cargo install cargo</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">binstall</span></pre>\n" }
        h2 { id: "install-the-dioxus-cli",
            Link {
                to: BookRoute::GettingStartedIndex {
                    section: GettingStartedIndexSection::InstallTheDioxusCli,
                },
                class: "header",
                "Install the Dioxus CLI"
            }
        }
        p { "Dioxus is comprised of two parts:" }
        ul {
            li {
                "The "
                code { "dioxus" }
                " crate: the core Dioxus framework"
            }
            li {
                "The "
                code { "dx" }
                " tool: a CLI tool for building Dioxus apps"
            }
        }
        p {
            "If you want to build web or mobile apps with Dioxus, or benefit from features like hot-reloading and bundling, you'll need to install the  "
            code { "dx" }
            " tool. You can download the prebuilt binary with the following command:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">cargo binstall dioxus</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">cli</span></pre>\n" }
        p { "If you want to build the CLI from source, you can install it with the following command:" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">cargo install dioxus</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">cli</span></pre>\n" }
        blockquote {
            p {
                "📣 Installing from source will take several minutes. We strongly recommend using  "
                code { "cargo-binstall" }
                " for installation."
            }
        }
        p {
            "If you get an OpenSSL error on installation, ensure the dependencies listed "
            Link { to: "https://docs.rs/openssl/latest/openssl/#automatic", "here" }
            " are installed."
        }
        h2 { id: "platform-specific-dependencies",
            Link {
                to: BookRoute::GettingStartedIndex {
                    section: GettingStartedIndexSection::PlatformSpecificDependencies,
                },
                class: "header",
                "Platform-specific dependencies"
            }
        }
        p {
            "Most platforms don't require any additional dependencies, but if you are targeting desktop, you can install the following dependencies."
        }
        h3 { id: "macos",
            Link {
                to: BookRoute::GettingStartedIndex {
                    section: GettingStartedIndexSection::Macos,
                },
                class: "header",
                "macOS"
            }
        }
        p {
            "There are no extra dependencies for macOS! However, if you want to build iOS apps, read the "
            Link {
                to: BookRoute::GettingStartedIndex {
                    section: GettingStartedIndexSection::Ios,
                },
                "iOS section"
            }
            " below."
        }
        h3 { id: "windows",
            Link {
                to: BookRoute::GettingStartedIndex {
                    section: GettingStartedIndexSection::Windows,
                },
                class: "header",
                "Windows"
            }
        }
        p {
            "Windows apps depend on WebView2 – a library that should be installed in all modern Windows distributions."
        }
        p {
            "If you have Edge installed, then Dioxus will work fine. If you "
            em { "don't" }
            " have WebView2, then you can "
            Link { to: "https://developer.microsoft.com/en-us/microsoft-edge/webview2/",
                "install it through Microsoft"
            }
            ". Microsoft provides 3 options:"
        }
        ol {
            li {
                "A tiny \"evergreen\" "
                em { "bootstrapper" }
                " that fetches an installer from Microsoft's CDN."
            }
            li {
                "A tiny "
                em { "installer" }
                " that fetches WebView2 from Microsoft's CDN."
            }
            li { "A statically linked version of WebView2 in your final binary for offline users." }
        }
        p { "We recommend using Option 1." }
        h3 { id: "linux",
            Link {
                to: BookRoute::GettingStartedIndex {
                    section: GettingStartedIndexSection::Linux,
                },
                class: "header",
                "Linux"
            }
        }
        p {
            "WebView Linux apps require WebkitGtk and xdotool. When distributing, these should be part of your dependency tree in your  "
            code { ".rpm" }
            " or  "
            code { ".deb" }
            "."
        }
        p { "If you run into issues, make sure you have all the basics installed." }
        p { "For Ubuntu, make sure everything is installed:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">sudo apt update\n</span><span style=\"color:#f8f8f2;\">sudo apt install libwebkit2gtk</span><span style=\"color:#f92672;\">-</span><span style=\"color:#ff80f4;\">4.1</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">dev \\\n</span><span style=\"color:#f8f8f2;\">  build</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">essential \\\n</span><span style=\"color:#f8f8f2;\">  curl \\\n</span><span style=\"color:#f8f8f2;\">  wget \\\n</span><span style=\"color:#f8f8f2;\">  file \\\n</span><span style=\"color:#f8f8f2;\">  libxdo</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">dev \\\n</span><span style=\"color:#f8f8f2;\">  libssl</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">dev \\\n</span><span style=\"color:#f8f8f2;\">  libayatana</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">appindicator3</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">dev \\\n</span><span style=\"color:#f8f8f2;\">  librsvg2</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">dev</span></pre>\n",
        }
        p { "For arch:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">sudo pacman </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">Syu\n</span><span style=\"color:#f8f8f2;\">sudo pacman </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">S </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">needed \\\n</span><span style=\"color:#f8f8f2;\">  webkit2gtk</span><span style=\"color:#f92672;\">-</span><span style=\"color:#ff80f4;\">4.1</span><span style=\"color:#f8f8f2;\"> \\\n</span><span style=\"color:#f8f8f2;\">  base</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">devel \\\n</span><span style=\"color:#f8f8f2;\">  curl \\\n</span><span style=\"color:#f8f8f2;\">  wget \\\n</span><span style=\"color:#f8f8f2;\">  file \\\n</span><span style=\"color:#f8f8f2;\">  openssl \\\n</span><span style=\"color:#f8f8f2;\">  appmenu</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">gtk</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">module \\\n</span><span style=\"color:#f8f8f2;\">  libappindicator</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">gtk3 \\\n</span><span style=\"color:#f8f8f2;\">  librsvg \\\n</span><span style=\"color:#f8f8f2;\">  xdotool</span></pre>\n",
        }
        p {
            "For all other Linux targets, "
            Link { to: "https://tauri.app/start/prerequisites/#linux",
                "check the Tauri docs which cover the same dependencies"
            }
            "."
        }
        p { "In addition to the Tauri docs, for Fedora:" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">sudo dnf install libxdo</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">devel</span></pre>\n" }
        h3 { id: "wsl",
            Link {
                to: BookRoute::GettingStartedIndex {
                    section: GettingStartedIndexSection::Wsl,
                },
                class: "header",
                "WSL"
            }
        }
        p {
            "While doable, it can be tricky to setup development in WSL for Dioxus desktop. Not everything has been figured out and some stuff may not work."
        }
        p { "Here are the steps we used to get Dioxus running through WSL:" }
        ol {
            li { "Update your kernel to the latest version and update WSL to version 2." }
            li {
                "Add "
                code { "export DISPLAY=:0" }
                " to "
                code { "~/.zshrc" }
            }
            li {
                "Install Tauri's Linux dependencies found "
                Link { to: "https://beta.tauri.app/start/prerequisites/", "here" }
                "."
            }
            li {
                "For file dialogs to work, you need to install a fallback like "
                code { "zenity" }
            }
        }
        p {
            "When running Dioxus desktop on WSL, you may get warnings from  "
            code { "libEGL" }
            ". There is currently no way to silence these, but the app should still render."
        }
        h3 { id: "ios",
            Link {
                to: BookRoute::GettingStartedIndex {
                    section: GettingStartedIndexSection::Ios,
                },
                class: "header",
                "iOS"
            }
        }
        p { "Building iOS apps requires a device running macOS with XCode installed." }
        p { "Download and install XCode from one of the following places:" }
        ul {
            li {
                Link { to: "https://apps.apple.com/gb/app/xcode/id497799835?mt=12", "Mac App Store" }
            }
            li {
                Link { to: "https://developer.apple.com/xcode/resources/", "Apple Developer website" }
            }
        }
        p { "You will need to download the iOS SDK and install some simulators." }
        p {
            "For more details, we recommend reading the "
            Link {
                to: BookRoute::GuidesMobileIndex {
                    section: GuidesMobileIndexSection::Empty,
                },
                "dedicated guide for iOS development"
            }
            "."
        }
        h3 { id: "android",
            Link {
                to: BookRoute::GettingStartedIndex {
                    section: GettingStartedIndexSection::Android,
                },
                class: "header",
                "Android"
            }
        }
        p {
            "Android apps require the Android SDK and NDK to be installed. This can be a substantial amount of setup, so we recommend reading the "
            Link {
                to: BookRoute::GuidesMobileIndex {
                    section: GuidesMobileIndexSection::Empty,
                },
                "dedicated guide for Android development"
            }
            "."
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuideIndexSection {
    #[default]
    Empty,
    DioxusTutorial,
    WhatWillWeBeLearning,
    WhatAreWeBuilding,
}
impl std::str::FromStr for GuideIndexSection {
    type Err = GuideIndexSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "dioxus-tutorial" => Ok(Self::DioxusTutorial),
            "what-will-we-be-learning" => Ok(Self::WhatWillWeBeLearning),
            "what-are-we-building" => Ok(Self::WhatAreWeBuilding),
            _ => Err(GuideIndexSectionParseError),
        }
    }
}
impl std::fmt::Display for GuideIndexSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::DioxusTutorial => f.write_str("dioxus-tutorial"),
            Self::WhatWillWeBeLearning => f.write_str("what-will-we-be-learning"),
            Self::WhatAreWeBuilding => f.write_str("what-are-we-building"),
        }
    }
}
#[derive(Debug)]
pub struct GuideIndexSectionParseError;
impl std::fmt::Display for GuideIndexSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuideIndexSectiondioxus-tutorial, what-will-we-be-learning, what-are-we-building",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuideIndexSectionParseError {}
#[component(no_case_check)]
pub fn GuideIndex(section: GuideIndexSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "dioxus-tutorial",
            Link {
                to: BookRoute::GuideIndex {
                    section: GuideIndexSection::DioxusTutorial,
                },
                class: "header",
                "Dioxus Tutorial"
            }
        }
        p {
            "In this tutorial, we'll be building a small app called: "
            em { "HotDog" }
            " - basically Tinder, but for dogs! This app will serve as a great way to learn about building UIs, adding state, and deploying."
        }
        p {
            "By the end of this tutorial, you will launch your very own web, desktop, and mobile apps and a backend deployed to "
            Link { to: "http://fly.io", "Fly.io" }
            "."
        }
        p {
            img {
                src: asset!("/assets/06_docs/dog_app_styled.png", ImageAssetOptions::new().with_avif()),
                alt: "Photo of HotDog",
                title: "",
            }
        }
        p {
            "We will primarily focus on the higher-level concepts of Dioxus without diving deep into the details of specific APIs. We recommend experimenting with the APIs yourself or reading the "
            Link {
                to: BookRoute::EssentialsIndex {
                    section: EssentialsIndexSection::Empty,
                },
                "Core Concepts"
            }
            " and specific "
            Link {
                to: BookRoute::GuidesIndex {
                    section: GuidesIndexSection::Empty,
                },
                "Guides"
            }
            " for more information."
        }
        h2 { id: "what-will-we-be-learning",
            Link {
                to: BookRoute::GuideIndex {
                    section: GuideIndexSection::WhatWillWeBeLearning,
                },
                class: "header",
                "What will we be learning?"
            }
        }
        p { "This guide will cover the \"core\" Dioxus features including:" }
        ul {
            li {
                Link {
                    to: BookRoute::GuideTooling {
                        section: GuideToolingSection::Empty,
                    },
                    "Tooling Setup"
                }
            }
            li {
                Link {
                    to: BookRoute::GuideNewApp {
                        section: GuideNewAppSection::Empty,
                    },
                    "Creating a new app"
                }
            }
            li {
                Link {
                    to: BookRoute::GuideComponent {
                        section: GuideComponentSection::Empty,
                    },
                    "How Components Work"
                }
            }
            li {
                Link {
                    to: BookRoute::GuideRsx {
                        section: GuideRsxSection::Empty,
                    },
                    "Creating UI with RSX"
                }
            }
            li {
                Link {
                    to: BookRoute::GuideAssets {
                        section: GuideAssetsSection::Empty,
                    },
                    "Styling and Assets"
                }
            }
            li {
                Link {
                    to: BookRoute::GuideState {
                        section: GuideStateSection::Empty,
                    },
                    "Adding State"
                }
            }
            li {
                Link {
                    to: BookRoute::GuideDataFetching {
                        section: GuideDataFetchingSection::Empty,
                    },
                    "Fetching Data"
                }
            }
            li {
                Link {
                    to: BookRoute::GuideBackend {
                        section: GuideBackendSection::Empty,
                    },
                    "Adding a Backend"
                }
            }
            li {
                Link {
                    to: BookRoute::GuideDatabases {
                        section: GuideDatabasesSection::Empty,
                    },
                    "Integrating a Database"
                }
            }
            li {
                Link {
                    to: BookRoute::GuideRouting {
                        section: GuideRoutingSection::Empty,
                    },
                    "App Routing"
                }
            }
            li {
                Link {
                    to: BookRoute::GuideBundle {
                        section: GuideBundleSection::Empty,
                    },
                    "Bundling"
                }
            }
            li {
                Link {
                    to: BookRoute::GuideDeploy {
                        section: GuideDeploySection::Empty,
                    },
                    "Deployment"
                }
            }
            li {
                Link {
                    to: BookRoute::GuideNextSteps {
                        section: GuideNextStepsSection::Empty,
                    },
                    "Next Steps"
                }
            }
        }
        p {
            "Dioxus is a very full-featured framework, so we encourage you to follow up this tutorial by building your own larger apps."
        }
        h2 { id: "what-are-we-building",
            Link {
                to: BookRoute::GuideIndex {
                    section: GuideIndexSection::WhatAreWeBuilding,
                },
                class: "header",
                "What are we building?"
            }
        }
        p {
            "The features of "
            em { "HotDog" }
            " are fairly simple:"
        }
        ul {
            li { "Engage with a stream of cute dog photos" }
            li { "Swipe right if we want to save the dog photo to our collection" }
            li { "Swipe left if we don't want to save the dog photo" }
            li { "View the dog photos we saved later" }
        }
        p {
            "At the end of the tutorial, you'll have your very own "
            em { "HotDog" }
            " app to remix and download to your device."
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuideToolingSection {
    #[default]
    Empty,
    SettingUpTooling,
    Checklist,
    VerifyYourSetup,
    AllTheCommands,
}
impl std::str::FromStr for GuideToolingSection {
    type Err = GuideToolingSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "setting-up-tooling" => Ok(Self::SettingUpTooling),
            "checklist" => Ok(Self::Checklist),
            "verify-your-setup" => Ok(Self::VerifyYourSetup),
            "all-the-commands" => Ok(Self::AllTheCommands),
            _ => Err(GuideToolingSectionParseError),
        }
    }
}
impl std::fmt::Display for GuideToolingSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::SettingUpTooling => f.write_str("setting-up-tooling"),
            Self::Checklist => f.write_str("checklist"),
            Self::VerifyYourSetup => f.write_str("verify-your-setup"),
            Self::AllTheCommands => f.write_str("all-the-commands"),
        }
    }
}
#[derive(Debug)]
pub struct GuideToolingSectionParseError;
impl std::fmt::Display for GuideToolingSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuideToolingSectionsetting-up-tooling, checklist, verify-your-setup, all-the-commands",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuideToolingSectionParseError {}
#[component(no_case_check)]
pub fn GuideTooling(section: GuideToolingSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "setting-up-tooling",
            Link {
                to: BookRoute::GuideTooling {
                    section: GuideToolingSection::SettingUpTooling,
                },
                class: "header",
                "Setting up Tooling"
            }
        }
        p {
            "Before we get started, make sure you've followed the "
            Link {
                to: BookRoute::GettingStartedIndex {
                    section: GettingStartedIndexSection::Empty,
                },
                "Getting Started"
            }
            " page on installing the required dependencies."
        }
        p {
            "We will be primarily developing "
            em { "HotDog" }
            " as web application, but we still recommend setting up the relevant tooling for desktop and mobile development as well."
        }
        h2 { id: "checklist",
            Link {
                to: BookRoute::GuideTooling {
                    section: GuideToolingSection::Checklist,
                },
                class: "header",
                "Checklist"
            }
        }
        p {
            "We covered the setup instructions in "
            Link {
                to: BookRoute::GettingStartedIndex {
                    section: GettingStartedIndexSection::Empty,
                },
                "Getting Started"
            }
            ", but first you should verify everything is set up properly:"
        }
        ul {
            li { "Rust is installed" }
            li { "You have a code editor installed" }
            li { "The wasm32-unknown-unknown Rust toolchain is installed" }
            li {
                "The "
                code { "dioxus-cli" }
                " is installed and up-to-date"
            }
            li { "System-specific dependencies are installed" }
        }
        h2 { id: "verify-your-setup",
            Link {
                to: BookRoute::GuideTooling {
                    section: GuideToolingSection::VerifyYourSetup,
                },
                class: "header",
                "Verify your setup"
            }
        }
        p {
            "Before proceeding, make sure you have the  "
            code { "dioxus-cli" }
            " installed and up-to-date."
        }
        p { "Verify the returned version matches this guide (eg 0.6) by running:" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">dx </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">version</span></pre>\n" }
        h2 { id: "all-the-commands",
            Link {
                to: BookRoute::GuideTooling {
                    section: GuideToolingSection::AllTheCommands,
                },
                class: "header",
                "All the Commands"
            }
        }
        p {
            "You can also run  "
            code { "dx help" }
            " which will give you a list of useful commands and some information on how to use  "
            code { "dx" }
            "."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">Build, Bundle </span><span style=\"color:#f92672;\">&amp;</span><span style=\"color:#f8f8f2;\"> Ship Dioxus Apps\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">Usage: dx [</span><span style=\"color:#ff80f4;\">OPTIONS</span><span style=\"color:#f8f8f2;\">] </span><span style=\"color:#f92672;\">&lt;</span><span style=\"color:#ff80f4;\">COMMAND</span><span style=\"color:#f92672;\">&gt;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">Commands:\n</span><span style=\"color:#f8f8f2;\">  build      Build the Dioxus project and all of its assets\n</span><span style=\"color:#f8f8f2;\">  translate  Translate a source file into Dioxus code\n</span><span style=\"color:#f8f8f2;\">  serve      Build, watch </span><span style=\"color:#f92672;\">&amp;</span><span style=\"color:#f8f8f2;\"> serve the Dioxus project and all of its assets\n</span><span style=\"color:#f8f8f2;\">  new        Create a new project </span><span style=\"color:#f92672;\">for</span><span style=\"color:#f8f8f2;\"> Dioxus\n</span><span style=\"color:#f8f8f2;\">  init       Init a new project </span><span style=\"color:#f92672;\">for</span><span style=\"color:#f8f8f2;\"> Dioxus </span><span style=\"color:#f92672;\">in</span><span style=\"color:#f8f8f2;\"> the current directory (by default). Will attempt to keep your project </span><span style=\"color:#f92672;\">in</span><span style=\"color:#f8f8f2;\"> a good state\n</span><span style=\"color:#f8f8f2;\">  clean      Clean output artifacts\n</span><span style=\"color:#f8f8f2;\">  bundle     Bundle the Dioxus app into a shippable object\n</span><span style=\"color:#f8f8f2;\">  fmt        Automatically format </span><span style=\"color:#ff80f4;\">RSX\n</span><span style=\"color:#f8f8f2;\">  check      Check the project </span><span style=\"color:#f92672;\">for</span><span style=\"color:#f8f8f2;\"> any issues\n</span><span style=\"color:#f8f8f2;\">  run        Run the project without any hotreloading\n</span><span style=\"color:#f8f8f2;\">  doctor     Ensure all the tooling is installed and configured correctly\n</span><span style=\"color:#f8f8f2;\">  config     Dioxus config file controls\n</span><span style=\"color:#f8f8f2;\">  help       Print this message or the help of the given </span><span style=\"color:#66d9ef;\">subcommand</span><span style=\"color:#f8f8f2;\">(s)\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">Options:\n</span><span style=\"color:#f8f8f2;\">      </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">verbose      Use verbose output [default: </span><span style=\"color:#ff80f4;\">false</span><span style=\"color:#f8f8f2;\">]\n</span><span style=\"color:#f8f8f2;\">      </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">trace        Use trace output [default: </span><span style=\"color:#ff80f4;\">false</span><span style=\"color:#f8f8f2;\">]\n</span><span style=\"color:#f8f8f2;\">      </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">json</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">output  Output logs </span><span style=\"color:#f92672;\">in </span><span style=\"color:#ff80f4;\">JSON</span><span style=\"color:#f8f8f2;\"> format\n</span><span style=\"color:#f8f8f2;\">  </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">h, </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">help         Print help\n</span><span style=\"color:#f8f8f2;\">  </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">V, </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">version      Print version</span></pre>\n",
        }
        p {
            "If  "
            code { "dx" }
            " is installed properly, then you're ready to proceed!"
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuideNewAppSection {
    #[default]
    Empty,
    CreateANewProject,
    RunningTheProject,
    StructureOfTheApp,
    TheCargotoml,
    Dioxustoml,
    AssetsFolder,
    Mainrs,
    ResettingToBasics,
}
impl std::str::FromStr for GuideNewAppSection {
    type Err = GuideNewAppSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "create-a-new-project" => Ok(Self::CreateANewProject),
            "running-the-project" => Ok(Self::RunningTheProject),
            "structure-of-the-app" => Ok(Self::StructureOfTheApp),
            "the-cargotoml" => Ok(Self::TheCargotoml),
            "dioxustoml" => Ok(Self::Dioxustoml),
            "assets-folder" => Ok(Self::AssetsFolder),
            "mainrs" => Ok(Self::Mainrs),
            "resetting-to-basics" => Ok(Self::ResettingToBasics),
            _ => Err(GuideNewAppSectionParseError),
        }
    }
}
impl std::fmt::Display for GuideNewAppSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::CreateANewProject => f.write_str("create-a-new-project"),
            Self::RunningTheProject => f.write_str("running-the-project"),
            Self::StructureOfTheApp => f.write_str("structure-of-the-app"),
            Self::TheCargotoml => f.write_str("the-cargotoml"),
            Self::Dioxustoml => f.write_str("dioxustoml"),
            Self::AssetsFolder => f.write_str("assets-folder"),
            Self::Mainrs => f.write_str("mainrs"),
            Self::ResettingToBasics => f.write_str("resetting-to-basics"),
        }
    }
}
#[derive(Debug)]
pub struct GuideNewAppSectionParseError;
impl std::fmt::Display for GuideNewAppSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuideNewAppSectioncreate-a-new-project, running-the-project, structure-of-the-app, the-cargotoml, dioxustoml, assets-folder, mainrs, resetting-to-basics",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuideNewAppSectionParseError {}
#[component(no_case_check)]
pub fn GuideNewApp(section: GuideNewAppSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h2 { id: "create-a-new-project",
            Link {
                to: BookRoute::GuideNewApp {
                    section: GuideNewAppSection::CreateANewProject,
                },
                class: "header",
                "Create a new project"
            }
        }
        p { "Let's get to work!" }
        p {
            "You can create a new Dioxus project by running the following command and following the prompts:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">dx new hot_dog</span></pre>\n" }
        p {
            video {
                src: asset!("/assets/06_docs/dx_new_06.mp4"),
                alt: "dxnew",
                title: "",
                autoplay: true,
                muted: true,
                r#loop: true,
                playsinline: true,
                preload: "metadata",
            }
        }
        p { "You'll need to select a template to use to get started." }
        ul {
            li {
                "Bare-bones: a very simple setup with just a "
                code { "main.rs" }
                " an and "
                code { "assets" }
                " folder."
            }
            li { "Jumpstart: a scaffolded app with components, views, and suggested structure." }
            li { "Workspace: a full cargo workspace setup with different crates per platform." }
        }
        p {
            "We're going to use the bare-bones template for "
            em { "HotDog" }
            ". Our app won't be too complex and can fit in one file."
        }
        ul {
            li { "Select \"false\" when asked if you want to create a fullstack website." }
            li {
                "Select \"false\" for the router, though we "
                em { "will" }
                " eventually add the router to the app."
            }
            li {
                "Select no for TailwindCSS. If you want to use Tailwind, make sure to read the "
                Link {
                    to: BookRoute::CookbookTailwind {
                        section: CookbookTailwindSection::Empty,
                    },
                    "TailwindCSS guide"
                }
                "."
            }
            li { "Select \"Web\" as the default platform." }
        }
        blockquote {
            p {
                "📣 You don't need  "
                code { "dx new" }
                " to create new Dioxus apps! Dioxus apps are Rust projects and can also be built with tools like cargo."
            }
        }
        h2 { id: "running-the-project",
            Link {
                to: BookRoute::GuideNewApp {
                    section: GuideNewAppSection::RunningTheProject,
                },
                class: "header",
                "Running the project"
            }
        }
        p { "Once the project is generated, you can start it with the following command:" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">cd hot_dog\n</span><span style=\"color:#f8f8f2;\">dx serve</span></pre>\n" }
        p {
            video {
                src: asset!("/assets/06_docs/dx_serve_06.mp4"),
                alt: "Serve",
                title: "",
                autoplay: true,
                muted: true,
                r#loop: true,
                playsinline: true,
                preload: "metadata",
            }
        }
        p {
            "This will start the cargo build and launch a web server to serve your app. If you visit the \"serve\" address (in this case,  "
            code { "http://127.0.0.1:8080" }
            "), then you'll receive a loading screen in your browser:"
        }
        p {
            img {
                src: asset!("/assets/06_docs/hotdog_loading.png", ImageAssetOptions::new().with_avif()),
                alt: "loading",
                title: "",
            }
        }
        p { "Once the app is loaded, you should be greeted with the default Dioxus template app:" }
        p {
            img {
                src: asset!(
                    "/assets/06_docs/default_dioxus_app.png", ImageAssetOptions::new().with_avif()
                ),
                alt: "app",
                title: "",
            }
        }
        p { "Congrats! You have your very first Dioxus app." }
        h2 { id: "structure-of-the-app",
            Link {
                to: BookRoute::GuideNewApp {
                    section: GuideNewAppSection::StructureOfTheApp,
                },
                class: "header",
                "Structure of the app"
            }
        }
        p { "Open the app in your editor and take a look at its structure:" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">├── Cargo.lock\n</span><span style=\"color:#f8f8f2;\">├── Cargo.toml\n</span><span style=\"color:#f8f8f2;\">├── Dioxus.toml\n</span><span style=\"color:#f8f8f2;\">├── </span><span style=\"color:#ff80f4;\">README</span><span style=\"color:#f8f8f2;\">.md\n</span><span style=\"color:#f8f8f2;\">├── assets\n</span><span style=\"color:#f8f8f2;\">│\u{a0}\u{a0} ├── favicon.ico\n</span><span style=\"color:#f8f8f2;\">│\u{a0}\u{a0} ├── header.svg\n</span><span style=\"color:#f8f8f2;\">│\u{a0}\u{a0} └── main.css\n</span><span style=\"color:#f8f8f2;\">└── src\n</span><span style=\"color:#f8f8f2;\">    └── main.rs</span></pre>\n" }
        p {
            "All Rust apps are comprised of a root  "
            code { "Cargo.toml" }
            " with a  "
            code { "main.rs" }
            " file located in the  "
            code { "src" }
            " folder. Our CLI  "
            code { "dx" }
            " pre-filled these files with the  "
            code { "dioxus" }
            " dependency and some starter code for us to get building quickly."
        }
        p {
            "Assets in Dioxus can be placed anywhere in the project, but we suggest leaving them in the  "
            code { "assets" }
            " folder."
        }
        h2 { id: "the-cargotoml",
            Link {
                to: BookRoute::GuideNewApp {
                    section: GuideNewAppSection::TheCargotoml,
                },
                class: "header",
                "The Cargo.toml"
            }
        }
        p {
            "The  "
            code { "Cargo.toml" }
            " outlines the dependencies to our app and specifies compiler settings. All Rust apps are "
            em { "compiled" }
            ": we execute the Rust tool "
            code { "cargo" }
            " which aggregates our "
            code { ".rs" }
            " files together and generates a final binary executable (like a "
            code { ".exe" }
            ") that runs our app."
        }
        p {
            "All Dioxus apps will include  "
            code { "dioxus" }
            " as a dependency:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[dependencies]\n</span><span style=\"color:#f8f8f2;\">dioxus </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">{{ version </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;0.6.0&quot; </span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "The prebuilt Dioxus templates initialize different cargo features for your app.  "
            code { "dx" }
            " will use these to decide which cargo features to enable when you specify the  "
            code { "--platform" }
            " feature. For example, if you use  "
            code { "dx serve --platform desktop" }
            " to build your app for desktop,  "
            code { "dx" }
            " will call  "
            code { "cargo build --no-default-features --features desktop" }
            "."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[features]\n</span><span style=\"color:#f8f8f2;\">default </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;web&quot;</span><span style=\"color:#f8f8f2;\">]\n</span><span style=\"color:#f8f8f2;\">web </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;dioxus/web&quot;</span><span style=\"color:#f8f8f2;\">]\n</span><span style=\"color:#f8f8f2;\">desktop </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;dioxus/desktop&quot;</span><span style=\"color:#f8f8f2;\">]\n</span><span style=\"color:#f8f8f2;\">mobile </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;dioxus/mobile&quot;</span><span style=\"color:#f8f8f2;\">]</span></pre>\n",
        }
        p {
            "Starting with Dioxus 0.6,  "
            code { "dx" }
            " will also initialize separate "
            Link { to: "https://doc.rust-lang.org/cargo/reference/profiles.html", "Cargo profiles" }
            " for your app. These profiles let you customize the optimization level of each platform. "
            code { "dx" }
            " also uses these platforms as a mechanism of isolating builds from each other."
        }
        h2 { id: "dioxustoml",
            Link {
                to: BookRoute::GuideNewApp {
                    section: GuideNewAppSection::Dioxustoml,
                },
                class: "header",
                "Dioxus.toml"
            }
        }
        p {
            "The  "
            code { "Dioxus.toml" }
            " file contains Dioxus-specific configuration for stages like bundling and deploying. Before Dioxus 0.5, we used the  "
            code { "Dioxus.toml" }
            " to specify asset inclusion and hot-reload watch paths, but as of Dioxus 0.6, these fields are deprecated and replaced by standards like  "
            code { "asset!()" }
            " and  "
            code { ".gitignore" }
            "."
        }
        p {
            "We won't need to configure the  "
            code { "Dioxus.toml" }
            " for our app just yet."
        }
        h2 { id: "assets-folder",
            Link {
                to: BookRoute::GuideNewApp {
                    section: GuideNewAppSection::AssetsFolder,
                },
                class: "header",
                "Assets Folder"
            }
        }
        p {
            "To include assets in your Dioxus app, you'll want to use the  "
            code { "asset!()" }
            " macro that we'll cover later in the "
            Link {
                to: BookRoute::GuideAssets {
                    section: GuideAssetsSection::Empty,
                },
                "Styling and Assets"
            }
            " chapter. You can include assets from anywhere within your app's file tree, but we recommend using the pregenerated "
            code { "assets" }
            " folder."
        }
        h2 { id: "mainrs",
            Link {
                to: BookRoute::GuideNewApp {
                    section: GuideNewAppSection::Mainrs,
                },
                class: "header",
                "main.rs"
            }
        }
        p {
            "Finally, the  "
            code { "main.rs" }
            ". The  "
            code { "main.rs" }
            " file is the entrypoint of our app, containing the  "
            code { "fn main" }
            " function. All Rust executables start their life at  "
            code { "main" }
            "."
        }
        p {
            "The  "
            code { "main" }
            " of our HotDog app looks like this:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">main</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    dioxus::launch(App);\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "The  "
            code { "launch" }
            " function calls the platform-specific  "
            code { "launch" }
            " function depending on which feature (web/desktop/mobile) is enabled on  "
            code { "dioxus" }
            ".  "
            code { "launch" }
            " accepts a root component, typically called  "
            code { "App" }
            "."
        }
        p {
            "We'll cover components more in-depth in the "
            Link {
                to: BookRoute::GuideComponent {
                    section: GuideComponentSection::Empty,
                },
                "next chapter"
            }
            "."
        }
        h2 { id: "resetting-to-basics",
            Link {
                to: BookRoute::GuideNewApp {
                    section: GuideNewAppSection::ResettingToBasics,
                },
                class: "header",
                "Resetting to Basics"
            }
        }
        p {
            "The bare-bones template provides basic starter code for our app. However, we want to start "
            em { "truly" }
            " from scratch, so we'll wipe away the "
            code { "Hero" }
            " component and empty the "
            code { "App" }
            " component to its basics:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">main</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    dioxus::launch(App);\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{ </span><span style=\"color:#ffee99;\">&quot;HotDog!&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuideComponentSection {
    #[default]
    Empty,
    YourFirstComponent,
    WhatIsAComponent,
    ComponentProperties,
    PropertiesAreImmutable,
    ComponentFunctionsAreCalledMultipleTimes,
    ComposingComponents,
}
impl std::str::FromStr for GuideComponentSection {
    type Err = GuideComponentSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "your-first-component" => Ok(Self::YourFirstComponent),
            "what-is-a-component" => Ok(Self::WhatIsAComponent),
            "component-properties" => Ok(Self::ComponentProperties),
            "properties-are-immutable" => Ok(Self::PropertiesAreImmutable),
            "component-functions-are-called-multiple-times" => {
                Ok(Self::ComponentFunctionsAreCalledMultipleTimes)
            }
            "composing-components" => Ok(Self::ComposingComponents),
            _ => Err(GuideComponentSectionParseError),
        }
    }
}
impl std::fmt::Display for GuideComponentSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::YourFirstComponent => f.write_str("your-first-component"),
            Self::WhatIsAComponent => f.write_str("what-is-a-component"),
            Self::ComponentProperties => f.write_str("component-properties"),
            Self::PropertiesAreImmutable => f.write_str("properties-are-immutable"),
            Self::ComponentFunctionsAreCalledMultipleTimes => {
                f.write_str("component-functions-are-called-multiple-times")
            }
            Self::ComposingComponents => f.write_str("composing-components"),
        }
    }
}
#[derive(Debug)]
pub struct GuideComponentSectionParseError;
impl std::fmt::Display for GuideComponentSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuideComponentSectionyour-first-component, what-is-a-component, component-properties, properties-are-immutable, component-functions-are-called-multiple-times, composing-components",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuideComponentSectionParseError {}
#[component(no_case_check)]
pub fn GuideComponent(section: GuideComponentSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "your-first-component",
            Link {
                to: BookRoute::GuideComponent {
                    section: GuideComponentSection::YourFirstComponent,
                },
                class: "header",
                "Your First Component"
            }
        }
        p {
            "Now that we've initialized our "
            em { "HotDog" }
            " app, we can start building out its components."
        }
        h2 { id: "what-is-a-component",
            Link {
                to: BookRoute::GuideComponent {
                    section: GuideComponentSection::WhatIsAComponent,
                },
                class: "header",
                "What is a component?"
            }
        }
        p {
            "In Dioxus, apps are comprised of individual functions called "
            em { "Components" }
            " that take in some "
            em { "Properties" }
            " and render an "
            em { "Element" }
            ":"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">DogApp</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">props</span><span style=\"color:#f8f8f2;\">: DogAppProps) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// ...\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        h2 { id: "component-properties",
            Link {
                to: BookRoute::GuideComponent {
                    section: GuideComponentSection::ComponentProperties,
                },
                class: "header",
                "Component Properties"
            }
        }
        p {
            "All components take an object that outlines which parameters the component can accept. All  "
            code { "Props" }
            " structs in Dioxus need to derive the  "
            code { "Properties" }
            " trait which requires both  "
            code { "Clone" }
            " and  "
            code { "PartialEq" }
            ":"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(Props, PartialEq, Clone)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">DogAppProps {{\n</span><span style=\"color:#f8f8f2;\">    breed: String\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "Dioxus provides the  "
            code { "#[component]" }
            " macro for simplifying how components are defined. This macro converts the parameters of the annotated function into a hidden accompanying struct."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">DogApp</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">breed</span><span style=\"color:#f8f8f2;\">: String) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// ...\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "When building apps, you'll frequently use the  "
            code { "#[component]" }
            " macro. When building libraries, we generally suggest deriving Props instead."
        }
        h2 { id: "properties-are-immutable",
            Link {
                to: BookRoute::GuideComponent {
                    section: GuideComponentSection::PropertiesAreImmutable,
                },
                class: "header",
                "Properties are Immutable"
            }
        }
        p {
            "If you're familiar with JavaScript, then you might also be familiar with libraries like "
            Link { to: "http://react.dev", "React" }
            ". Dioxus is "
            em { "very" }
            " similar to React: if you know React then you will feel comfortable with Dioxus."
        }
        p {
            "Just like React, Dioxus components are rendered by calling the function component. On every render, Dioxus makes a  "
            code { ".clone()" }
            " of the component's props. This ensures you can't accidentally modify your props which can lead to hard-to-track issues with state management."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">DogApp</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">props</span><span style=\"color:#f8f8f2;\">: DogAppProps) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    tracing::info</span><span style=\"color:#f92672;\">!</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;Rendered with breed: {{}}&quot;</span><span style=\"color:#f8f8f2;\">, props.breed);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// ...\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "Dioxus provides types that make  "
            code { ".clone()" }
            " cheaper to call, so don't worry about performance gotchas here."
        }
        h2 { id: "component-functions-are-called-multiple-times",
            Link {
                to: BookRoute::GuideComponent {
                    section: GuideComponentSection::ComponentFunctionsAreCalledMultipleTimes,
                },
                class: "header",
                "Component Functions are Called Multiple Times"
            }
        }
        p {
            "Just like React, Dioxus will call your component function multiple times throughout its lifecycle. This is called "
            em { "re-rendering" }
            ". In Dioxus, re-renders are extremely cheap (much cheaper than React!). In most cases you shouldn't worry about re-rendering too frequently."
        }
        p {
            "When Dioxus re-renders your component, it compares the  "
            code { "Element" }
            " returned from the "
            em { "last" }
            " render against the "
            code { "Element" }
            " returned in the "
            em { "current" }
            " render."
        }
        p {
            "For example, when the  "
            code { "breed" }
            " property changes on the DogApp component, Dioxus will call the DogApp function a second time and compare the previous Element against the new Element."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">DogApp</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">breed</span><span style=\"color:#f8f8f2;\">: String) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">\trsx! {{\n</span><span style=\"color:#f8f8f2;\">\t\t</span><span style=\"color:#ffee99;\">&quot;Breed: {{breed}}&quot;\n</span><span style=\"color:#f8f8f2;\">\t}}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            img {
                src: asset!("/assets/06_docs/diffing_diagram.png", ImageAssetOptions::new().with_avif()),
                alt: "Diffing",
                title: "",
            }
        }
        p { "Dioxus will re-render your component in only two circumstances:" }
        ul {
            li {
                "When the "
                code { "Props" }
                " change as determined by "
                code { "PartialEq" }
            }
            li {
                "When a function like "
                code { "signal.set()" }
                " or "
                code { "signal.write()" }
                " calls "
                code { "Scope.needs_update()" }
            }
        }
        p {
            "Unlike React, all Dioxus components are "
            em { "memoized by default" }
            " meaning Dioxus will always compare "
            code { "Props" }
            " before deciding to re-render your component. As an additional optimization, Dioxus only compares dynamic parts of your RSX. Elements that don't contain dynamic data won't be checked for changes."
        }
        h2 { id: "composing-components",
            Link {
                to: BookRoute::GuideComponent {
                    section: GuideComponentSection::ComposingComponents,
                },
                class: "header",
                "Composing Components"
            }
        }
        p {
            "In Dioxus, "
            em { "Components" }
            " are composed together to create "
            em { "Apps" }
            ". Each component will hold onto its own state and handle its own updates. This makes it easy to abstract your app into different parts and even share pieces of your app as libraries for others to use."
        }
        p {
            "To compose components together, we'll use the  "
            code { "rsx! {{}}" }
            " macro to define the structure of our app."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        Header {{}}\n</span><span style=\"color:#f8f8f2;\">        DogApp {{ breed: </span><span style=\"color:#ffee99;\">&quot;corgi&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        Footer {{}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "We'll cover  "
            code { "rsx! {{}}" }
            " in more depth in the "
            Link {
                to: BookRoute::GuideRsx {
                    section: GuideRsxSection::Empty,
                },
                "next chapter"
            }
            "."
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuideRsxSection {
    #[default]
    Empty,
    DescribingTheUi,
    EditingRsxWithHotReloading,
    RsxIsJustHtml,
    AddingUiToOur,
}
impl std::str::FromStr for GuideRsxSection {
    type Err = GuideRsxSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "describing-the-ui" => Ok(Self::DescribingTheUi),
            "editing-rsx-with-hot-reloading" => Ok(Self::EditingRsxWithHotReloading),
            "rsx-is-just-html" => Ok(Self::RsxIsJustHtml),
            "adding-ui-to-our" => Ok(Self::AddingUiToOur),
            _ => Err(GuideRsxSectionParseError),
        }
    }
}
impl std::fmt::Display for GuideRsxSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::DescribingTheUi => f.write_str("describing-the-ui"),
            Self::EditingRsxWithHotReloading => f.write_str("editing-rsx-with-hot-reloading"),
            Self::RsxIsJustHtml => f.write_str("rsx-is-just-html"),
            Self::AddingUiToOur => f.write_str("adding-ui-to-our"),
        }
    }
}
#[derive(Debug)]
pub struct GuideRsxSectionParseError;
impl std::fmt::Display for GuideRsxSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuideRsxSectiondescribing-the-ui, editing-rsx-with-hot-reloading, rsx-is-just-html, adding-ui-to-our",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuideRsxSectionParseError {}
#[component(no_case_check)]
pub fn GuideRsx(section: GuideRsxSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "describing-the-ui",
            Link {
                to: BookRoute::GuideRsx {
                    section: GuideRsxSection::DescribingTheUi,
                },
                class: "header",
                "Describing the UI"
            }
        }
        p {
            "Dioxus is a "
            em { "declarative" }
            " framework. This means that instead of telling Dioxus what to do (e.g. to \"create an element\" or \"set the color to red\") we simply "
            em { "declare" }
            " what we want the UI to look like using RSX."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// define a component that renders a div with the text &quot;Hello, world!&quot;\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ </span><span style=\"color:#ffee99;\">&quot;Hello, world!&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "hello_world_desktop.rs".to_string(),
        }
        p {
            "Here, we use the  "
            code { "rsx!" }
            " macro to "
            em { "declare" }
            " that we want a "
            code { "div" }
            " element, containing the text "
            code { "\"Hello, world!\"" }
            ". Dioxus takes the RSX and constructs a user interface from it."
        }
        h2 { id: "editing-rsx-with-hot-reloading",
            Link {
                to: BookRoute::GuideRsx {
                    section: GuideRsxSection::EditingRsxWithHotReloading,
                },
                class: "header",
                "Editing RSX with Hot-Reloading"
            }
        }
        p {
            "When using  "
            code { "dx serve" }
            ", your app's RSX is automatically hot-reloaded whenever you edit and save the file. You can edit RSX structure, add new elements, and style your markup without a full rebuild."
        }
        p {
            "Whenever you edit "
            em { "Rust" }
            " code, then "
            code { "dx" }
            " will automatically force a \"full rebuild\" of your app."
        }
        p {
            video {
                src: asset!("/assets/06_docs/dog_app_hotreload.mp4"),
                alt: "Dog App Hotreloading",
                title: "",
                autoplay: true,
                muted: true,
                r#loop: true,
                playsinline: true,
                preload: "metadata",
            }
        }
        p {
            "For an in-depth guide in what can and can't be hot-reloaded, check the "
            Link {
                to: BookRoute::ReferenceHotreload {
                    section: ReferenceHotreloadSection::Empty,
                },
                "hot-reload guide"
            }
            " in the reference."
        }
        h2 { id: "rsx-is-just-html",
            Link {
                to: BookRoute::GuideRsx {
                    section: GuideRsxSection::RsxIsJustHtml,
                },
                class: "header",
                "RSX is just HTML"
            }
        }
        p {
            "Dioxus provides the  "
            code { "rsx! {{}}" }
            " macro for assembling  "
            code { "Element" }
            "s in your app. The  "
            code { "rsx! {{}}" }
            " macro primarily speaks HTML: the web, desktop, and mobile Dioxus first-party renderers all use HTML and CSS as the layout and styling technologies."
        }
        p {
            "This means you can reuse your knowledge of the web and build your app using  "
            code { "div" }
            ",  "
            code { "span" }
            ",  "
            code { "img" }
            ",  "
            code { "style" }
            ",  "
            code { "button" }
            ", and more."
        }
        p {
            "The RSX syntax is a \"strict\" form of Rust that uses Rust's  "
            code { "Struct" }
            " syntax for assembling elements:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    div {{\n</span><span style=\"color:#f8f8f2;\">        class: </span><span style=\"color:#ffee99;\">&quot;bg-red-100&quot;\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "Elements in RSX differ slightly from Rust struct syntax: they can also contain child structs placed immediately after the final attribute."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    div {{ class: </span><span style=\"color:#ffee99;\">&quot;bg-red-100&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">        button {{\n</span><span style=\"color:#f8f8f2;\">            onclick: </span><span style=\"color:#f92672;\">move |_| </span><span style=\"color:#f8f8f2;\">info!(</span><span style=\"color:#ffee99;\">&quot;Clicked&quot;</span><span style=\"color:#f8f8f2;\">),\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;Click me!&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "Additionally, all quoted strings in RSX imply  "
            code { "format!()" }
            " automatically, so you can define a variable outside your markup and use it in your strings without an explicit format call:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    div {{ </span><span style=\"color:#ffee99;\">&quot;Breed: {{breed}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "Any expression that can be rendered to a String can be included directly in RSX. RSX also accepts  "
            code { "Option<Element>" }
            " and iterators of Elements:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Anything that&#39;s `Display`\n</span><span style=\"color:#f8f8f2;\">    {{</span><span style=\"color:#ffee99;\">&quot;Something&quot;</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Optionals\n</span><span style=\"color:#f8f8f2;\">    {{show_title.</span><span style=\"color:#66d9ef;\">and_then</span><span style=\"color:#f8f8f2;\">(|| rsx! {{ </span><span style=\"color:#ffee99;\">&quot;title!&quot; </span><span style=\"color:#f8f8f2;\">}} )}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// And iterators\n</span><span style=\"color:#f8f8f2;\">    ul {{\n</span><span style=\"color:#f8f8f2;\">        {{(</span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f92672;\">..</span><span style=\"color:#ff80f4;\">5</span><span style=\"color:#f8f8f2;\">).</span><span style=\"color:#66d9ef;\">map</span><span style=\"color:#f8f8f2;\">(|</span><span style=\"font-style:italic;color:#fd971f;\">i</span><span style=\"color:#f8f8f2;\">| rsx! {{ </span><span style=\"color:#ffee99;\">&quot;{{i}}&quot; </span><span style=\"color:#f8f8f2;\">}})}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        p {
            "Dioxus provides two items of syntax sugar for these common cases:  "
            code { "for" }
            " loops and  "
            code { "if" }
            " chains. These blocks return the contained RSX directly."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">if</span><span style=\"color:#f8f8f2;\"> show_title {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#ffee99;\">&quot;title!&quot;\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    ul {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">for</span><span style=\"color:#f8f8f2;\"> item </span><span style=\"color:#f92672;\">in </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f92672;\">..</span><span style=\"color:#ff80f4;\">5 </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;{{item}}&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        p {
            "For lists, Dioxus uses the  "
            code { "key" }
            " attribute to ensure it's comparing the right elements between renders. If you forget to add a  "
            code { "key" }
            " attribute to your list item, you might run into performance and state management issues. Usually you can find a unique key to differentiate your list items:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">for</span><span style=\"color:#f8f8f2;\"> user </span><span style=\"color:#f92672;\">in</span><span style=\"color:#f8f8f2;\"> users {{\n</span><span style=\"color:#f8f8f2;\">        div {{\n</span><span style=\"color:#f8f8f2;\">            key: </span><span style=\"color:#ffee99;\">&quot;{{user.id}}&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;{{user.name}}&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        h2 { id: "adding-ui-to-our",
            Link {
                to: BookRoute::GuideRsx {
                    section: GuideRsxSection::AddingUiToOur,
                },
                class: "header",
                "Adding UI to our "
            }
            em { "HotDog" }
            " App"
        }
        p {
            "Let's add a basic UI to our app. We'll add a header, a body image for the dog photo, and some basic buttons."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ id: </span><span style=\"color:#ffee99;\">&quot;title&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            h1 {{ </span><span style=\"color:#ffee99;\">&quot;HotDog! 🌭&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">        div {{ id: </span><span style=\"color:#ffee99;\">&quot;dogview&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            img {{ src: </span><span style=\"color:#ffee99;\">&quot;https://images.dog.ceo/breeds/pitbull/dog-3981540_1280.jpg&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">        div {{ id: </span><span style=\"color:#ffee99;\">&quot;buttons&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            button {{ id: </span><span style=\"color:#ffee99;\">&quot;skip&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;skip&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">            button {{ id: </span><span style=\"color:#ffee99;\">&quot;save&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;save!&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        p { "Our app is coming together!" }
        p {
            img {
                src: asset!("/assets/06_docs/unstyled_dog_app.png", ImageAssetOptions::new().with_avif()),
                alt: "Unstyled Dog App",
                title: "",
            }
        }
        p {
            "Unfortunately, it's not very beautiful yet. Let's move on to "
            Link {
                to: BookRoute::GuideAssets {
                    section: GuideAssetsSection::Empty,
                },
                "styling our app"
            }
            "."
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuideAssetsSection {
    #[default]
    Empty,
    StylingAndAssets,
    DioxusUsesCssForStyling,
    AddingTheCssFileWithAsset,
    HotReloading,
    IncludingImages,
    Optimizations,
    TheFinalCss,
}
impl std::str::FromStr for GuideAssetsSection {
    type Err = GuideAssetsSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "styling-and-assets" => Ok(Self::StylingAndAssets),
            "dioxus-uses-css-for-styling" => Ok(Self::DioxusUsesCssForStyling),
            "adding-the-css-file-with-asset" => Ok(Self::AddingTheCssFileWithAsset),
            "hot-reloading" => Ok(Self::HotReloading),
            "including-images" => Ok(Self::IncludingImages),
            "optimizations" => Ok(Self::Optimizations),
            "the-final-css" => Ok(Self::TheFinalCss),
            _ => Err(GuideAssetsSectionParseError),
        }
    }
}
impl std::fmt::Display for GuideAssetsSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::StylingAndAssets => f.write_str("styling-and-assets"),
            Self::DioxusUsesCssForStyling => f.write_str("dioxus-uses-css-for-styling"),
            Self::AddingTheCssFileWithAsset => f.write_str("adding-the-css-file-with-asset"),
            Self::HotReloading => f.write_str("hot-reloading"),
            Self::IncludingImages => f.write_str("including-images"),
            Self::Optimizations => f.write_str("optimizations"),
            Self::TheFinalCss => f.write_str("the-final-css"),
        }
    }
}
#[derive(Debug)]
pub struct GuideAssetsSectionParseError;
impl std::fmt::Display for GuideAssetsSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuideAssetsSectionstyling-and-assets, dioxus-uses-css-for-styling, adding-the-css-file-with-asset, hot-reloading, including-images, optimizations, the-final-css",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuideAssetsSectionParseError {}
#[component(no_case_check)]
pub fn GuideAssets(section: GuideAssetsSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "styling-and-assets",
            Link {
                to: BookRoute::GuideAssets {
                    section: GuideAssetsSection::StylingAndAssets,
                },
                class: "header",
                "Styling and Assets"
            }
        }
        p { "Unfortunately, our HotDog app isn't quite ready to show off - it's completely unstyled!" }
        p { "In this chapter we'll cover adding assets and styles to our app." }
        h2 { id: "dioxus-uses-css-for-styling",
            Link {
                to: BookRoute::GuideAssets {
                    section: GuideAssetsSection::DioxusUsesCssForStyling,
                },
                class: "header",
                "Dioxus uses CSS for Styling"
            }
        }
        p {
            "As mentioned earlier, Dioxus apps use HTML and CSS as the core markup and styling technology. Instead of re-inventing the wheel like Flutter and React-Native, we designed Dioxus to use HTML and CSS on every platform."
        }
        p {
            "CSS is by-far the most popular styling system and is extremely capable. For example, here's a screenshot of "
            Link { to: "https://github.com/terhechte/Ebou", "ebou" }
            ", a very beautiful Mastodon client built with Dioxus."
        }
        p {
            img {
                src: asset!("/assets/06_docs/ebou-following.png", ImageAssetOptions::new().with_avif()),
                alt: "Ebou",
                title: "",
            }
        }
        p { "HTML and CSS are very powerful - don't worry about being too limited!" }
        h2 { id: "adding-the-css-file-with-asset",
            Link {
                to: BookRoute::GuideAssets {
                    section: GuideAssetsSection::AddingTheCssFileWithAsset,
                },
                class: "header",
                "Adding the CSS File with asset!()"
            }
        }
        p {
            "The bare-bones template already includes a base  "
            code { "main.css" }
            " in the  "
            code { "assets" }
            " folder."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">├── Cargo.toml\n</span><span style=\"color:#f8f8f2;\">├── assets\n</span><span style=\"color:#f8f8f2;\">│\u{a0}\u{a0} └── main.css\n</span><span style=\"color:#f8f8f2;\">└── src\n</span><span style=\"color:#f8f8f2;\">    └── main.rs</span></pre>\n" }
        p {
            "To include the CSS in our app, we can use the  "
            code { "asset!()" }
            " macro. This macro ensures the asset will be included in the final app bundle."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">static </span><span style=\"color:#ff80f4;\">CSS</span><span style=\"color:#f8f8f2;\">: Asset </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">asset!(</span><span style=\"color:#ffee99;\">&quot;/assets/main.css&quot;</span><span style=\"color:#f8f8f2;\">);</span></pre>\n" }
        p {
            "We also need to load the asset into our app using the  "
            code { "document::Stylesheet" }
            " component. This component is equivalent to the  "
            code { "<link>" }
            " HTML element but also ensures the CSS will be pre-loaded during server-side-rendering."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        document::Stylesheet {{ href: </span><span style=\"color:#ff80f4;\">CSS </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// rest of the app\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "Unlike Rust's  "
            code { "include_str!()" }
            " macro, the  "
            code { "asset!()" }
            " macro does not actually include the "
            em { "contents" }
            " of the asset in our final executable. Instead, it generates a unique path so that the asset can be loaded at runtime. This is ideal for web apps where assets are loaded in parallel through different HTTP requests."
        }
        blockquote {
            p {
                "📣 The  "
                code { "asset!()" }
                " macro generates a unique name that won't exactly match the input name. This helps prevents name collisions and improves caching."
            }
        }
        h2 { id: "hot-reloading",
            Link {
                to: BookRoute::GuideAssets {
                    section: GuideAssetsSection::HotReloading,
                },
                class: "header",
                "Hot-Reloading"
            }
        }
        p {
            "All assets in Dioxus participate in hot-reloading. Try editing your app's  "
            code { "main.css" }
            " and watch changes propagate in real time."
        }
        p {
            video {
                src: asset!("/assets/06_docs/dog-asset-hotreload.mp4"),
                alt: "CSS Hot-reloading",
                title: "",
                autoplay: true,
                muted: true,
                r#loop: true,
                playsinline: true,
                preload: "metadata",
            }
        }
        h2 { id: "including-images",
            Link {
                to: BookRoute::GuideAssets {
                    section: GuideAssetsSection::IncludingImages,
                },
                class: "header",
                "Including Images"
            }
        }
        p { "In Dioxus, you can include images in two ways:" }
        ul {
            li { "Dynamically with a URL" }
            li {
                "Statically with the "
                code { "asset!()" }
                " macro."
            }
        }
        p {
            "When including assets with a URL, simply fill the  "
            code { "src" }
            " attribute of  "
            code { "img {{}}" }
            ". Note that when the app is offline, URL-based images won't download."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// ...\n</span><span style=\"color:#f8f8f2;\">    div {{\n</span><span style=\"color:#f8f8f2;\">        img {{ src: </span><span style=\"color:#ffee99;\">&quot;https://images.dog.ceo/breeds/pitbull/dog-3981540_1280.jpg&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// ...\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "For static images, you can use the same  "
            code { "asset!()" }
            " macro that we used to include the app's CSS."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">static </span><span style=\"color:#ff80f4;\">ICON</span><span style=\"color:#f8f8f2;\">: Asset </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">asset!(</span><span style=\"color:#ffee99;\">&quot;/assets/icon.png&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    img {{ src: </span><span style=\"color:#ff80f4;\">ICON </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        h2 { id: "optimizations",
            Link {
                to: BookRoute::GuideAssets {
                    section: GuideAssetsSection::Optimizations,
                },
                class: "header",
                "Optimizations"
            }
        }
        p {
            "By default, the  "
            code { "asset!()" }
            " macro will lightly optimize CSS, JavaScript, JSON, and images. The name of the asset will also be modified to include a content hash."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// would output main-j1238nask123.css\n</span><span style=\"color:#f8f8f2;\">asset!(</span><span style=\"color:#ffee99;\">&quot;/assets/main.css&quot;</span><span style=\"color:#f8f8f2;\">).</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">()</span></pre>\n" }
        p {
            "You can optimize assets even further, with an optional  "
            code { "Options" }
            " struct. For example,  "
            code { "dx" }
            " can automatically convert  "
            code { ".png" }
            " images to a more optimized  "
            code { ".avif" }
            " format:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// outputs image-j1238jd2.avif\n</span><span style=\"color:#f8f8f2;\">asset!(</span><span style=\"color:#ffee99;\">&quot;/assets/image.png&quot;</span><span style=\"color:#f8f8f2;\">, ImageAssetOptions::new().</span><span style=\"color:#66d9ef;\">with_avif</span><span style=\"color:#f8f8f2;\">())</span></pre>\n" }
        p {
            "For many apps, asset optimization is the most effective way of improving load times. As developers, we frequently overlook the size of images and accidentally make our sites load slower."
        }
        p {
            "Check out the "
            Link {
                to: BookRoute::GuidesAssets {
                    section: GuidesAssetsSection::Empty,
                },
                "assets guide"
            }
            " for a more in-depth explanation of how the Dioxus asset system works."
        }
        h2 { id: "the-final-css",
            Link {
                to: BookRoute::GuideAssets {
                    section: GuideAssetsSection::TheFinalCss,
                },
                class: "header",
                "The Final CSS"
            }
        }
        p {
            "We can use the asset hot-reload system of  "
            code { "dx" }
            " and our knowledge of CSS to create a beautiful app:"
        }
        p {
            img {
                src: asset!("/assets/06_docs/dog_app_styled.png", ImageAssetOptions::new().with_avif()),
                alt: "Styled Dog App",
                title: "",
            }
        }
        p { "The final CSS is here for reference:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">/* App-wide styling */\n</span><span style=\"color:#f8f8f2;\">html, body {{\n</span><span style=\"color:#f8f8f2;\">    background</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">color: </span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\">0e0e0e;\n</span><span style=\"color:#f8f8f2;\">    color: white;\n</span><span style=\"color:#f8f8f2;\">    font</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">family: </span><span style=\"color:#f92672;\">&#39;Segoe </span><span style=\"color:#ff80f4;\">UI</span><span style=\"color:#f92672;\">&#39;</span><span style=\"color:#f8f8f2;\">, Tahoma, Geneva, Verdana, sans</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">serif;\n</span><span style=\"color:#f8f8f2;\">    height: </span><span style=\"color:#ff80f4;\">100</span><span style=\"color:#f92672;\">%</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">    width: </span><span style=\"color:#ff80f4;\">100</span><span style=\"color:#f92672;\">%</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">    overflow: hidden;\n</span><span style=\"color:#f8f8f2;\">    margin: </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\">main {{\n</span><span style=\"color:#f8f8f2;\">    display: flex;\n</span><span style=\"color:#f8f8f2;\">    flex</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">direction: column;\n</span><span style=\"color:#f8f8f2;\">    height: </span><span style=\"color:#ff80f4;\">100</span><span style=\"color:#f92672;\">%</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">    justify</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">content: space</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">between;\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\">dogview {{\n</span><span style=\"color:#f8f8f2;\">    max</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">height: 80vh;\n</span><span style=\"color:#f8f8f2;\">    flex</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">grow: </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">    width: </span><span style=\"color:#ff80f4;\">100</span><span style=\"color:#f92672;\">%</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">    display: flex;\n</span><span style=\"color:#f8f8f2;\">    flex</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">direction: column;\n</span><span style=\"color:#f8f8f2;\">    align</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">items: center;\n</span><span style=\"color:#f8f8f2;\">    justify</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">content: center;\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\">dogview img {{\n</span><span style=\"color:#f8f8f2;\">    display: block;\n</span><span style=\"color:#f8f8f2;\">    max</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">width: </span><span style=\"color:#ff80f4;\">50</span><span style=\"color:#f92672;\">%</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">    max</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">height: </span><span style=\"color:#ff80f4;\">50</span><span style=\"color:#f92672;\">%</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">    transform: </span><span style=\"color:#66d9ef;\">scale</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ff80f4;\">1.8</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">    border</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">radius: 5px;\n</span><span style=\"color:#f8f8f2;\">    border: 1px solid </span><span style=\"color:#66d9ef;\">rgb</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ff80f4;\">233</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ff80f4;\">233</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ff80f4;\">233</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">box-</span><span style=\"color:#f8f8f2;\">shadow: 0px 0px 5px 1px </span><span style=\"color:#66d9ef;\">rgb</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ff80f4;\">216</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ff80f4;\">216</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ff80f4;\">216</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ff80f4;\">0.5</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\">title {{\n</span><span style=\"color:#f8f8f2;\">    text</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">align: center;\n</span><span style=\"color:#f8f8f2;\">    padding</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">top: 10px;\n</span><span style=\"color:#f8f8f2;\">    border</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">bottom: 1px solid </span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\">a8a8a8;\n</span><span style=\"color:#f8f8f2;\">    display: flex;\n</span><span style=\"color:#f8f8f2;\">    flex</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">direction: row;\n</span><span style=\"color:#f8f8f2;\">    justify</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">content: space</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">evenly;\n</span><span style=\"color:#f8f8f2;\">    align</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">items: center;\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\">title a {{\n</span><span style=\"color:#f8f8f2;\">    text</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">decoration: none;\n</span><span style=\"color:#f8f8f2;\">    color: white;\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">a</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\">heart {{\n</span><span style=\"color:#f8f8f2;\">    background</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">color: white;\n</span><span style=\"color:#f8f8f2;\">    color: red;\n</span><span style=\"color:#f8f8f2;\">    padding: 5px;\n</span><span style=\"color:#f8f8f2;\">    border</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">radius: 5px;\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\">title span {{\n</span><span style=\"color:#f8f8f2;\">    width: 20px;\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\">title h1 {{\n</span><span style=\"color:#f8f8f2;\">    margin: </span><span style=\"color:#ff80f4;\">0.25</span><span style=\"color:#f8f8f2;\">em;\n</span><span style=\"color:#f8f8f2;\">    font</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">style: italic;\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\">buttons {{\n</span><span style=\"color:#f8f8f2;\">    display: flex;\n</span><span style=\"color:#f8f8f2;\">    flex</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">direction: row;\n</span><span style=\"color:#f8f8f2;\">    justify</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">content: center;\n</span><span style=\"color:#f8f8f2;\">    gap: 20px;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/* padding-top: 20px; */\n</span><span style=\"color:#f8f8f2;\">    padding</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">bottom: 20px;\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\">skip {{ background</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">color: gray }}\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\">save {{ background</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">color: green; }}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\">skip, </span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\">save {{\n</span><span style=\"color:#f8f8f2;\">    padding: 5px 30px 5px 30px;\n</span><span style=\"color:#f8f8f2;\">    border</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">radius: 3px;\n</span><span style=\"color:#f8f8f2;\">    font</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">size: 2rem;\n</span><span style=\"color:#f8f8f2;\">    font</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">weight: bold;\n</span><span style=\"color:#f8f8f2;\">    color: </span><span style=\"color:#66d9ef;\">rgb</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ff80f4;\">230</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ff80f4;\">230</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ff80f4;\">230</span><span style=\"color:#f8f8f2;\">)\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\">navbar {{\n</span><span style=\"color:#f8f8f2;\">    border: 1px solid </span><span style=\"color:#66d9ef;\">rgb</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ff80f4;\">233</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ff80f4;\">233</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ff80f4;\">233</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">    border</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">width: 1px 0px 0px 0px;\n</span><span style=\"color:#f8f8f2;\">    display: flex;\n</span><span style=\"color:#f8f8f2;\">    flex</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">direction: row;\n</span><span style=\"color:#f8f8f2;\">    justify</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">content: space</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">evenly;\n</span><span style=\"color:#f8f8f2;\">    padding: 20px;\n</span><span style=\"color:#f8f8f2;\">    gap: 20px;\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\">navbar a {{\n</span><span style=\"color:#f8f8f2;\">    background</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">color: </span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\">a8a8a8;\n</span><span style=\"color:#f8f8f2;\">    border</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">radius: 5px;\n</span><span style=\"color:#f8f8f2;\">    border: 1px solid black;\n</span><span style=\"color:#f8f8f2;\">    text</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">decoration: none;\n</span><span style=\"color:#f8f8f2;\">    color: black;\n</span><span style=\"color:#f8f8f2;\">    padding: 10px 30px 10px 30px;\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\">favorites {{\n</span><span style=\"color:#f8f8f2;\">    flex</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">grow: </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">    overflow: hidden;\n</span><span style=\"color:#f8f8f2;\">    display: flex;\n</span><span style=\"color:#f8f8f2;\">    flex</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">direction: column;\n</span><span style=\"color:#f8f8f2;\">    padding: 10px;\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\">favorites</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">container {{\n</span><span style=\"color:#f8f8f2;\">    overflow</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">y: auto;\n</span><span style=\"color:#f8f8f2;\">    overflow</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">x: hidden;\n</span><span style=\"color:#f8f8f2;\">    display: flex;\n</span><span style=\"color:#f8f8f2;\">    flex</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">direction: row;\n</span><span style=\"color:#f8f8f2;\">    flex</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">wrap: wrap;\n</span><span style=\"color:#f8f8f2;\">    justify</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">content: center;\n</span><span style=\"color:#f8f8f2;\">    gap: 10px;\n</span><span style=\"color:#f8f8f2;\">    padding: 10px;\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">.favorite</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">dog {{\n</span><span style=\"color:#f8f8f2;\">    max</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">height: 180px;\n</span><span style=\"color:#f8f8f2;\">    max</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">width: </span><span style=\"color:#ff80f4;\">60</span><span style=\"color:#f92672;\">%</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">    position: relative;\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">.favorite</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">dog img {{\n</span><span style=\"color:#f8f8f2;\">    max</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">height: 150px;\n</span><span style=\"color:#f8f8f2;\">    border</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">radius: 5px;\n</span><span style=\"color:#f8f8f2;\">    margin: 5px;\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">.favorite</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">dog:hover button {{\n</span><span style=\"color:#f8f8f2;\">    display: block;\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">.favorite</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">dog button {{\n</span><span style=\"color:#f8f8f2;\">    display: none;\n</span><span style=\"color:#f8f8f2;\">    position: absolute;\n</span><span style=\"color:#f8f8f2;\">    bottom: 10px;\n</span><span style=\"color:#f8f8f2;\">    left: 10px;\n</span><span style=\"color:#f8f8f2;\">    z</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">index: </span><span style=\"color:#ff80f4;\">10</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuideStateSection {
    #[default]
    Empty,
    Interactivity,
    EncapsulatingState,
    EventHandlers,
    StateWithUseHook,
    SignalsAndUseSignal,
    GlobalStateWithContext,
    GlobalSignals,
}
impl std::str::FromStr for GuideStateSection {
    type Err = GuideStateSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "interactivity" => Ok(Self::Interactivity),
            "encapsulating-state" => Ok(Self::EncapsulatingState),
            "event-handlers" => Ok(Self::EventHandlers),
            "state-with-use-hook" => Ok(Self::StateWithUseHook),
            "signals-and-use-signal" => Ok(Self::SignalsAndUseSignal),
            "global-state-with-context" => Ok(Self::GlobalStateWithContext),
            "global-signals" => Ok(Self::GlobalSignals),
            _ => Err(GuideStateSectionParseError),
        }
    }
}
impl std::fmt::Display for GuideStateSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Interactivity => f.write_str("interactivity"),
            Self::EncapsulatingState => f.write_str("encapsulating-state"),
            Self::EventHandlers => f.write_str("event-handlers"),
            Self::StateWithUseHook => f.write_str("state-with-use-hook"),
            Self::SignalsAndUseSignal => f.write_str("signals-and-use-signal"),
            Self::GlobalStateWithContext => f.write_str("global-state-with-context"),
            Self::GlobalSignals => f.write_str("global-signals"),
        }
    }
}
#[derive(Debug)]
pub struct GuideStateSectionParseError;
impl std::fmt::Display for GuideStateSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuideStateSectioninteractivity, encapsulating-state, event-handlers, state-with-use-hook, signals-and-use-signal, global-state-with-context, global-signals",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuideStateSectionParseError {}
#[component(no_case_check)]
pub fn GuideState(section: GuideStateSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "interactivity",
            Link {
                to: BookRoute::GuideState {
                    section: GuideStateSection::Interactivity,
                },
                class: "header",
                "Interactivity"
            }
        }
        p {
            "Now that our "
            em { "HotDog" }
            " app is scaffolded and styled, we can finally add some interactive elements."
        }
        h2 { id: "encapsulating-state",
            Link {
                to: BookRoute::GuideState {
                    section: GuideStateSection::EncapsulatingState,
                },
                class: "header",
                "Encapsulating State"
            }
        }
        p {
            "Before we get too far, let's split our app into two parts: the  "
            code { "Title" }
            " and the  "
            code { "DogView" }
            ". This will help us organize our app and keep the  "
            code { "DogView" }
            " state separated from  "
            code { "Title" }
            " state."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        document::Stylesheet {{ href: </span><span style=\"color:#ff80f4;\">CSS </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        Title {{}}\n</span><span style=\"color:#f8f8f2;\">        DogView {{}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Title</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ id: </span><span style=\"color:#ffee99;\">&quot;title&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            h1 {{ </span><span style=\"color:#ffee99;\">&quot;HotDog! 🌭&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">DogView</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ id: </span><span style=\"color:#ffee99;\">&quot;dogview&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            img {{ src: </span><span style=\"color:#ffee99;\">&quot;https://images.dog.ceo/breeds/pitbull/dog-3981540_1280.jpg&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">        div {{ id: </span><span style=\"color:#ffee99;\">&quot;buttons&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            button {{ id: </span><span style=\"color:#ffee99;\">&quot;skip&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;skip&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">            button {{ id: </span><span style=\"color:#ffee99;\">&quot;save&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;save!&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        h2 { id: "event-handlers",
            Link {
                to: BookRoute::GuideState {
                    section: GuideStateSection::EventHandlers,
                },
                class: "header",
                "Event Handlers"
            }
        }
        p {
            "In the  "
            code { "DogView" }
            " component, we want to attach an action to the click of the buttons. For example: skipping or saving the current dog photo. We can use an "
            Link {
                to: BookRoute::ReferenceEventHandlers {
                    section: ReferenceEventHandlersSection::Empty,
                },
                "EventListener"
            }
            " to listen for the "
            code { "click" }
            " events."
        }
        p {
            "Event handlers are similar to regular attributes, but their name usually starts with  "
            code { "on" }
            " - and they accept closures as values. The closure will be called whenever its corresponding event is triggered. The listener receives information about the event in the "
            Link { to: "https://docs.rs/dioxus/latest/dioxus/prelude/struct.Event.html",
                "Event"
            }
            " object."
        }
        p {
            "We'll add some closures inline and then pass them to the  "
            code { "onclick" }
            " attribute for both the "
            em { "skip" }
            " and "
            em { "save" }
            " buttons:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">DogView</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> skip </span><span style=\"color:#f92672;\">= move |</span><span style=\"color:#f8f8f2;\">evt</span><span style=\"color:#f92672;\">| </span><span style=\"color:#f8f8f2;\">{{}};\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> save </span><span style=\"color:#f92672;\">= move |</span><span style=\"color:#f8f8f2;\">evt</span><span style=\"color:#f92672;\">| </span><span style=\"color:#f8f8f2;\">{{}};\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// ...\n</span><span style=\"color:#f8f8f2;\">        div {{ id: </span><span style=\"color:#ffee99;\">&quot;buttons&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            button {{ onclick: skip, id: </span><span style=\"color:#ffee99;\">&quot;skip&quot;</span><span style=\"color:#f8f8f2;\">,  </span><span style=\"color:#ffee99;\">&quot;skip&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">            button {{ onclick: save, id: </span><span style=\"color:#ffee99;\">&quot;save&quot;</span><span style=\"color:#f8f8f2;\">,  </span><span style=\"color:#ffee99;\">&quot;save!&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        blockquote {
            p {
                "You can read more about Event Handlers in the "
                Link {
                    to: BookRoute::ReferenceEventHandlers {
                        section: ReferenceEventHandlersSection::Empty,
                    },
                    "Event Handler reference"
                }
            }
        }
        h2 { id: "state-with-use-hook",
            Link {
                to: BookRoute::GuideState {
                    section: GuideStateSection::StateWithUseHook,
                },
                class: "header",
                "State with use_hook"
            }
        }
        p {
            "So far, our components have no internal state. For our  "
            code { "DogView" }
            ", we want to change the currently displayed dog photo whenever the user clicks "
            em { "skip" }
            " or "
            em { "save" }
            "."
        }
        p {
            "To store state in components, Dioxus provides the  "
            code { "use_hook" }
            " function. This makes it possible for bare Rust functions to store and load state without the use of an extra struct."
        }
        p {
            "When called in a component, the  "
            code { "use_hook" }
            " function will return a  "
            code { ".clone()" }
            " of the originally stored value:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">DogView</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> img_src </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_hook</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ffee99;\">&quot;https://images.dog.ceo/breeds/pitbull/dog-3981540_1280.jpg&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// ..\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ id: </span><span style=\"color:#ffee99;\">&quot;dogview&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            img {{ src: </span><span style=\"color:#ffee99;\">&quot;{{img_src}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// ..\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        p {
            "Dioxus hooks are very similar to React's hooks and need to follow some "
            Link {
                to: BookRoute::GuidesManagingState {
                    section: GuidesManagingStateSection::TheRulesOfHooks,
                },
                "simple rules"
            }
            " to function properly."
        }
        h2 { id: "signals-and-use-signal",
            Link {
                to: BookRoute::GuideState {
                    section: GuideStateSection::SignalsAndUseSignal,
                },
                class: "header",
                "Signals and use_signal"
            }
        }
        p {
            "While  "
            code { "use_hook" }
            " makes it possible to store any value that implements  "
            code { "Clone" }
            ", you'll frequently want a more capable form of state management. Built-in to Dioxus are "
            em { "signals" }
            "."
        }
        p {
            code { "Signal" }
            " is a wrapper type around an ordinary Rust value that tracks reads and writes, bringing your app to life. You can wrap any Rust value in a signal. Signals can be created manually with  "
            code { "Signal::new()" }
            " but we strongly recommend using the  "
            code { "use_signal" }
            " hook instead."
        }
        blockquote {
            p {
                "📣 Manually creating Signals requires remembering to call  "
                code { ".dispose()" }
                " on the signal whereas  "
                code { "use_signal" }
                " cleans the Signal up for you automatically."
            }
        }
        p {
            "Whenever a signal's value changes, its containing \"reactive scope\" will be \"marked dirty\" and re-run. By default, Dioxus components are reactive scopes, and thus, will re-render whenever a signal value changes."
        }
        p {
            video {
                src: asset!("/assets/06_docs/hotdog-interactivity.mp4"),
                alt: "Basic Interactivity",
                title: "",
                autoplay: true,
                muted: true,
                r#loop: true,
                playsinline: true,
                preload: "metadata",
            }
        }
        p {
            "Signals are core to Dioxus and take time to master. We recommend reading the "
            Link {
                to: BookRoute::EssentialsStateIndex {
                    section: EssentialsStateIndexSection::Empty,
                },
                "state management"
            }
            " guide in depth before diving into your first large app."
        }
        h2 { id: "global-state-with-context",
            Link {
                to: BookRoute::GuideState {
                    section: GuideStateSection::GlobalStateWithContext,
                },
                class: "header",
                "Global State with Context"
            }
        }
        p {
            "While hooks are good for state "
            em { "local" }
            " to components, occasionally you'll want to manage state for your "
            em { "entire" }
            " app."
        }
        p {
            "Dioxus provides two mechanisms:  "
            code { "Context" }
            " and  "
            code { "GlobalSignal" }
            "."
        }
        p {
            "The  "
            code { "Context" }
            " API makes it possible for parent components to share state with child components without explicitly declaring an additional property field. This is used by larger apps and libraries to share state across the app without modifying component signatures."
        }
        p {
            "To \"provide\" context, simply call  "
            code { "use_context_provider()" }
            " with a struct that implements  "
            code { "Clone" }
            ". To read the context in a child, call  "
            code { "use_context()" }
            "."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// Create a new wrapper type\n</span><span style=\"color:#f8f8f2;\">#[derive(Clone)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">TitleState(String);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Provide that type as a Context\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">use_context_provider</span><span style=\"color:#f8f8f2;\">(|| TitleState(</span><span style=\"color:#ffee99;\">&quot;HotDog&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">()));\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        Title {{}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Title</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Consume that type as a Context\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> title </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">use_context::&lt;TitleState&gt;();\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        h1 {{ </span><span style=\"color:#ffee99;\">&quot;{{title.0}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        p {
            "You can combine use_signal and  "
            code { "Context" }
            " to provide reactive state to your app:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(Clone, Copy)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">MusicPlayer {{\n</span><span style=\"color:#f8f8f2;\">    song: Signal&lt;String&gt;\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">use_music_player_provider</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> song </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ffee99;\">&quot;Drift Away&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">());\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">use_context_provider</span><span style=\"color:#f8f8f2;\">(|| MusicPlayer {{ song }});\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        p {
            "With  "
            code { "use_context" }
            " and  "
            code { "consume_context" }
            ", you can easily reach up to modify that state:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Player</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        button {{\n</span><span style=\"color:#f8f8f2;\">            onclick: </span><span style=\"color:#f92672;\">move |_| </span><span style=\"color:#f8f8f2;\">consume_context::&lt;MusicPlayer&gt;().song.</span><span style=\"color:#66d9ef;\">set</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;Vienna&quot;</span><span style=\"color:#f8f8f2;\">),\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;Shuffle&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "Any components that read the song signal will automatically re-render when the value changes."
        }
        h2 { id: "global-signals",
            Link {
                to: BookRoute::GuideState {
                    section: GuideStateSection::GlobalSignals,
                },
                class: "header",
                "Global Signals"
            }
        }
        p {
            "Occasionally you'll want a simple global value. This is where  "
            code { "GlobalSignal" }
            " helps. GlobalSignals are a combination of the Context system and Signals that require no additional structs or setup."
        }
        p { "Simply declare a GlobalSignal somewhere in your app:" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">static </span><span style=\"color:#ff80f4;\">SONG</span><span style=\"color:#f8f8f2;\">: GlobalSignal&lt;String&gt; </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">Signal::global(|| </span><span style=\"color:#ffee99;\">&quot;Drift Away&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">());</span></pre>\n" }
        p { "And then read and write to it from anywhere:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Player</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        h3 {{ </span><span style=\"color:#ffee99;\">&quot;Now playing {{SONG}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        button {{\n</span><span style=\"color:#f8f8f2;\">            onclick: </span><span style=\"color:#f92672;\">move |_| *</span><span style=\"color:#ff80f4;\">SONG</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">write</span><span style=\"color:#f8f8f2;\">() </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;Vienna&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">(),\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;Shuffle&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        blockquote {
            p {
                "📣 GlobalSignals are only global to one app - not the entire program. On the server, every app gets its own GlobalSignal."
            }
        }
        p {
            "We won't need either GlobalSignal or Context for "
            em { "HotDog" }
            ", but it's important to know that these are available to you."
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuideDataFetchingSection {
    #[default]
    Empty,
    FetchingData,
    AddingDependencies,
    DefiningAResponseType,
    UsingReqwestAndAsync,
    ManagingDataFetchingWithUseResource,
}
impl std::str::FromStr for GuideDataFetchingSection {
    type Err = GuideDataFetchingSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "fetching-data" => Ok(Self::FetchingData),
            "adding-dependencies" => Ok(Self::AddingDependencies),
            "defining-a-response-type" => Ok(Self::DefiningAResponseType),
            "using-reqwest-and-async" => Ok(Self::UsingReqwestAndAsync),
            "managing-data-fetching-with-use-resource" => {
                Ok(Self::ManagingDataFetchingWithUseResource)
            }
            _ => Err(GuideDataFetchingSectionParseError),
        }
    }
}
impl std::fmt::Display for GuideDataFetchingSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::FetchingData => f.write_str("fetching-data"),
            Self::AddingDependencies => f.write_str("adding-dependencies"),
            Self::DefiningAResponseType => f.write_str("defining-a-response-type"),
            Self::UsingReqwestAndAsync => f.write_str("using-reqwest-and-async"),
            Self::ManagingDataFetchingWithUseResource => {
                f.write_str("managing-data-fetching-with-use-resource")
            }
        }
    }
}
#[derive(Debug)]
pub struct GuideDataFetchingSectionParseError;
impl std::fmt::Display for GuideDataFetchingSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuideDataFetchingSectionfetching-data, adding-dependencies, defining-a-response-type, using-reqwest-and-async, managing-data-fetching-with-use-resource",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuideDataFetchingSectionParseError {}
#[component(no_case_check)]
pub fn GuideDataFetching(section: GuideDataFetchingSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "fetching-data",
            Link {
                to: BookRoute::GuideDataFetching {
                    section: GuideDataFetchingSection::FetchingData,
                },
                class: "header",
                "Fetching Data"
            }
        }
        p {
            "Our "
            em { "HotDog" }
            " app has some basic interactivity but does not yet fetch new dog images. In this chapter, we'll interact with async and fetching data from an API."
        }
        h2 { id: "adding-dependencies",
            Link {
                to: BookRoute::GuideDataFetching {
                    section: GuideDataFetchingSection::AddingDependencies,
                },
                class: "header",
                "Adding Dependencies"
            }
        }
        p {
            "Dioxus does not provide any built-in utilities for fetching data. Crates like "
            Link { to: "https://github.com/marc2332/dioxus-query", "dioxus-query" }
            " exist, but for this tutorial we'll implement data-fetching from scratch."
        }
        p {
            "First, we need to add two new dependencies to our app: "
            Link { to: "https://crates.io/crates/serde", "serde" }
            " and "
            Link { to: "https://crates.io/crates/reqwest", "reqwest" }
            "."
        }
        ul {
            li { "Reqwest provides an HTTP client for fetching." }
            li { "Serde will let us derive a JSON Deserializer to decode the response." }
        }
        p {
            "In a new terminal window, add these crates to your app with  "
            code { "cargo add" }
            "."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">cargo add reqwest </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">features json\n</span><span style=\"color:#f8f8f2;\">cargo add serde </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">features derive</span></pre>\n" }
        h2 { id: "defining-a-response-type",
            Link {
                to: BookRoute::GuideDataFetching {
                    section: GuideDataFetchingSection::DefiningAResponseType,
                },
                class: "header",
                "Defining a Response Type"
            }
        }
        p {
            "We'll be using the amazing "
            Link { to: "https://dog.ceo/dog-api/", "dog.ceo/dog-api" }
            " to fetch images of dogs for "
            em { "HotDog" }
            ". Fortunately, the API response is quite simple to deserialize."
        }
        p {
            "Let's create a new Rust struct that matches the format of the API and derive  "
            code { "Deserialize" }
            " for it."
        }
        p { "The Dog API docs outline a sample API response:" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#ffee99;\">&quot;message&quot;</span><span style=\"color:#f8f8f2;\">: </span><span style=\"color:#ffee99;\">&quot;https://images.dog.ceo/breeds/leonberg/n02111129_974.jpg&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#ffee99;\">&quot;status&quot;</span><span style=\"color:#f8f8f2;\">: </span><span style=\"color:#ffee99;\">&quot;success&quot;\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "Our Rust struct needs to match that format, though for now we'll only include the \"message\" field."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(serde::Deserialize)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">DogApi {{\n</span><span style=\"color:#f8f8f2;\">\tmessage: String,\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        h2 { id: "using-reqwest-and-async",
            Link {
                to: BookRoute::GuideDataFetching {
                    section: GuideDataFetchingSection::UsingReqwestAndAsync,
                },
                class: "header",
                "Using reqwest and async"
            }
        }
        p {
            "Dioxus has stellar support for asynchronous Rust. We can simply convert our  "
            code { "onclick" }
            " handler to be  "
            code { "async" }
            " and then set the  "
            code { "img_src" }
            " after the future has resolved."
        }
        p {
            video {
                src: asset!("/assets/06_docs/fetch-dog.mp4"),
                alt: "Dog Fetching",
                title: "",
                autoplay: true,
                muted: true,
                r#loop: true,
                playsinline: true,
                preload: "metadata",
            }
        }
        p {
            "The changes to our code are quite simple - just add the  "
            code { "reqwest::get" }
            " call and then call  "
            code { ".set()" }
            " on  "
            code { "img_src" }
            " with the result."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">DogView</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> img_src </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ffee99;\">&quot;&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">());\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> fetch_new </span><span style=\"color:#f92672;\">= move |_|</span><span style=\"color:#f8f8f2;\"> async </span><span style=\"color:#f92672;\">move </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> response </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">reqwest::get(</span><span style=\"color:#ffee99;\">&quot;https://dog.ceo/api/breeds/image/random&quot;</span><span style=\"color:#f8f8f2;\">)\n</span><span style=\"color:#f8f8f2;\">            .await\n</span><span style=\"color:#f8f8f2;\">            .</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">            .json::&lt;DogApi&gt;()\n</span><span style=\"color:#f8f8f2;\">            .await\n</span><span style=\"color:#f8f8f2;\">\t\t\t.</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        img_src.</span><span style=\"color:#66d9ef;\">set</span><span style=\"color:#f8f8f2;\">(response.message);\n</span><span style=\"color:#f8f8f2;\">    }};\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// ..\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ id: </span><span style=\"color:#ffee99;\">&quot;dogview&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            img {{ src: </span><span style=\"color:#ffee99;\">&quot;{{img_src}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">        div {{ id: </span><span style=\"color:#ffee99;\">&quot;buttons&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#8c8c8c;\">// ..\n</span><span style=\"color:#f8f8f2;\">            button {{ onclick: fetch_new, id: </span><span style=\"color:#ffee99;\">&quot;save&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;save!&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        p {
            "Dioxus automatically calls  "
            code { "dioxus::spawn" }
            " on asynchronous closures. You can also use  "
            code { "dioxus::spawn" }
            " to perform async work "
            em { "without" }
            " async closures - just call "
            code { "spawn()" }
            " on any async block."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    button {{\n</span><span style=\"color:#f8f8f2;\">        onclick: </span><span style=\"color:#f92672;\">move |_| </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">            dioxus::spawn(async </span><span style=\"color:#f92672;\">move </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">                </span><span style=\"color:#8c8c8c;\">// do some async work...\n</span><span style=\"color:#f8f8f2;\">            }});\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "The futures passed to  "
            code { "dioxus::spawn" }
            " must not contain latent references to data outside the async block. Data that is  "
            code { "Copy" }
            " "
            em { "can" }
            " be captured by async blocks, but all other data must be "
            em { "moved" }
            ", usually by calling "
            code { ".clone()" }
            "."
        }
        h2 { id: "managing-data-fetching-with-use-resource",
            Link {
                to: BookRoute::GuideDataFetching {
                    section: GuideDataFetchingSection::ManagingDataFetchingWithUseResource,
                },
                class: "header",
                "Managing Data Fetching with use_resource"
            }
        }
        p {
            "Eventually, using bare  "
            code { "async" }
            " calls might lead to race conditions and weird state bugs. For example, if the user clicks the "
            em { "fetch" }
            " button too quickly, then two requests will be made in parallel. If the request is updating data somewhere else, the wrong request might finish early and causes a race condition."
        }
        p {
            "In Dioxus, "
            em { "Resources" }
            " are pieces of state whose value is dependent on the completion of some asynchronous work. The "
            code { "use_resource" }
            " hook provides a "
            code { "Resource" }
            " object with helpful methods to start, stop, pause, and modify the asynchronous state."
        }
        p { "Let's change our component to use a resource instead:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">DogView</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> img_src </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_resource</span><span style=\"color:#f8f8f2;\">(|| async </span><span style=\"color:#f92672;\">move </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        reqwest::get(</span><span style=\"color:#ffee99;\">&quot;https://dog.ceo/api/breeds/image/random&quot;</span><span style=\"color:#f8f8f2;\">)\n</span><span style=\"color:#f8f8f2;\">            .await\n</span><span style=\"color:#f8f8f2;\">            .</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">            .json::&lt;DogApi&gt;()\n</span><span style=\"color:#f8f8f2;\">            .await\n</span><span style=\"color:#f8f8f2;\">            .</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">            .message\n</span><span style=\"color:#f8f8f2;\">    }});\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ id: </span><span style=\"color:#ffee99;\">&quot;dogview&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            img {{ src: img_src.</span><span style=\"color:#66d9ef;\">cloned</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#66d9ef;\">unwrap_or_default</span><span style=\"color:#f8f8f2;\">() }}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">        div {{ id: </span><span style=\"color:#ffee99;\">&quot;buttons&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            button {{ onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> img_src.</span><span style=\"color:#66d9ef;\">restart</span><span style=\"color:#f8f8f2;\">(), id: </span><span style=\"color:#ffee99;\">&quot;skip&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;skip&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">            button {{ onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> img_src.</span><span style=\"color:#66d9ef;\">restart</span><span style=\"color:#f8f8f2;\">(), id: </span><span style=\"color:#ffee99;\">&quot;save&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;save!&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        p {
            "Resources are very powerful: they integrate with Suspense, Streaming HTML, reactivity, and more."
        }
        p {
            "The details of the  "
            code { "Resource" }
            " API are not terribly important right now, but you'll be using Resources frequently in larger apps, so it's a good idea to "
            Link {
                to: BookRoute::ReferenceUseResource {
                    section: ReferenceUseResourceSection::Empty,
                },
                "read the docs"
            }
            "."
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuideBackendSection {
    #[default]
    Empty,
    AddingABackend,
    EnablingFullstack,
    ServerFunctionsAnInlineRpcSystem,
    TheClientserverSplit,
    ManagingDependencies,
    OurHotdogServerFunction,
    CallingTheServerFunction,
}
impl std::str::FromStr for GuideBackendSection {
    type Err = GuideBackendSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "adding-a-backend" => Ok(Self::AddingABackend),
            "enabling-fullstack" => Ok(Self::EnablingFullstack),
            "server-functions-an-inline-rpc-system" => Ok(Self::ServerFunctionsAnInlineRpcSystem),
            "the-clientserver-split" => Ok(Self::TheClientserverSplit),
            "managing-dependencies" => Ok(Self::ManagingDependencies),
            "our-hotdog-server-function" => Ok(Self::OurHotdogServerFunction),
            "calling-the-server-function" => Ok(Self::CallingTheServerFunction),
            _ => Err(GuideBackendSectionParseError),
        }
    }
}
impl std::fmt::Display for GuideBackendSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::AddingABackend => f.write_str("adding-a-backend"),
            Self::EnablingFullstack => f.write_str("enabling-fullstack"),
            Self::ServerFunctionsAnInlineRpcSystem => {
                f.write_str("server-functions-an-inline-rpc-system")
            }
            Self::TheClientserverSplit => f.write_str("the-clientserver-split"),
            Self::ManagingDependencies => f.write_str("managing-dependencies"),
            Self::OurHotdogServerFunction => f.write_str("our-hotdog-server-function"),
            Self::CallingTheServerFunction => f.write_str("calling-the-server-function"),
        }
    }
}
#[derive(Debug)]
pub struct GuideBackendSectionParseError;
impl std::fmt::Display for GuideBackendSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuideBackendSectionadding-a-backend, enabling-fullstack, server-functions-an-inline-rpc-system, the-clientserver-split, managing-dependencies, our-hotdog-server-function, calling-the-server-function",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuideBackendSectionParseError {}
#[component(no_case_check)]
pub fn GuideBackend(section: GuideBackendSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "adding-a-backend",
            Link {
                to: BookRoute::GuideBackend {
                    section: GuideBackendSection::AddingABackend,
                },
                class: "header",
                "Adding a Backend"
            }
        }
        p {
            "Dioxus is a "
            em { "fullstack" }
            " framework, meaning it allows you to seamlessly build your frontend alongside your backend."
        }
        p {
            "We provide a number of utilities like "
            em { "Server Functions" }
            ", "
            em { "Server Futures" }
            ", and "
            em { "Server State" }
            " for you to integrate into your apps. In this chapter, we'll cover loading and saving state to our backend with "
            em { "Server Functions" }
            ". For an in-depth guide on fullstack, check out the dedicated "
            Link {
                to: BookRoute::GuidesFullstackIndex {
                    section: GuidesFullstackIndexSection::Empty,
                },
                "Fullstack Guide"
            }
            "."
        }
        h2 { id: "enabling-fullstack",
            Link {
                to: BookRoute::GuideBackend {
                    section: GuideBackendSection::EnablingFullstack,
                },
                class: "header",
                "Enabling Fullstack"
            }
        }
        p {
            "Before we can start using server functions, we need to enable the \"fullstack\" feature on Dioxus in our Cargo.toml."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[dependencies]\n</span><span style=\"color:#f8f8f2;\">dioxus </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">{{ version </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;0.6.0&quot;</span><span style=\"color:#f8f8f2;\">, features </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;fullstack&quot;</span><span style=\"color:#f8f8f2;\">] }}</span></pre>\n" }
        p { "We also need to add the \"server\" feature to our app's features, also in the Cargo.toml" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[features]\n</span><span style=\"color:#f8f8f2;\">default </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;web&quot;</span><span style=\"color:#f8f8f2;\">]\n</span><span style=\"color:#f8f8f2;\">web </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;dioxus/web&quot;</span><span style=\"color:#f8f8f2;\">]\n</span><span style=\"color:#f8f8f2;\">desktop </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;dioxus/desktop&quot;</span><span style=\"color:#f8f8f2;\">]\n</span><span style=\"color:#f8f8f2;\">mobile </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;dioxus/mobile&quot;</span><span style=\"color:#f8f8f2;\">]\n</span><span style=\"color:#f8f8f2;\">server </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;dioxus/server&quot;</span><span style=\"color:#f8f8f2;\">] </span><span style=\"color:#f92672;\"># &lt;-----</span><span style=\"color:#f8f8f2;\"> add this additional platform</span></pre>\n",
        }
        p {
            "If you selected "
            em { "yes" }
            " to the \"use fullstack?\" prompt when creating your app, you will already have this set up!"
        }
        blockquote {
            p {
                "📣 Unfortunately,  "
                code { "dx" }
                " doesn't know how to hot-reload this change, so we'll need to kill our currently running  "
                code { "dx serve" }
                " process and launch it again."
            }
        }
        p {
            "Give your app a moment to build again and make sure that the \"fullstack\" feature is enabled in  "
            code { "dx serve" }
            "."
        }
        p {
            img {
                src: asset!(
                    "/assets/06_docs/serve_with_fullstack.png", ImageAssetOptions::new().with_avif()
                ),
                alt: "Fullstack Enabled",
                title: "",
            }
        }
        h2 { id: "server-functions-an-inline-rpc-system",
            Link {
                to: BookRoute::GuideBackend {
                    section: GuideBackendSection::ServerFunctionsAnInlineRpcSystem,
                },
                class: "header",
                "Server Functions: an inline RPC system"
            }
        }
        p {
            "Dioxus integrates with the "
            Link { to: "https://crates.io/crates/server_fn", "server_fn" }
            " crate to provide a simple inline communication system for your apps. The server_fn crate makes it easy to build your app's backend with just basic Rust functions. Server Functions are "
            code { "async" }
            " functions annotated with the "
            code { "#[server]" }
            " attribute."
        }
        p { "A typical server function looks like this:" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[server]\n</span><span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">save_dog</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">image</span><span style=\"color:#f8f8f2;\">: String) -&gt; Result&lt;(), ServerFnError&gt; {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">Ok</span><span style=\"color:#f8f8f2;\">(())\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "Every server function is an async function that takes some parameters and returns a  "
            code { "Result<(), ServerFnError>" }
            ". Whenever the client calls the server function, it sends an HTTP request to a corresponding endpoint on the server. The parameters of the server function are serialized as the body of the HTTP request. As a result, each argument must be serializable."
        }
        p {
            "On the client, the server function expands to a  "
            code { "reqwest" }
            " call:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// on the client:\n</span><span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">save_dog</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">image</span><span style=\"color:#f8f8f2;\">: String) -&gt; Result&lt;(), ServerFnError&gt; {{\n</span><span style=\"color:#f8f8f2;\">    reqwest::Client::new()\n</span><span style=\"color:#f8f8f2;\">        .</span><span style=\"color:#66d9ef;\">post</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;http://localhost:8080/api/save_dog&quot;</span><span style=\"color:#f8f8f2;\">)\n</span><span style=\"color:#f8f8f2;\">        .</span><span style=\"color:#66d9ef;\">json</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">&amp;</span><span style=\"color:#f8f8f2;\">image)\n</span><span style=\"color:#f8f8f2;\">        .</span><span style=\"color:#66d9ef;\">send</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">        .await\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        p {
            "On the server, the server function expands to an "
            Link { to: "https://github.com/tokio-rs/axum", "axum" }
            " handler:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// on the server:\n</span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">SaveDogArgs {{\n</span><span style=\"color:#f8f8f2;\">    image: String,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">save_dog</span><span style=\"color:#f8f8f2;\">(Json(</span><span style=\"font-style:italic;color:#fd971f;\">args</span><span style=\"color:#f8f8f2;\">): Json&lt;SaveDogArgs&gt;) -&gt; Result&lt;(), ServerFnError&gt; {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">Ok</span><span style=\"color:#f8f8f2;\">(())\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "When  "
            code { "dioxus::launch" }
            " is called, the server functions are automatically registered for you and set up as an Axum router."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">launch</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">config</span><span style=\"color:#f8f8f2;\">: Config, </span><span style=\"font-style:italic;color:#fd971f;\">app</span><span style=\"color:#f8f8f2;\">: Component&lt;()&gt;) {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// register server functions\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> router </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">axum::Router::new().</span><span style=\"color:#66d9ef;\">serve_dioxus_application</span><span style=\"color:#f8f8f2;\">(config, app);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// start server\n</span><span style=\"color:#f8f8f2;\">    axum::serve(listener, router).await\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        p {
            "As of Dioxus 0.6, we only support the  "
            code { "axum" }
            " server framework. We plan to build additional server features in the future and  only support  "
            code { "axum" }
            " to ship faster."
        }
        p {
            "In some cases, the  "
            code { "dioxus::launch" }
            " function might be too limiting for your use-case on the server. You can easily drop down to axum by changing your main.rs. The  "
            code { "dioxus::launch" }
            " function also handles setting up logging and reading environment variables, which you will have to handle yourself."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">main</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">if </span><span style=\"color:#f8f8f2;\">cfg!(feature </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;server&quot;</span><span style=\"color:#f8f8f2;\">) {{\n</span><span style=\"color:#f8f8f2;\">        tokio::runtime::Runtime::new()\n</span><span style=\"color:#f8f8f2;\">            .</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">            .</span><span style=\"color:#66d9ef;\">block_on</span><span style=\"color:#f8f8f2;\">(launch_server);\n</span><span style=\"color:#f8f8f2;\">    }} </span><span style=\"color:#f92672;\">else </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        dioxus::launch(app);\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[cfg(feature </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;server&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">launch_server</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Connect to dioxus&#39; logging infrastructure\n</span><span style=\"color:#f8f8f2;\">    dioxus::logger::initialize_default();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Connect to the IP and PORT env vars passed by the Dioxus CLI (or your dockerfile)\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> socket_addr </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">dioxus_cli_config::fullstack_address_or_localhost();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Build a custom axum router\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> router </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">axum::Router::new()\n</span><span style=\"color:#f8f8f2;\">        .</span><span style=\"color:#66d9ef;\">serve_dioxus_application</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;&quot;</span><span style=\"color:#f8f8f2;\">, ServeConfigBuilder::new(app, ()))\n</span><span style=\"color:#f8f8f2;\">        .</span><span style=\"color:#66d9ef;\">into_make_service</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// And launch it!\n</span><span style=\"color:#f8f8f2;\">    axum::Server::bind(</span><span style=\"color:#f92672;\">&amp;</span><span style=\"color:#f8f8f2;\">addr).</span><span style=\"color:#66d9ef;\">serve</span><span style=\"color:#f8f8f2;\">(router).await\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        h2 { id: "the-clientserver-split",
            Link {
                to: BookRoute::GuideBackend {
                    section: GuideBackendSection::TheClientserverSplit,
                },
                class: "header",
                "The Client/Server split"
            }
        }
        p {
            "When Dioxus builds your fullstack apps, it actually creates two separate applications: the server and the client. To achieve this,  "
            code { "dx" }
            " passes different features to each build."
        }
        ul {
            li {
                "The client is built with "
                code { "--feature web" }
            }
            li {
                "The server is built with "
                code { "--feature server" }
            }
        }
        p {
            img {
                src: asset!("/assets/06_docs/server_split.png", ImageAssetOptions::new().with_avif()),
                alt: "Server Client Split",
                title: "",
            }
        }
        p {
            "When embedding server code in our apps, we need to be careful about which code gets compiled. The body of the server function is designed to only be "
            em { "executed on the server" }
            " - not the client. Any code configured by the "
            code { "\"server\"" }
            " feature will not be present in the final app. Conversely, any code not configured by the "
            code { "\"server\"" }
            " feature "
            em { "will" }
            " make it into the final app."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// ❌ this will leak your DB_PASSWORD to your client app!\n</span><span style=\"font-style:italic;color:#66d9ef;\">static </span><span style=\"color:#ff80f4;\">DB_PASSWORD</span><span style=\"color:#f8f8f2;\">: </span><span style=\"color:#f92672;\">&amp;</span><span style=\"font-style:italic;color:#66d9ef;\">str </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;1234&quot;</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">app</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{ }}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[server]\n</span><span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">DoThing</span><span style=\"color:#f8f8f2;\">() -&gt; Result&lt;(), ServerFnError&gt; {{\n</span><span style=\"color:#f8f8f2;\">    db.</span><span style=\"color:#66d9ef;\">connect</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ff80f4;\">DB_PASSWORD</span><span style=\"color:#f8f8f2;\">).await\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// ...\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        p {
            "Instead, we recommend placing server-only code within modules configured for the  "
            code { "\"server\"" }
            " feature."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// ✅ code in this module can only be accessed on the server\n</span><span style=\"color:#f8f8f2;\">#[cfg(feature </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;server&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">mod </span><span style=\"color:#f8f8f2;\">server_utils {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">static </span><span style=\"color:#ff80f4;\">DB_PASSWORD</span><span style=\"color:#f8f8f2;\">: </span><span style=\"color:#f92672;\">&amp;</span><span style=\"font-style:italic;color:#66d9ef;\">str </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;1234&quot;</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "While Dioxus expects a \"server\" feature, it does not expect a \"client\" feature. It is assumed that all client code will make it to the server. However, some libraries like web-sys only work when running in the browser, so make sure to not run specific client code in your server functions or before your  "
            code { "launch" }
            "."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[server]\n</span><span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">DoThing</span><span style=\"color:#f8f8f2;\">() -&gt; Result&lt;(), ServerFnError&gt; {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// ❌ attempting to use web_sys on the server will panic!\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> document </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">web_sys::document();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// ..\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        h2 { id: "managing-dependencies",
            Link {
                to: BookRoute::GuideBackend {
                    section: GuideBackendSection::ManagingDependencies,
                },
                class: "header",
                "Managing Dependencies"
            }
        }
        p {
            "Some dependencies like "
            Link { to: "https://github.com/tokio-rs/tokio", "Tokio" }
            " only compile properly when targeting native platforms. Other dependencies like "
            Link { to: "https://github.com/jni-rs/jni-sys", "jni-sys" }
            " only work properly when running on a specific platform. In these cases, you'll want to make sure that these dependencies are only compiled when a particular feature is enabled. To do this, we can use Rust's "
            code { "optional" }
            " "
            Link { to: "https://doc.rust-lang.org/cargo/reference/features.html#optional-dependencies",
                "flag on dependencies in our Cargo.toml"
            }
            "."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[dependencies]\n</span><span style=\"color:#f8f8f2;\">tokio </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">{{ version </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;1&quot;</span><span style=\"color:#f8f8f2;\">, optional </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">true </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">[features]\n</span><span style=\"color:#f8f8f2;\">default </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[]\n</span><span style=\"color:#f8f8f2;\">server </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;dep:tokio&quot;</span><span style=\"color:#f8f8f2;\">]</span></pre>\n" }
        p {
            "Eventually, if your project becomes large enough, you might want to pull your server functions out into their own crate to be used across different apps. We'd create a  "
            code { "server" }
            " crate in our workspace:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">├── Cargo.toml\n</span><span style=\"color:#f8f8f2;\">└── crates\n</span><span style=\"color:#f8f8f2;\"> \u{a0}\u{a0} ├── dashboard\n</span><span style=\"color:#f8f8f2;\"> \u{a0}\u{a0} ├── marketplace\n</span><span style=\"color:#f8f8f2;\"> \u{a0}\u{a0} └── server</span></pre>\n" }
        p {
            "And then we'd import the server functions in our app, disabling their  "
            code { "\"server\"" }
            " feature."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[dependencies]\n</span><span style=\"color:#f8f8f2;\">server </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">{{ workspace </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">true</span><span style=\"color:#f8f8f2;\">, default</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">features </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">false </span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "We provide a longer guide about the details of managing dependencies across the server and the client "
            Link {
                to: BookRoute::GuidesFullstackManagingDependencies {
                    section: GuidesFullstackManagingDependenciesSection::Empty,
                },
                "here"
            }
            "."
        }
        h2 { id: "our-hotdog-server-function",
            Link {
                to: BookRoute::GuideBackend {
                    section: GuideBackendSection::OurHotdogServerFunction,
                },
                class: "header",
                "Our HotDog Server Function"
            }
        }
        p {
            "Revisiting our HotDog app, let's create a new server function that saves our favorite dog to a file called  "
            code { "dogs.txt" }
            ". In production, you'd want to use a proper database as covered in "
            Link {
                to: BookRoute::GuideDatabases {
                    section: GuideDatabasesSection::Empty,
                },
                "the next chapter"
            }
            ", but for now we'll use a simple file to test things out."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// Expose a `save_dog` endpoint on our server that takes an &quot;image&quot; parameter\n</span><span style=\"color:#f8f8f2;\">#[server]\n</span><span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">save_dog</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">image</span><span style=\"color:#f8f8f2;\">: String) -&gt; Result&lt;(), ServerFnError&gt; {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">std::io::Write;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Open the `dogs.txt` file in append-only mode, creating it if it doesn&#39;t exist;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> file </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">std::fs::OpenOptions::new()\n</span><span style=\"color:#f8f8f2;\">        .</span><span style=\"color:#66d9ef;\">write</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ff80f4;\">true</span><span style=\"color:#f8f8f2;\">)\n</span><span style=\"color:#f8f8f2;\">        .</span><span style=\"color:#66d9ef;\">append</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ff80f4;\">true</span><span style=\"color:#f8f8f2;\">)\n</span><span style=\"color:#f8f8f2;\">        .</span><span style=\"color:#66d9ef;\">create</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ff80f4;\">true</span><span style=\"color:#f8f8f2;\">)\n</span><span style=\"color:#f8f8f2;\">        .</span><span style=\"color:#66d9ef;\">open</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;dogs.txt&quot;</span><span style=\"color:#f8f8f2;\">)\n</span><span style=\"color:#f8f8f2;\">        .</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// And then write a newline to it with the image url\n</span><span style=\"color:#f8f8f2;\">    file.</span><span style=\"color:#66d9ef;\">write_fmt</span><span style=\"color:#f8f8f2;\">(format_args!(</span><span style=\"color:#ffee99;\">&quot;{{image}}</span><span style=\"color:#ff80f4;\">\\n</span><span style=\"color:#ffee99;\">&quot;</span><span style=\"color:#f8f8f2;\">));\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">Ok</span><span style=\"color:#f8f8f2;\">(())\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        h3 { id: "calling-the-server-function",
            Link {
                to: BookRoute::GuideBackend {
                    section: GuideBackendSection::CallingTheServerFunction,
                },
                class: "header",
                "Calling the server function"
            }
        }
        p { "Now, in our client code, we can actually call the server function." }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">DogView</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> img_src </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_resource</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#8c8c8c;\">/**/</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// ...\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// ...\n</span><span style=\"color:#f8f8f2;\">        div {{ id: </span><span style=\"color:#ffee99;\">&quot;buttons&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#8c8c8c;\">// ...\n</span><span style=\"color:#f8f8f2;\">            button {{\n</span><span style=\"color:#f8f8f2;\">                id: </span><span style=\"color:#ffee99;\">&quot;save&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">                onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> async </span><span style=\"color:#f92672;\">move </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">                    </span><span style=\"color:#8c8c8c;\">// Clone the current image\n</span><span style=\"color:#f8f8f2;\">                    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> current </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> img_src.</span><span style=\"color:#66d9ef;\">cloned</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">                    </span><span style=\"color:#8c8c8c;\">// Start fetching a new image\n</span><span style=\"color:#f8f8f2;\">                    img_src.</span><span style=\"color:#66d9ef;\">restart</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">                    </span><span style=\"color:#8c8c8c;\">// And call the `save_dog` server function\n</span><span style=\"color:#f8f8f2;\">                    </span><span style=\"color:#66d9ef;\">save_dog</span><span style=\"color:#f8f8f2;\">(current).await;\n</span><span style=\"color:#f8f8f2;\">                }},\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">                </span><span style=\"color:#ffee99;\">&quot;save!&quot;\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        p { "Wow, our app is really coming together!" }
        p {
            video {
                src: asset!("/assets/06_docs/dog-save-serverfn.mp4"),
                alt: "Working Server Functions",
                title: "",
                autoplay: true,
                muted: true,
                r#loop: true,
                playsinline: true,
                preload: "metadata",
            }
        }
        p {
            "Server functions are extremely capable and can even be used during server-side-rendering. Check out the complete "
            Link {
                to: BookRoute::GuidesFullstackIndex {
                    section: GuidesFullstackIndexSection::Empty,
                },
                "fullstack guide"
            }
            " for more information."
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuideDatabasesSection {
    #[default]
    Empty,
    WorkingWithDatabases,
    ChoosingADatabase,
    AddingDatabaseOperationsToHotdog,
    NotesOnDatabasesAndRust,
    ChoosingADatabaseProvider,
}
impl std::str::FromStr for GuideDatabasesSection {
    type Err = GuideDatabasesSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "working-with-databases" => Ok(Self::WorkingWithDatabases),
            "choosing-a-database" => Ok(Self::ChoosingADatabase),
            "adding-database-operations-to-hotdog" => Ok(Self::AddingDatabaseOperationsToHotdog),
            "notes-on-databases-and-rust" => Ok(Self::NotesOnDatabasesAndRust),
            "choosing-a-database-provider" => Ok(Self::ChoosingADatabaseProvider),
            _ => Err(GuideDatabasesSectionParseError),
        }
    }
}
impl std::fmt::Display for GuideDatabasesSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::WorkingWithDatabases => f.write_str("working-with-databases"),
            Self::ChoosingADatabase => f.write_str("choosing-a-database"),
            Self::AddingDatabaseOperationsToHotdog => {
                f.write_str("adding-database-operations-to-hotdog")
            }
            Self::NotesOnDatabasesAndRust => f.write_str("notes-on-databases-and-rust"),
            Self::ChoosingADatabaseProvider => f.write_str("choosing-a-database-provider"),
        }
    }
}
#[derive(Debug)]
pub struct GuideDatabasesSectionParseError;
impl std::fmt::Display for GuideDatabasesSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuideDatabasesSectionworking-with-databases, choosing-a-database, adding-database-operations-to-hotdog, notes-on-databases-and-rust, choosing-a-database-provider",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuideDatabasesSectionParseError {}
#[component(no_case_check)]
pub fn GuideDatabases(section: GuideDatabasesSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "working-with-databases",
            Link {
                to: BookRoute::GuideDatabases {
                    section: GuideDatabasesSection::WorkingWithDatabases,
                },
                class: "header",
                "Working with Databases"
            }
        }
        p {
            "Our HotDog app is coming together nicely! We implemented a very simple backend that saves the user's favorite dog images to a local \"dogs.txt\" file."
        }
        p {
            "In practice, you will likely want to store data in a proper database. Modern databases are "
            em { "much" }
            " more powerful than a text file!"
        }
        p {
            "If you already have a good understanding of databases, jump ahead to the "
            Link {
                to: BookRoute::GuideDatabases {
                    section: GuideDatabasesSection::AddingDatabaseOperationsToHotdog,
                },
                "section where we integrate Sqlite with HotDog"
            }
            ";"
        }
        h2 { id: "choosing-a-database",
            Link {
                to: BookRoute::GuideDatabases {
                    section: GuideDatabasesSection::ChoosingADatabase,
                },
                class: "header",
                "Choosing a Database"
            }
        }
        p {
            "In today's age of app development, there are "
            em { "many" }
            " databases to choose from, each with their own strengths, weaknesses, and tradeoffs to consider. For apps with just a few users, it is fine to select a \"simpler\" database that's easier to manage. For apps with many users, you might want to consider more advanced databases with additional tooling to meet stricter requirements."
        }
        p { "Here is a (incomplete!) list of databases and a short summary of each:" }
        ul {
            li {
                Link { to: "https://www.postgresql.org", "PostgreSQL" }
                ": Advanced database known for its powerful plugin system."
            }
            li {
                Link { to: "https://www.mysql.com", "MySQL" }
                ": World's most popular open source database good for all apps."
            }
            li {
                Link { to: "https://www.sqlite.org", "SQLite" }
                ": Simple file-based engine known for its reliability and embeddability."
            }
            li {
                Link { to: "https://www.oracle.com/database/", "Oracle" }
                ": Advanced commercial database known for its enterprise features."
            }
            li {
                Link { to: "http://redis.io", "Redis" }
                ": Simple key-value database known for its great performancel."
            }
            li {
                Link { to: "https://www.mongodb.com/", "MongoDB" }
                ": A database ideal for data that doesn't fit into rows and columns."
            }
            li {
                Link { to: "https://surrealdb.com/", "SurrealDB" }
                ": A new \"all-in-one\" database that combines many models."
            }
            li {
                Link { to: "https://www.cockroachlabs.com", "CockroachDB" }
                ": Distributed SQL database designed for high-availability."
            }
            li {
                Link { to: "https://dev.to/shreyvijayvargiya/list-of-45-databases-in-the-world-57e8",
                    "and many more"
                }
                "!"
            }
        }
        p {
            "There are many different types of databases, each good at different tasks. These might include:"
        }
        ul {
            li {
                strong { "Relational" }
                ": traditional row/column/table approach."
            }
            li {
                strong { "Document" }
                ": storing unstructured or loosely structured blobs of data."
            }
            li {
                strong { "Timeseries" }
                ": storing and querying lots of data that changes over time."
            }
            li {
                strong { "Graph" }
                ": querying data based on its connections to other data."
            }
            li {
                strong { "Key-value" }
                ": storing just key-value pairs - a fast concurrent HashMap."
            }
            li {
                strong { "In-memory" }
                ": designed for low-latency operations usually used as a cache."
            }
            li {
                strong { "Embedded" }
                ": a database that is shipped "
                em { "inside" }
                " your app."
            }
        }
        p {
            "For most apps - unless you have specific requirements - we recommend a mainstream relational database like PostgreSQL or MySQL."
        }
        blockquote {
            p {
                "📣 PostgreSQL is currently a very interesting option: it can be extended to support time-series, vector, graph, search and geo-spatial data with plugins."
            }
        }
        p {
            "In some cases, you might want a database that's specific to "
            em { "just one app instance" }
            " or the "
            em { "user's machine" }
            ". In these cases, you'll want to use an embedded database like "
            Link { to: "https://www.sqlite.org", "SQLite" }
            " or "
            Link { to: "https://rocksdb.org", "RocksDB" }
            "."
        }
        h2 { id: "adding-database-operations-to-hotdog",
            Link {
                to: BookRoute::GuideDatabases {
                    section: GuideDatabasesSection::AddingDatabaseOperationsToHotdog,
                },
                class: "header",
                "Adding Database operations to HotDog"
            }
        }
        p {
            "For "
            em { "HotDog" }
            ", we're going to use Sqlite. "
            em { "HotDog" }
            " is a very simple app and will only ever have one user: you!"
        }
        p {
            "To add sqlite functionality to "
            em { "HotDog" }
            ", we'll pull in the "
            code { "rusqlite" }
            " crate. Note that "
            code { "rusqlite" }
            " is only meant to be compiled on the server, so we'll feature gate it behind the "
            code { "\"server\"" }
            " feature in our Cargo.toml."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[dependencies]\n</span><span style=\"color:#f92672;\"># ...</span><span style=\"color:#f8f8f2;\">.\n</span><span style=\"color:#f8f8f2;\">rusqlite </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">{{ version </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;0.32.1&quot;</span><span style=\"color:#f8f8f2;\">, optional </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">true </span><span style=\"color:#f8f8f2;\">}} </span><span style=\"color:#f92672;\"># &lt;---</span><span style=\"color:#f8f8f2;\"> add rusqlite\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">[features]\n</span><span style=\"color:#f92672;\"># ...</span><span style=\"color:#f8f8f2;\">.\n</span><span style=\"color:#f8f8f2;\">server </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;dioxus/server&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;dep:rusqlite&quot;</span><span style=\"color:#f8f8f2;\">] </span><span style=\"color:#f92672;\"># &lt;----</span><span style=\"color:#f8f8f2;\"> add dep:rusqlite</span></pre>\n",
        }
        p {
            "To connect to our database, we're going to use the  "
            code { "rusqlite::Connection" }
            ". Rusqlite connections are not thread-safe and must exist once-per-thread, so we'll need to wrap it in a thread_locals."
        }
        p {
            "When the connection is initialized, we'll run a SQL action to create the \"dogs\" table with our data."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// The database is only available to server code\n</span><span style=\"color:#f8f8f2;\">#[cfg(feature </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;server&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">thread_local! {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">static </span><span style=\"color:#ff80f4;\">DB</span><span style=\"color:#f8f8f2;\">: rusqlite::Connection </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// Open the database from the persisted &quot;hotdog.db&quot; file\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> conn </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">rusqlite::Connection::open(</span><span style=\"color:#ffee99;\">&quot;hotdog.db&quot;</span><span style=\"color:#f8f8f2;\">).</span><span style=\"color:#66d9ef;\">expect</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;Failed to open database&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// Create the &quot;dogs&quot; table if it doesn&#39;t already exist\n</span><span style=\"color:#f8f8f2;\">        conn.</span><span style=\"color:#66d9ef;\">execute_batch</span><span style=\"color:#f8f8f2;\">(\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;CREATE TABLE IF NOT EXISTS dogs (\n</span><span style=\"color:#ffee99;\">                id INTEGER PRIMARY KEY,\n</span><span style=\"color:#ffee99;\">                url TEXT NOT NULL\n</span><span style=\"color:#ffee99;\">            );&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">        ).</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// Return the connection\n</span><span style=\"color:#f8f8f2;\">        conn\n</span><span style=\"color:#f8f8f2;\">    }};\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        p {
            "Now, in our  "
            code { "save_dog" }
            " server function, we can use SQL to insert the value into the database:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[server]\n</span><span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">save_dog</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">image</span><span style=\"color:#f8f8f2;\">: String) -&gt; Result&lt;(), ServerFnError&gt; {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#ff80f4;\">DB</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">with</span><span style=\"color:#f8f8f2;\">(|</span><span style=\"font-style:italic;color:#fd971f;\">f</span><span style=\"color:#f8f8f2;\">| f.</span><span style=\"color:#66d9ef;\">execute</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;INSERT INTO dogs (url) VALUES (?1)&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#f92672;\">&amp;</span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#f92672;\">&amp;</span><span style=\"color:#f8f8f2;\">image]))</span><span style=\"color:#f92672;\">?</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">Ok</span><span style=\"color:#f8f8f2;\">(())\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        p {
            "Once the app is launched, you should see a \"hotdog.db\" file in your crate's directory. Let's save a few dog photos and then open the database in a database viewer. If all goes well, you should see the saved dog photos!"
        }
        p {
            video {
                src: asset!("/assets/06_docs/hotdog-db-view.mp4"),
                alt: "Databaseview",
                title: "",
                autoplay: true,
                muted: true,
                r#loop: true,
                playsinline: true,
                preload: "metadata",
            }
        }
        h2 { id: "notes-on-databases-and-rust",
            Link {
                to: BookRoute::GuideDatabases {
                    section: GuideDatabasesSection::NotesOnDatabasesAndRust,
                },
                class: "header",
                "Notes on Databases and Rust"
            }
        }
        p {
            "While there are many database providers, Rust support can be limited. Rust is still a new choice for web development. In this section we'll provide our own (biased!) opinions on what libraries we recommend for interacting with databases."
        }
        p {
            "It's also important to note that several libraries exist at a higher level abstraction than raw SQL. These are called an "
            em { "Object Relationship Mapper (ORM)" }
            ". Rust ORM libraries map the SQL language into ordinary Rust functions. We generally recommend just sticking with SQL, but ORMs can make working writing some queries easier."
        }
        ul {
            li {
                Link { to: "https://github.com/launchbadge/sqlx", "Sqlx" }
                ": A straightforward yet large interface to Postgres, MySql, and Sqlite."
            }
            li {
                Link { to: "https://github.com/SeaQL/sea-orm", "SeaORM" }
                ": An ORM built on top of Sqlx for deriving databases."
            }
            li {
                Link { to: "https://github.com/rusqlite/rusqlite", "rusqlite" }
                ": An intuitive sqlite interface with no special ORM magic."
            }
            li {
                Link { to: "https://github.com/sfackler/rust-postgres", "rust-postgres" }
                ": An interface to Postgres with an API similar to rusqlite."
            }
            li {
                Link { to: "https://github.com/trevyn/turbosql", "Turbosql" }
                ": A "
                em { "very" }
                " terse interface to Sqlite with automatic derives."
            }
        }
        p {
            "We aren't including libraries like "
            Link { to: "http://diesel.rs", "Diesel" }
            " in this list since it seems that the Rust ecosystem has evolved towards newer projects with 1st-class async support."
        }
        p { "There are many libraries we haven't tested yet, but might be worth checking out:" }
        ul {
            li {
                Link { to: "https://github.com/emreyalvac/firebase-rs", "firebase-rs" }
                ": Firebase client crate"
            }
            li {
                Link { to: "https://github.com/supabase-community/postgrest-rs", "postgrest-rs" }
                ": Supabase client crate"
            }
            li {
                Link { to: "https://github.com/mongodb/mongo-rust-driver", "mongo-rust-driver" }
                ": Official MongoDB client crate"
            }
        }
        h2 { id: "choosing-a-database-provider",
            Link {
                to: BookRoute::GuideDatabases {
                    section: GuideDatabasesSection::ChoosingADatabaseProvider,
                },
                class: "header",
                "Choosing a Database Provider"
            }
        }
        p {
            "While there are just a handful of databases you might consider for your app, there are many "
            em { "database providers" }
            ", each with their own strengths and weaknesses. We are not sponsored by any of these providers - this is just a list of providers we have seen in use by Rust apps."
        }
        p {
            "You "
            em { "do not" }
            " need to use a database provider. Databases providers provide paid database hosting. It will cost you money to use these providers! Many have a free tier and some support \"scale-to-zero\" to help you save money on small apps. At any time, you are free to host and manage your own database."
        }
        p { "For popular relational databases:" }
        ul {
            li {
                Link { to: "https://cloud.google.com/products/databases", "GCP" }
                ": Provides AlloyDB (enterprise postgres), CloudSQL (MySql, Postgres), and more."
            }
            li {
                Link { to: "https://aws.amazon.com/products/databases/", "AWS" }
                ": Provides RDS, Aurora, DynamoDB, and more."
            }
            li {
                Link { to: "https://planetscale.com", "PlanetScale" }
                ": Reliable MySQL-compatible database with sharding designed for scale."
            }
            li {
                Link { to: "https://firebase.google.com", "Firebase" }
                ": Google's comprehensive real-time database designed for rapid app development."
            }
            li {
                Link { to: "https://supabase.com", "Supabase" }
                ": Hosted Postgres known for its great dashboard and tooling."
            }
            li {
                Link { to: "https://neon.tech", "Neon" }
                ": Hosted Postgres that separates compute and storage for scale-to-zero apps."
            }
        }
        p { "For Sqlite:" }
        ul {
            li {
                Link { to: "https://fly.io/docs/litefs/", "LiteFS" }
                ": A distributed Sqlite sync engine designed to be used with Fly.io"
            }
            li {
                Link { to: "https://turso.tech", "Turso" }
                ": A \"multi-tenant\" sqlite provider that maintains one isolated database per user"
            }
        }
        p { "The \"scale-to-zero\" relational solutions:" }
        ul {
            li {
                Link { to: "https://aws.amazon.com/rds/aurora/", "AWS Aurora" }
            }
            li {
                Link { to: "https://fly.io/docs/litefs/", "LiteFS" }
            }
        }
        p { "We don't suggest any particular database provider." }
        ul {
            li { "If you have lots of free cloud credits, consider AWS/GCP/Azure." }
            li { "If you want Postgres with a good dashboard, consider Supabase or Neon." }
            li { "If you want a simple experience, consider Turso or LiteFS." }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuideRoutingSection {
    #[default]
    Empty,
    AddingMoreRoutes,
    OrganizingOurProject,
    CreatingARoute,
    RenderingTheRoute,
    RenderingTheNavbarWithALayout,
    AddingAFavoritesRoute,
    OurFavoritesPage,
}
impl std::str::FromStr for GuideRoutingSection {
    type Err = GuideRoutingSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "adding-more-routes" => Ok(Self::AddingMoreRoutes),
            "organizing-our-project" => Ok(Self::OrganizingOurProject),
            "creating-a-route" => Ok(Self::CreatingARoute),
            "rendering-the-route" => Ok(Self::RenderingTheRoute),
            "rendering-the-navbar-with-a-layout" => Ok(Self::RenderingTheNavbarWithALayout),
            "adding-a-favorites-route" => Ok(Self::AddingAFavoritesRoute),
            "our-favorites-page" => Ok(Self::OurFavoritesPage),
            _ => Err(GuideRoutingSectionParseError),
        }
    }
}
impl std::fmt::Display for GuideRoutingSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::AddingMoreRoutes => f.write_str("adding-more-routes"),
            Self::OrganizingOurProject => f.write_str("organizing-our-project"),
            Self::CreatingARoute => f.write_str("creating-a-route"),
            Self::RenderingTheRoute => f.write_str("rendering-the-route"),
            Self::RenderingTheNavbarWithALayout => {
                f.write_str("rendering-the-navbar-with-a-layout")
            }
            Self::AddingAFavoritesRoute => f.write_str("adding-a-favorites-route"),
            Self::OurFavoritesPage => f.write_str("our-favorites-page"),
        }
    }
}
#[derive(Debug)]
pub struct GuideRoutingSectionParseError;
impl std::fmt::Display for GuideRoutingSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuideRoutingSectionadding-more-routes, organizing-our-project, creating-a-route, rendering-the-route, rendering-the-navbar-with-a-layout, adding-a-favorites-route, our-favorites-page",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuideRoutingSectionParseError {}
#[component(no_case_check)]
pub fn GuideRouting(section: GuideRoutingSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "adding-more-routes",
            Link {
                to: BookRoute::GuideRouting {
                    section: GuideRoutingSection::AddingMoreRoutes,
                },
                class: "header",
                "Adding More Routes"
            }
        }
        p { "So far, our app has only had a single page. Let's change that!" }
        p {
            "In this chapter, we'll be adding a Navbar, a welcome screen, and a \"favorites\" page where we can revisit our favorite dogs."
        }
        h2 { id: "organizing-our-project",
            Link {
                to: BookRoute::GuideRouting {
                    section: GuideRoutingSection::OrganizingOurProject,
                },
                class: "header",
                "Organizing our Project"
            }
        }
        p {
            "Before we get too far with adding new pages to our app, let's organize our codebase a bit better. For larger projects you might want to break your app into different smaller crates. For HotDog, we'll keep it simple."
        }
        blockquote {
            p {
                "The  "
                code { "dx new" }
                " Jumpstart and Workspace templates provide great scaffolding for new apps!"
            }
        }
        p {
            "We generally recommend splitting your components, models, and backend functionality into different files. For HotDog, we're going to use a simple directory structure:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">├── Cargo.toml\n</span><span style=\"color:#f8f8f2;\">├── assets\n</span><span style=\"color:#f8f8f2;\">│   └── main.css\n</span><span style=\"color:#f8f8f2;\">└── src\n</span><span style=\"color:#f8f8f2;\">    ├── backend.rs\n</span><span style=\"color:#f8f8f2;\">    ├── components\n</span><span style=\"color:#f8f8f2;\">    │   ├── favorites.rs\n</span><span style=\"color:#f8f8f2;\">    │   ├── </span><span style=\"font-style:italic;color:#66d9ef;\">mod</span><span style=\"color:#f8f8f2;\">.rs\n</span><span style=\"color:#f8f8f2;\">    │   ├── nav.rs\n</span><span style=\"color:#f8f8f2;\">    │   └── view.rs\n</span><span style=\"color:#f8f8f2;\">    └── main.rs</span></pre>\n" }
        p {
            "We'll have a  "
            code { "backend.rs" }
            " that contains our server functions and a  "
            code { "components" }
            " folder that contains our components. We don't have a  "
            code { "NavBar" }
            " or a  "
            code { "Favorites" }
            " component yet, but we'll still create the relevant files before adding them. By splitting out our server functions into a  "
            code { "backend.rs" }
            " file, we'll make it easier to extract our backend functionality as a shared library for different apps in the future."
        }
        p {
            "Our  "
            code { "components/mod.rs" }
            " file will simply import and re-export the components in  "
            code { "view.rs" }
            ",  "
            code { "nav.rs" }
            ", and  "
            code { "favorites.rs" }
            ":"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">mod </span><span style=\"color:#f8f8f2;\">favorites;\n</span><span style=\"font-style:italic;color:#66d9ef;\">mod </span><span style=\"color:#f8f8f2;\">nav;\n</span><span style=\"font-style:italic;color:#66d9ef;\">mod </span><span style=\"color:#f8f8f2;\">view;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">pub use </span><span style=\"color:#f8f8f2;\">favorites::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f92672;\">pub use </span><span style=\"color:#f8f8f2;\">nav::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f92672;\">pub use </span><span style=\"color:#f8f8f2;\">view::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;</span></pre>\n" }
        p {
            "Finally, we need to bring  "
            code { "backend" }
            " and  "
            code { "components" }
            " into scope in our  "
            code { "main.rs" }
            " file:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">mod </span><span style=\"color:#f8f8f2;\">components;\n</span><span style=\"font-style:italic;color:#66d9ef;\">mod </span><span style=\"color:#f8f8f2;\">backend;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">use crate</span><span style=\"color:#f8f8f2;\">::components::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;</span></pre>\n" }
        p {
            "For more information on organizing Rust projects with modules, see the "
            Link { to: "https://doc.rust-lang.org/book/ch07-02-defining-modules-to-control-scope-and-privacy.html",
                "Modules section"
            }
            " of the Rust Book."
        }
        h2 { id: "creating-a-route",
            Link {
                to: BookRoute::GuideRouting {
                    section: GuideRoutingSection::CreatingARoute,
                },
                class: "header",
                "Creating a Route"
            }
        }
        p {
            "Most Dioxus apps you'll build will have different screens. This could include pages like "
            em { "Login" }
            ", "
            em { "Settings" }
            ", and "
            em { "Profile" }
            ". Our HotDog app will have two screens: a "
            em { "DogView" }
            " page and a "
            em { "Favorites" }
            " page."
        }
        p {
            "Dioxus provides a first-party router that natively integrates with web, desktop, and mobile. For example, on web, whenever you visit the  "
            code { "/favorites" }
            " url in your browser, the corresponding "
            em { "Favorites" }
            " page will load. The Dioxus router is very powerful, and most importantly, type-safe. You can rest easy knowing that users will never be sent to an invalid route. To achieve this, we first need to add the \"Router\" feature to the Cargo.toml file:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[dependencies]\n</span><span style=\"color:#f8f8f2;\">dioxus </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">{{ version </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;0.6.0&quot;</span><span style=\"color:#f8f8f2;\">, features </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;fullstack&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;router&quot;</span><span style=\"color:#f8f8f2;\">] }} </span><span style=\"color:#f92672;\"># &lt;-----</span><span style=\"color:#f8f8f2;\"> add </span><span style=\"color:#ffee99;\">&quot;router&quot;</span></pre>\n" }
        p {
            "Next, the Dioxus router is defined as an enum with the  "
            code { "Routable" }
            " derive attribute:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(Routable, Clone, PartialEq)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">Route {{\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    DogView,\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "With the Dioxus router, every route is an enum variant with a  "
            code { "#[route]" }
            " attribute that specifics the route's URL. Whenever the router renders our route, the component of the same name will be rendered."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(Routable, Clone, PartialEq)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">Route {{\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    DogView,     </span><span style=\"color:#8c8c8c;\">// &lt;---- a DogView component must be in scope\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">DogView</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{ </span><span style=\"color:#8c8c8c;\">/* */ </span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        h2 { id: "rendering-the-route",
            Link {
                to: BookRoute::GuideRouting {
                    section: GuideRoutingSection::RenderingTheRoute,
                },
                class: "header",
                "Rendering the Route"
            }
        }
        p {
            "Now that we have our app's  "
            code { "Route" }
            " defined, we need to render it. Let's change our  "
            code { "app" }
            " component to render the  "
            code { "Route {{}}" }
            " component instead of the  "
            code { "DogView" }
            "."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">app</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        document::Stylesheet {{ href: asset!(</span><span style=\"color:#ffee99;\">&quot;/assets/main.css&quot;</span><span style=\"color:#f8f8f2;\">) }}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// 📣 delete Title and DogView and replace it with the Router component.\n</span><span style=\"color:#f8f8f2;\">        Router::&lt;Route&gt; {{}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "When the  "
            code { "Router {{}}" }
            " component renders, it will parse the document's current URL into a  "
            code { "Route" }
            " variant. If the url doesn't parse properly, the router will render nothing unless you add a \"catch-all\" route:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(Routable, Clone, PartialEq)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">Route {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// ...\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// We can collect the segments of the URL into a Vec&lt;String&gt;\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/:..segments&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    PageNotFound {{\n</span><span style=\"color:#f8f8f2;\">        segments: Vec&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    }},\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "Note here that the  "
            code { "PageNotFound" }
            " route takes the \"segments\" parameter. Dioxus routes are not only type-safe as variants, but also type-safe with URL parameters. For more information on how this works, "
            Link {
                to: BookRoute::RouterIndex {
                    section: RouterIndexSection::Empty,
                },
                "check the router guide"
            }
            "."
        }
        p { "At this point, we should see our app, but this time without its Title." }
        p {
            img {
                src: asset!("/assets/06_docs/no_navbar.png", ImageAssetOptions::new().with_avif()),
                alt: "No Navbar",
                title: "",
            }
        }
        h2 { id: "rendering-the-navbar-with-a-layout",
            Link {
                to: BookRoute::GuideRouting {
                    section: GuideRoutingSection::RenderingTheNavbarWithALayout,
                },
                class: "header",
                "Rendering the NavBar with a Layout"
            }
        }
        p {
            "We're rendering our DogView component, but unfortunately we no longer see our Title. Let's add that back and turn it into a NavBar!"
        }
        p {
            "In our  "
            code { "src/components/nav.rs" }
            " file, we'll add back our Title code, but rename it to NavBar and modify it with two new items: the  "
            code { "Link {{}}" }
            " and  "
            code { "Outlet" }
            " components."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use crate</span><span style=\"color:#f8f8f2;\">::Route;\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">NavBar</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ id: </span><span style=\"color:#ffee99;\">&quot;title&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            Link {{ to: Route::DogView,\n</span><span style=\"color:#f8f8f2;\">                h1 {{ </span><span style=\"color:#ffee99;\">&quot;🌭 HotDog! &quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">        Outlet::&lt;Route&gt; {{}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        p {
            "The  "
            code { "Link {{}}" }
            " component wraps the anchor  "
            code { "<a>" }
            " element with a type-safe interface. This means any struct that implements  "
            code { "Routable" }
            " - anything that can  "
            code { ".to_string()" }
            " - is a valid navigation target."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// Using the Link with Route\n</span><span style=\"color:#f8f8f2;\">Link {{ to: Route::DogView }}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// Or passing in a &quot;/&quot; route directly\n</span><span style=\"color:#f8f8f2;\">Link {{ to: </span><span style=\"color:#ffee99;\">&quot;/&quot; </span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "The Link component takes many different arguments, making it possible to extend and customize for your use-case."
        }
        p {
            "In  "
            code { "NavBar" }
            ", we also added an  "
            code { "Outlet::<Route> {{}}" }
            " component. When the Router component renders, it first looks for any child  "
            code { "Outlet" }
            " components. If one is present, it renders the current route "
            em { "under the outlet" }
            ". This lets us wrap the current page in extra elements - in this case, the NavBar. If no Outlet is present, then the current route is simply rendered where the "
            code { "Router {{}}" }
            " is declared."
        }
        p {
            "To actually add the NavBar component to our app, we need to update our  "
            code { "Route" }
            " enum with the  "
            code { "#[layout]" }
            " attribute. This forces the router to render the  "
            code { "NavBar" }
            " component "
            em { "first" }
            " so it can expose its "
            code { "Outlet {{}}" }
            "."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(Routable, PartialEq, Clone)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">Route {{\n</span><span style=\"color:#f8f8f2;\">    #[layout(NavBar)] </span><span style=\"color:#8c8c8c;\">// &lt;---- add the #[layout] attribute\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    DogView,\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "The  "
            code { "layout" }
            " attribute instructs the Router to wrap the following enum variants in the given component."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">Router  {{\n</span><span style=\"color:#f8f8f2;\">    NavBar {{\n</span><span style=\"color:#f8f8f2;\">        Outlet {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#f92672;\">if</span><span style=\"color:#f8f8f2;\"> route </span><span style=\"color:#f92672;\">==</span><span style=\"color:#f8f8f2;\"> “</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">” {{\n</span><span style=\"color:#f8f8f2;\">                DogView {{}}\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "Visually, this should be straight-forward to understand. Note that the Router and Outlet share the same  "
            code { "Route" }
            " generic type."
        }
        p {
            img {
                src: asset!("/assets/06_docs/routeroutlet.png", ImageAssetOptions::new().with_avif()),
                alt: "RouterLayout",
                title: "",
            }
        }
        h2 { id: "adding-a-favorites-route",
            Link {
                to: BookRoute::GuideRouting {
                    section: GuideRoutingSection::AddingAFavoritesRoute,
                },
                class: "header",
                "Adding a Favorites Route"
            }
        }
        p {
            "Now that we understand the fundamentals of routing, let's finally add our "
            em { "Favorites" }
            " page so we can view the dog photos we saved."
        }
        p {
            "We'll start by creating an empty component  "
            code { "src/components/favorites.rs" }
            ":"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Favorites</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{ </span><span style=\"color:#ffee99;\">&quot;favorites!&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "And then let's make sure to add a new variant in our  "
            code { "Route" }
            " enum:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(Routable, PartialEq, Clone)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">Route {{\n</span><span style=\"color:#f8f8f2;\">    #[layout(NavBar)]\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    DogView,\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/favorites&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    Favorites,     </span><span style=\"color:#8c8c8c;\">// &lt;------ add this new variant\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "To make sure the user can reach this page, let's also add a button in the nav that points to it."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use crate</span><span style=\"color:#f8f8f2;\">::Route;\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">NavBar</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ id: </span><span style=\"color:#ffee99;\">&quot;title&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            Link {{ to: Route::DogView,\n</span><span style=\"color:#f8f8f2;\">                h1 {{ </span><span style=\"color:#ffee99;\">&quot;🌭 HotDog! &quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">            Link {{ to: Route::Favorites, id: </span><span style=\"color:#ffee99;\">&quot;heart&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;♥\u{fe0f}&quot; </span><span style=\"color:#f8f8f2;\">}} </span><span style=\"color:#8c8c8c;\">// &lt;------- add this Link\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">        Outlet::&lt;Route&gt; {{}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        h2 { id: "our-favorites-page",
            Link {
                to: BookRoute::GuideRouting {
                    section: GuideRoutingSection::OurFavoritesPage,
                },
                class: "header",
                "Our Favorites Page"
            }
        }
        p {
            "Finally, we can build our favorites page. Let's add a new  "
            code { "list_dogs" }
            " server function that fetches the 10 most recently saved dog photos:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// Query the database and return the last 10 dogs and their url\n</span><span style=\"color:#f8f8f2;\">#[server]\n</span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\"> async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">list_dogs</span><span style=\"color:#f8f8f2;\">() -&gt; Result&lt;Vec&lt;(</span><span style=\"font-style:italic;color:#66d9ef;\">usize</span><span style=\"color:#f8f8f2;\">, String)&gt;, ServerFnError&gt; {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> dogs </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">DB</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">with</span><span style=\"color:#f8f8f2;\">(|</span><span style=\"font-style:italic;color:#fd971f;\">f</span><span style=\"color:#f8f8f2;\">| {{\n</span><span style=\"color:#f8f8f2;\">        f.</span><span style=\"color:#66d9ef;\">prepare</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;SELECT id, url FROM dogs ORDER BY id DESC LIMIT 10&quot;</span><span style=\"color:#f8f8f2;\">)\n</span><span style=\"color:#f8f8f2;\">            .</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">            .</span><span style=\"color:#66d9ef;\">query_map</span><span style=\"color:#f8f8f2;\">([], |</span><span style=\"font-style:italic;color:#fd971f;\">row</span><span style=\"color:#f8f8f2;\">| </span><span style=\"font-style:italic;color:#66d9ef;\">Ok</span><span style=\"color:#f8f8f2;\">((row.</span><span style=\"color:#66d9ef;\">get</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">)</span><span style=\"color:#f92672;\">?</span><span style=\"color:#f8f8f2;\">, row.</span><span style=\"color:#66d9ef;\">get</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">)</span><span style=\"color:#f92672;\">?</span><span style=\"color:#f8f8f2;\">)))\n</span><span style=\"color:#f8f8f2;\">            .</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">            .</span><span style=\"color:#66d9ef;\">map</span><span style=\"color:#f8f8f2;\">(|</span><span style=\"font-style:italic;color:#fd971f;\">r</span><span style=\"color:#f8f8f2;\">| r.</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">())\n</span><span style=\"color:#f8f8f2;\">            .</span><span style=\"color:#66d9ef;\">collect</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">    }});\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">Ok</span><span style=\"color:#f8f8f2;\">(dogs)\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        p {
            "Now, we can fill in our component. We're going to use the same  "
            code { "use_resource" }
            " hook from earlier. Resolving the request from the server might take some time, so we'll use the  "
            code { ".suspend()?" }
            " method on  "
            code { "Resource" }
            " to wait for the request to finish before mapping the contents to a list."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Favorites</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Create a pending resource that resolves to the list of dogs from the backend\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Wait for the favorites list to resolve with `.suspend()`\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> favorites </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_resource</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">crate</span><span style=\"color:#f8f8f2;\">::backend::list_dogs).</span><span style=\"color:#66d9ef;\">suspend</span><span style=\"color:#f8f8f2;\">()</span><span style=\"color:#f92672;\">?</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ id: </span><span style=\"color:#ffee99;\">&quot;favorites&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            div {{ id: </span><span style=\"color:#ffee99;\">&quot;favorites-container&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">                </span><span style=\"color:#f92672;\">for </span><span style=\"color:#f8f8f2;\">(id, url) </span><span style=\"color:#f92672;\">in </span><span style=\"color:#66d9ef;\">favorites</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">                    </span><span style=\"color:#8c8c8c;\">// Render a div for each photo using the dog&#39;s ID as the list key\n</span><span style=\"color:#f8f8f2;\">                    div {{\n</span><span style=\"color:#f8f8f2;\">                        key: id,\n</span><span style=\"color:#f8f8f2;\">                        class: </span><span style=\"color:#ffee99;\">&quot;favorite-dog&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">                        img {{ src: </span><span style=\"color:#ffee99;\">&quot;{{url}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">                    }}\n</span><span style=\"color:#f8f8f2;\">                }}\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        p {
            "As a stretch goal, try adding a button that lets the user also delete items from the database."
        }
        p {
            video {
                src: asset!("/assets/06_docs/hotdogfull.mp4"),
                alt: "FullDemo",
                title: "",
                autoplay: true,
                muted: true,
                r#loop: true,
                playsinline: true,
                preload: "metadata",
            }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuideBundleSection {
    #[default]
    Empty,
    Bundling,
    TestingOnDesktopAndMobile,
    TestingOnIos,
    TestingOnAndroid,
    TestingOnDesktop,
    BundlingForTheWeb,
    BundlingForDesktopAndMobile,
    CustomizingYourBundle,
    AutomatingDxBundleWithJsonMode,
}
impl std::str::FromStr for GuideBundleSection {
    type Err = GuideBundleSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "bundling" => Ok(Self::Bundling),
            "testing-on-desktop-and-mobile" => Ok(Self::TestingOnDesktopAndMobile),
            "testing-on-ios" => Ok(Self::TestingOnIos),
            "testing-on-android" => Ok(Self::TestingOnAndroid),
            "testing-on-desktop" => Ok(Self::TestingOnDesktop),
            "bundling-for-the-web" => Ok(Self::BundlingForTheWeb),
            "bundling-for-desktop-and-mobile" => Ok(Self::BundlingForDesktopAndMobile),
            "customizing-your-bundle" => Ok(Self::CustomizingYourBundle),
            "automating-dx-bundle-with-json-mode" => Ok(Self::AutomatingDxBundleWithJsonMode),
            _ => Err(GuideBundleSectionParseError),
        }
    }
}
impl std::fmt::Display for GuideBundleSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Bundling => f.write_str("bundling"),
            Self::TestingOnDesktopAndMobile => f.write_str("testing-on-desktop-and-mobile"),
            Self::TestingOnIos => f.write_str("testing-on-ios"),
            Self::TestingOnAndroid => f.write_str("testing-on-android"),
            Self::TestingOnDesktop => f.write_str("testing-on-desktop"),
            Self::BundlingForTheWeb => f.write_str("bundling-for-the-web"),
            Self::BundlingForDesktopAndMobile => f.write_str("bundling-for-desktop-and-mobile"),
            Self::CustomizingYourBundle => f.write_str("customizing-your-bundle"),
            Self::AutomatingDxBundleWithJsonMode => {
                f.write_str("automating-dx-bundle-with-json-mode")
            }
        }
    }
}
#[derive(Debug)]
pub struct GuideBundleSectionParseError;
impl std::fmt::Display for GuideBundleSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuideBundleSectionbundling, testing-on-desktop-and-mobile, testing-on-ios, testing-on-android, testing-on-desktop, bundling-for-the-web, bundling-for-desktop-and-mobile, customizing-your-bundle, automating-dx-bundle-with-json-mode",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuideBundleSectionParseError {}
#[component(no_case_check)]
pub fn GuideBundle(section: GuideBundleSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "bundling",
            Link {
                to: BookRoute::GuideBundle {
                    section: GuideBundleSection::Bundling,
                },
                class: "header",
                "Bundling"
            }
        }
        p {
            "Congratulations! You built your first fully-functional Dioxus app, completely loaded with Routing, asynchronous data-fetching, Server Functions, and a database! That's incredible for just a few minutes of work."
        }
        p { "Let's get your app bundled for multiple platforms and then ready to deploy." }
        h2 { id: "testing-on-desktop-and-mobile",
            Link {
                to: BookRoute::GuideBundle {
                    section: GuideBundleSection::TestingOnDesktopAndMobile,
                },
                class: "header",
                "Testing on Desktop and Mobile"
            }
        }
        p {
            "So far, we've been testing our app in a simple web browser. Let's actually build and test our app for mobile platforms."
        }
        p {
            "In Dioxus 0.6,  "
            code { "dx" }
            " finally supports  "
            code { "dx serve" }
            " for Android and iOS!"
        }
        h3 { id: "testing-on-ios",
            Link {
                to: BookRoute::GuideBundle {
                    section: GuideBundleSection::TestingOnIos,
                },
                class: "header",
                "Testing on iOS"
            }
        }
        p {
            "To test iOS, your development environment needs to be setup to build iOS apps. This involves a few steps:"
        }
        ul {
            li { "Make sure you are developing on a device running macOS" }
            li { "Install XCode" }
            li {
                Link { to: "https://developer.apple.com/ios/",
                    "Download a recent iOS SDK and Emulator pack"
                }
            }
            li {
                "Install the iOS Rust toolchains ("
                code { "aarch64-apple-ios aarch64-apple-ios-sim" }
                ")"
            }
        }
        p {
            "This is a multi-step process and requires creating an Apple Developer account. You shouldn't need to pay any fees until you want to sign your app. Signing your app is required for deploying to the Apple App Store and testing on your iOS device."
        }
        p { "If everything is installed properly, you should be able to open the Simulator app:" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">open </span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">Applications</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">Xcode.app</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">Contents</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">Developer</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">Applications</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">Simulator.app</span></pre>\n" }
        p {
            "If the Simulator app opens but no device pops up, you might need to open a specific device. Use  "
            code { "xcrun" }
            " to discover which devices you have installed."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">xcrun simctl list</span></pre>\n" }
        p { "Identify an available device. We're going to simulate an iPhone 15 Pro Max:" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">xcrun simctl boot </span><span style=\"color:#ffee99;\">&quot;iPhone 15 Pro Max&quot;</span></pre>\n" }
        p {
            "Once the simulator is booted, we can run  "
            code { "dx serve --platform ios" }
            "."
        }
        p {
            video {
                src: asset!("/assets/06_docs/dog-app-ios.mp4"),
                alt: "DogApp",
                title: "",
                autoplay: true,
                muted: true,
                r#loop: true,
                playsinline: true,
                preload: "metadata",
            }
        }
        p { "Fantastic - our app works seamlessly with no changes." }
        h3 { id: "testing-on-android",
            Link {
                to: BookRoute::GuideBundle {
                    section: GuideBundleSection::TestingOnAndroid,
                },
                class: "header",
                "Testing on Android"
            }
        }
        p {
            "Setting up your environment for Android development takes time, so make sure to read the "
            Link {
                to: BookRoute::GuidesMobileIndex {
                    section: GuidesMobileIndexSection::Empty,
                },
                "mobile tooling guide"
            }
            "."
        }
        ul {
            li { "Install the Android NDK and SDK" }
            li {
                "Set JAVA_HOME, ANDROID_HOME, NDK_HOME, and fix PATH issues to use the "
                code { "emulator" }
                " tool"
            }
            li { "Install and set up an Android emulator" }
            li {
                "Install the Android rustup targets ("
                code {
                    "aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android"
                }
                ")"
            }
        }
        p {
            "Let's start an emulator. We can use the  "
            code { "emulator" }
            " command which should be in your PATH if setup properly. We're going to use our  "
            code { "Pixel_6_API_34" }
            " emulator, but you can use any device you've configured."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">emulator </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">avd Pixel_6_API_34  </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">netdelay none </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">netspeed full</span></pre>\n" }
        p {
            "If we try to  "
            code { "dx serve --platform android" }
            ", we'll find that our app fails to build for Android. This is not good!"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#ff80f4;\">12</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ff80f4;\">45</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ff80f4;\">39 </span><span style=\"color:#f8f8f2;\">[cargo]   Could not find directory of OpenSSL installation, and this `</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">sys` </span><span style=\"color:#f92672;\">crate</span><span style=\"color:#f8f8f2;\"> cannot\n</span><span style=\"color:#ff80f4;\">12</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ff80f4;\">45</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ff80f4;\">39 </span><span style=\"color:#f8f8f2;\">[cargo]   proceed without this knowledge. If OpenSSL is installed and this </span><span style=\"color:#f92672;\">crate</span><span style=\"color:#f8f8f2;\"> had\n</span><span style=\"color:#ff80f4;\">12</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ff80f4;\">45</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ff80f4;\">39 </span><span style=\"color:#f8f8f2;\">[cargo]   trouble finding it,  you can set the `</span><span style=\"color:#ff80f4;\">OPENSSL_DIR</span><span style=\"color:#f8f8f2;\">` environment variable </span><span style=\"color:#f92672;\">for</span><span style=\"color:#f8f8f2;\"> the\n</span><span style=\"color:#ff80f4;\">12</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ff80f4;\">45</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ff80f4;\">39 </span><span style=\"color:#f8f8f2;\">[cargo]   compilation process.\n</span><span style=\"color:#ff80f4;\">12</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ff80f4;\">45</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ff80f4;\">39 </span><span style=\"color:#f8f8f2;\">[cargo]   Make sure you also have the development packages of openssl installed.\n</span><span style=\"color:#ff80f4;\">12</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ff80f4;\">45</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ff80f4;\">39 </span><span style=\"color:#f8f8f2;\">[cargo]   For example, `libssl</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">dev` on Ubuntu or `openssl</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">devel` on Fedora.\n</span><span style=\"color:#ff80f4;\">12</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ff80f4;\">45</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ff80f4;\">39 </span><span style=\"color:#f8f8f2;\">[cargo]   If you</span><span style=\"color:#f92672;\">&#39;re in</span><span style=\"color:#f8f8f2;\"> a situation </span><span style=\"color:#f92672;\">where</span><span style=\"color:#f8f8f2;\"> you think the directory </span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">should</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\"> be found\n</span><span style=\"color:#ff80f4;\">12</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ff80f4;\">45</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ff80f4;\">39 </span><span style=\"color:#f8f8f2;\">[cargo]   automatically, please open a bug at https:</span><span style=\"color:#8c8c8c;\">//github.com/sfackler/rust-openssl\n</span><span style=\"color:#ff80f4;\">12</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ff80f4;\">45</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ff80f4;\">39 </span><span style=\"color:#f8f8f2;\">[cargo]   and include information about your system </span><span style=\"color:#f92672;\">as</span><span style=\"color:#f8f8f2;\"> well </span><span style=\"color:#f92672;\">as</span><span style=\"color:#f8f8f2;\"> this message.\n</span><span style=\"color:#ff80f4;\">12</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ff80f4;\">45</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ff80f4;\">39 </span><span style=\"color:#f8f8f2;\">[cargo]   $HOST </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> aarch64</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">apple</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">darwin\n</span><span style=\"color:#ff80f4;\">12</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ff80f4;\">45</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ff80f4;\">39 </span><span style=\"color:#f8f8f2;\">[cargo]   $TARGET </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> aarch64</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">linux</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">android\n</span><span style=\"color:#ff80f4;\">12</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ff80f4;\">45</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ff80f4;\">39 </span><span style=\"color:#f8f8f2;\">[cargo]   openssl</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">sys </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">0.9</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#ff80f4;\">104</span></pre>\n",
        }
        p {
            "Currently,  "
            code { "rust-openssl" }
            " does not cross-compile properly for Android targets. To fix this, we need to add the  "
            code { "openssl" }
            " crate to our Cargo.toml and then enable its \"vendored\" feature. This will build OpenSSL from source instead of trying and failing to read it from the Android NDK."
        }
        p { "We're only going to enable the vendored feature when targeting Android." }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[target.</span><span style=\"color:#f92672;\">&#39;cfg</span><span style=\"color:#f8f8f2;\">(target_os </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;android&quot;</span><span style=\"color:#f8f8f2;\">)</span><span style=\"color:#f92672;\">&#39;</span><span style=\"color:#f8f8f2;\">.dependencies]\n</span><span style=\"color:#f8f8f2;\">openssl </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">{{ version </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;0.10&quot;</span><span style=\"color:#f8f8f2;\">, features </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;vendored&quot;</span><span style=\"color:#f8f8f2;\">] }}</span></pre>\n" }
        p {
            "In the future, Dioxus might add OpenSSL's vendored feature implicitly to make this error go away. We're covering it here since it's important to understand that not every Rust dependency works out-of-the-box for iOS and Android. Unfortunately, the Rust ecosystem for mobile is still quite young and you'll need to know how to solve problems like these."
        }
        p { "Let's try again!" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">dx serve </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">platform android</span></pre>\n" }
        p {
            video {
                src: asset!("/assets/06_docs/android-dogapp.mp4"),
                alt: "Android DogApp",
                title: "",
                autoplay: true,
                muted: true,
                r#loop: true,
                playsinline: true,
                preload: "metadata",
            }
        }
        h2 { id: "testing-on-desktop",
            Link {
                to: BookRoute::GuideBundle {
                    section: GuideBundleSection::TestingOnDesktop,
                },
                class: "header",
                "Testing on Desktop"
            }
        }
        p {
            "HotDog also works on macOS, Windows, and Linux! We can use  "
            code { "dx serve --platform desktop" }
            " to serve our app as a desktop app."
        }
        p {
            img {
                src: asset!("/assets/06_docs/hotdog-desktop.png", ImageAssetOptions::new().with_avif()),
                alt: "HotDogDesktop",
                title: "",
            }
        }
        h2 { id: "bundling-for-the-web",
            Link {
                to: BookRoute::GuideBundle {
                    section: GuideBundleSection::BundlingForTheWeb,
                },
                class: "header",
                "Bundling for the web"
            }
        }
        p {
            "After we're done making changes to our server and client apps, we can build bundles that are ready to distribute."
        }
        p {
            "We're going to follow the same pattern as  "
            code { "dx serve" }
            " but with  "
            code { "dx bundle" }
            ". To start, let's build the web version of our app."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">dx bundle </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">platform web</span></pre>\n" }
        p {
            "We should receive a series of INFO traces from the CLI as it builds, and then finally a path to the  "
            code { "public" }
            " folder it generates. Let's  "
            code { "cd" }
            " into its public directory and then check out its parent directory (cd ..) (the \"web\" folder)."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">❯ tree </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">L </span><span style=\"color:#ff80f4;\">3 </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">gitignore\n</span><span style=\"color:#f8f8f2;\">.\n</span><span style=\"color:#f8f8f2;\">├── public\n</span><span style=\"color:#f8f8f2;\">│   ├── assets\n</span><span style=\"color:#f8f8f2;\">│   │   ├── favicon.ico\n</span><span style=\"color:#f8f8f2;\">│   │   ├── header.svg\n</span><span style=\"color:#f8f8f2;\">│   │   ├── main</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">14aa55e73f669f3e.css\n</span><span style=\"color:#f8f8f2;\">│   │   ├── main.css\n</span><span style=\"color:#f8f8f2;\">│   │   └── screenshot.png\n</span><span style=\"color:#f8f8f2;\">│   ├── index.html\n</span><span style=\"color:#f8f8f2;\">│   └── wasm\n</span><span style=\"color:#f8f8f2;\">│       ├── hot_dog.js\n</span><span style=\"color:#f8f8f2;\">│       ├── hot_dog.js.br\n</span><span style=\"color:#f8f8f2;\">│       ├── hot_dog_bg.wasm\n</span><span style=\"color:#f8f8f2;\">│       ├── hot_dog_bg.wasm.br\n</span><span style=\"color:#f8f8f2;\">│       └── snippets\n</span><span style=\"color:#f8f8f2;\">└── server</span></pre>\n",
        }
        p {
            code { "dx" }
            " built a  "
            code { "public" }
            " folder containing our assets, index.html, and various JavaScript snippets. Alongside our public folder is a  "
            code { "server" }
            " binary. When we deploy our web assets, we'll also want to deploy the server since it provides our server functions."
        }
        p {
            "We can manually run the server simply by executing it. If you're using a default  "
            code { "dioxus::launch" }
            " setup, then the server will read the  "
            code { "IP" }
            " and  "
            code { "PORT" }
            " environment variables to serve."
        }
        blockquote {
            p {
                "📣 If you intend to serve from within a container (e.g., Docker), then you need to override the default  "
                code { "127.0.0.1" }
                " address with  "
                code { "IP=0.0.0.0" }
                " to listen for external connections."
            }
        }
        p {
            img {
                src: asset!("/assets/06_docs/serving_server.png", ImageAssetOptions::new().with_avif()),
                alt: "Serving the server",
                title: "",
            }
        }
        h2 { id: "bundling-for-desktop-and-mobile",
            Link {
                to: BookRoute::GuideBundle {
                    section: GuideBundleSection::BundlingForDesktopAndMobile,
                },
                class: "header",
                "Bundling for Desktop and Mobile"
            }
        }
        p {
            "To bundle desktop and mobile apps for deployment, we'll again use  "
            code { "dx bundle" }
            ". As of today,  "
            code { "dx bundle" }
            " only builds desktop apps for the native platform and architecture. Unfortunately, you can't build macOS apps from Windows, Linux apps from Mac, etc. We recommend using a Continuous Integration Matrix (like "
            Link { to: "https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/running-variations-of-jobs-in-a-workflow",
                "Github Actions"
            }
            ") to perform a \"cross-build\" of your app in multiple different containers."
        }
        p {
            "When bundling installable apps, there are many distribution formats to choose from. We can specify these formats using the  "
            code { "--package-types" }
            " flag on  "
            code { "dx bundle" }
            ". Dioxus supports packaging a broad number of package types:"
        }
        ul {
            li {
                "macOS: "
                code { ".app" }
                ", "
                code { ".dmg" }
            }
            li {
                "Linux: "
                code { ".appimage" }
                ", "
                code { ".rpm" }
                ", "
                code { ".deb" }
            }
            li {
                "Windows: "
                code { ".msi" }
                ", "
                code { ".exe" }
            }
            li {
                "iOS: "
                code { ".app" }
            }
            li {
                "Android: "
                code { ".apk" }
            }
        }
        p { "You can specify package types like so:" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">dx bundle </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">platform desktop \\\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">package</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">types </span><span style=\"color:#ffee99;\">&quot;macos&quot;</span><span style=\"color:#f8f8f2;\"> \\\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">package</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">types </span><span style=\"color:#ffee99;\">&quot;dmg&quot;</span></pre>\n" }
        p {
            "Note that not all package-types are compatible with each platform - eg. only  "
            code { ".exe" }
            " can be built when specifying  "
            code { "--platform desktop" }
            "."
        }
        p { "We should see the outputs in our terminal:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#ff80f4;\">18.252</span><span style=\"color:#f8f8f2;\">s  </span><span style=\"color:#ff80f4;\">INFO</span><span style=\"color:#f8f8f2;\"> Bundled app successfully</span><span style=\"color:#f92672;\">!\n</span><span style=\"color:#ff80f4;\">18.252</span><span style=\"color:#f8f8f2;\">s  </span><span style=\"color:#ff80f4;\">INFO</span><span style=\"color:#f8f8f2;\"> App produced </span><span style=\"color:#ff80f4;\">2</span><span style=\"color:#f8f8f2;\"> outputs:\n</span><span style=\"color:#ff80f4;\">18.252</span><span style=\"color:#f8f8f2;\">s  </span><span style=\"color:#ff80f4;\">INFO</span><span style=\"color:#f8f8f2;\"> app </span><span style=\"color:#f92672;\">- </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">Users</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">jonkelley</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">Development</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">Tinkering</span><span style=\"color:#f92672;\">/</span><span style=\"color:#ff80f4;\">06</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">demos</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">hot_dog</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">target</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">dx</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">hot_dog</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">bundle</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">macos</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">bundle</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">macos</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">HotDog.app]\n</span><span style=\"color:#ff80f4;\">18.252</span><span style=\"color:#f8f8f2;\">s  </span><span style=\"color:#ff80f4;\">INFO</span><span style=\"color:#f8f8f2;\"> dmg </span><span style=\"color:#f92672;\">- </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">Users</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">jonkelley</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">Development</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">Tinkering</span><span style=\"color:#f92672;\">/</span><span style=\"color:#ff80f4;\">06</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">demos</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">hot_dog</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">target</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">dx</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">hot_dog</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">bundle</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">macos</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">bundle</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">dmg</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">HotDog_0.</span><span style=\"color:#ff80f4;\">1.0_</span><span style=\"color:#f8f8f2;\">aarch64.dmg]</span></pre>\n",
        }
        p {
            "Generally, you can distribute desktop apps without needing an app store. However, some platforms like macOS might require you to sign and notarize your application to be considered \"safe\" for your users to open."
        }
        p {
            "When distributing mobile apps, you "
            em { "are required" }
            " to sign and notarize your apps. Currently, Dioxus doesn't provide built-in utilities for this, so you'll need to figure out signing by reading 3rd-party documentation."
        }
        p { "Tauri provides documentation on the signing process:" }
        ul {
            li {
                Link { to: "https://tauri.app/distribute/sign/macos/", "macOS" }
            }
            li {
                Link { to: "https://tauri.app/distribute/sign/iOS/", "iOS" }
            }
            li {
                Link { to: "https://tauri.app/distribute/sign/android/", "Android" }
            }
            li {
                Link { to: "https://tauri.app/distribute/sign/Windows/", "Windows" }
            }
            li {
                Link { to: "https://tauri.app/distribute/sign/Linux/", "Linux" }
            }
        }
        h2 { id: "customizing-your-bundle",
            Link {
                to: BookRoute::GuideBundle {
                    section: GuideBundleSection::CustomizingYourBundle,
                },
                class: "header",
                "Customizing your Bundle"
            }
        }
        p {
            "Before you ship your app, you might want to configure how your app icon looks, what entitlements it has, and other details. Our  "
            code { "dx bundle" }
            " tool can help you configure your bundles in a variety of ways."
        }
        p {
            "To configure our bundle, we'll use our  "
            code { "Dioxus.toml" }
            " and modify the bundle section."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[application]\n</span><span style=\"color:#f8f8f2;\">name </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;docsite&quot;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">[bundle]\n</span><span style=\"color:#f8f8f2;\">identifier </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;com.dioxuslabs&quot;\n</span><span style=\"color:#f8f8f2;\">publisher </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;DioxusLabs&quot;\n</span><span style=\"color:#f8f8f2;\">icon </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;assets/icon.png&quot;</span></pre>\n" }
        p {
            "For a full list of options, see the "
            Link {
                to: BookRoute::CookbookBundling {
                    section: CookbookBundlingSection::Empty,
                },
                "reference page on the  "
                code { "bundle" }
                " section"
            }
            "."
        }
        h2 { id: "automating-dx-bundle-with-json-mode",
            Link {
                to: BookRoute::GuideBundle {
                    section: GuideBundleSection::AutomatingDxBundleWithJsonMode,
                },
                class: "header",
                "Automating dx bundle with JSON mode"
            }
        }
        p {
            "Also added in Dioxus 0.6 is a JSON output mode for  "
            code { "dx" }
            ". This makes it possible to parse the output of the CLI using tools like "
            Link { to: "https://jqlang.github.io/jq/", "jq" }
            " which provide stdin/stdout support for JSON parsing."
        }
        p {
            "This mode is not particular friendly to humans, but does contain more information than the standard trace output."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">{{</span><span style=\"color:#ffee99;\">&quot;timestamp&quot;</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ffee99;\">&quot;   9.927s&quot;</span><span style=\"color:#f8f8f2;\">,</span><span style=\"color:#ffee99;\">&quot;level&quot;</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ffee99;\">&quot;INFO&quot;</span><span style=\"color:#f8f8f2;\">,</span><span style=\"color:#ffee99;\">&quot;message&quot;</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ffee99;\">&quot;Bundled app successfully!&quot;</span><span style=\"color:#f8f8f2;\">,</span><span style=\"color:#ffee99;\">&quot;target&quot;</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ffee99;\">&quot;dx::cli::bundle&quot;</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">{{</span><span style=\"color:#ffee99;\">&quot;timestamp&quot;</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ffee99;\">&quot;   9.927s&quot;</span><span style=\"color:#f8f8f2;\">,</span><span style=\"color:#ffee99;\">&quot;level&quot;</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ffee99;\">&quot;INFO&quot;</span><span style=\"color:#f8f8f2;\">,</span><span style=\"color:#ffee99;\">&quot;message&quot;</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ffee99;\">&quot;App produced 2 outputs:&quot;</span><span style=\"color:#f8f8f2;\">,</span><span style=\"color:#ffee99;\">&quot;target&quot;</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ffee99;\">&quot;dx::cli::bundle&quot;</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">{{</span><span style=\"color:#ffee99;\">&quot;timestamp&quot;</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ffee99;\">&quot;   9.927s&quot;</span><span style=\"color:#f8f8f2;\">,</span><span style=\"color:#ffee99;\">&quot;level&quot;</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ffee99;\">&quot;DEBUG&quot;</span><span style=\"color:#f8f8f2;\">,</span><span style=\"color:#ffee99;\">&quot;message&quot;</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ffee99;\">&quot;Bundling produced bundles: [</span><span style=\"color:#ff80f4;\">\\n</span><span style=\"color:#ffee99;\">    Bundle {{</span><span style=\"color:#ff80f4;\">\\n</span><span style=\"color:#ffee99;\">        package_type: MacOsBundle,</span><span style=\"color:#ff80f4;\">\\n</span><span style=\"color:#ffee99;\">        bundle_paths: [</span><span style=\"color:#ff80f4;\">\\n            \\&quot;</span><span style=\"color:#ffee99;\">/Users/jonkelley/Development/Tinkering/06-demos/hot_dog/target/dx/hot_dog/bundle/macos/bundle/macos/HotDog.app</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">,</span><span style=\"color:#ff80f4;\">\\n</span><span style=\"color:#ffee99;\">        ],</span><span style=\"color:#ff80f4;\">\\n</span><span style=\"color:#ffee99;\">    }},</span><span style=\"color:#ff80f4;\">\\n</span><span style=\"color:#ffee99;\">    Bundle {{</span><span style=\"color:#ff80f4;\">\\n</span><span style=\"color:#ffee99;\">        package_type: Dmg,</span><span style=\"color:#ff80f4;\">\\n</span><span style=\"color:#ffee99;\">        bundle_paths: [</span><span style=\"color:#ff80f4;\">\\n            \\&quot;</span><span style=\"color:#ffee99;\">/Users/jonkelley/Development/Tinkering/06-demos/hot_dog/target/dx/hot_dog/bundle/macos/bundle/dmg/HotDog_0.1.0_aarch64.dmg</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">,</span><span style=\"color:#ff80f4;\">\\n</span><span style=\"color:#ffee99;\">        ],</span><span style=\"color:#ff80f4;\">\\n</span><span style=\"color:#ffee99;\">    }},</span><span style=\"color:#ff80f4;\">\\n</span><span style=\"color:#ffee99;\">]&quot;</span><span style=\"color:#f8f8f2;\">,</span><span style=\"color:#ffee99;\">&quot;target&quot;</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ffee99;\">&quot;dx::cli::bundle&quot;</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">{{</span><span style=\"color:#ffee99;\">&quot;timestamp&quot;</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ffee99;\">&quot;   9.927s&quot;</span><span style=\"color:#f8f8f2;\">,</span><span style=\"color:#ffee99;\">&quot;level&quot;</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ffee99;\">&quot;INFO&quot;</span><span style=\"color:#f8f8f2;\">,</span><span style=\"color:#ffee99;\">&quot;message&quot;</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ffee99;\">&quot;app - [/Users/jonkelley/Development/Tinkering/06-demos/hot_dog/target/dx/hot_dog/bundle/macos/bundle/macos/HotDog.app]&quot;</span><span style=\"color:#f8f8f2;\">,</span><span style=\"color:#ffee99;\">&quot;target&quot;</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ffee99;\">&quot;dx::cli::bundle&quot;</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">{{</span><span style=\"color:#ffee99;\">&quot;timestamp&quot;</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ffee99;\">&quot;   9.927s&quot;</span><span style=\"color:#f8f8f2;\">,</span><span style=\"color:#ffee99;\">&quot;level&quot;</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ffee99;\">&quot;INFO&quot;</span><span style=\"color:#f8f8f2;\">,</span><span style=\"color:#ffee99;\">&quot;message&quot;</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ffee99;\">&quot;dmg - [/Users/jonkelley/Development/Tinkering/06-demos/hot_dog/target/dx/hot_dog/bundle/macos/bundle/dmg/HotDog_0.1.0_aarch64.dmg]&quot;</span><span style=\"color:#f8f8f2;\">,</span><span style=\"color:#ffee99;\">&quot;target&quot;</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ffee99;\">&quot;dx::cli::bundle&quot;</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">{{</span><span style=\"color:#ffee99;\">&quot;timestamp&quot;</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ffee99;\">&quot;   9.927s&quot;</span><span style=\"color:#f8f8f2;\">,</span><span style=\"color:#ffee99;\">&quot;level&quot;</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ffee99;\">&quot;DEBUG&quot;</span><span style=\"color:#f8f8f2;\">,</span><span style=\"color:#ffee99;\">&quot;json&quot;</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ffee99;\">&quot;{{</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">BundleOutput</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">:{{</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">bundles</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">:[</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">/Users/jonkelley/Development/Tinkering/06-demos/hot_dog/target/dx/hot_dog/bundle/macos/bundle/macos/HotDog.app</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">,</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">/Users/jonkelley/Development/Tinkering/06-demos/hot_dog/target/dx/hot_dog/bundle/macos/bundle/dmg/HotDog_0.1.0_aarch64.dmg</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">]}}}}&quot;</span><span style=\"color:#f8f8f2;\">,</span><span style=\"color:#ffee99;\">&quot;target&quot;</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ffee99;\">&quot;dx&quot;</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        p {
            "JSON mode works with all  "
            code { "dx" }
            " commands. However, it is most useful with  "
            code { "dx build" }
            " and  "
            code { "dx bundle" }
            ". The CLI always guarantees that the last emitted line is the result of the command. To collect the list of bundles from the  "
            code { "dx bundle" }
            " command, we can use  "
            code { "tail -1" }
            " and simple jq."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">dx bundle </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">platform desktop \\\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">json</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">output \\\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">verbose \\\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">|</span><span style=\"color:#f8f8f2;\"> tail </span><span style=\"color:#f92672;\">-</span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\"> \\\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">|</span><span style=\"color:#f8f8f2;\"> jq </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">r </span><span style=\"color:#f92672;\">&#39;</span><span style=\"color:#f8f8f2;\">.json </span><span style=\"color:#f92672;\">|</span><span style=\"color:#f8f8f2;\"> fromjson </span><span style=\"color:#f92672;\">|</span><span style=\"color:#f8f8f2;\"> .BundleOutput.bundles []</span><span style=\"color:#f92672;\">&#39;</span></pre>\n",
        }
        p { "This returns the list of bundles:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">Users</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">jonkelley</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">Development</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">Tinkering</span><span style=\"color:#f92672;\">/</span><span style=\"color:#ff80f4;\">06</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">demos</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">hot_dog</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">target</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">dx</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">hot_dog</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">bundle</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">macos</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">bundle</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">macos</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">HotDog.app\n</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">Users</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">jonkelley</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">Development</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">Tinkering</span><span style=\"color:#f92672;\">/</span><span style=\"color:#ff80f4;\">06</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">demos</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">hot_dog</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">target</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">dx</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">hot_dog</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">bundle</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">macos</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">bundle</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">dmg</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">HotDog_0.</span><span style=\"color:#ff80f4;\">1.0_</span><span style=\"color:#f8f8f2;\">aarch64.dmg</span></pre>\n",
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuideDeploySection {
    #[default]
    Empty,
    Deploying,
    DioxusDeploy,
    DeployingYourDesktopAndMobileApps,
    DeployRequirements,
    ChoosingADeployProvider,
    BuildingADockerfile,
    DeployingToFly,
    ContinuousDeployment,
    FullstackDesktopAndMobile,
    NextSteps,
}
impl std::str::FromStr for GuideDeploySection {
    type Err = GuideDeploySectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "deploying" => Ok(Self::Deploying),
            "dioxus-deploy" => Ok(Self::DioxusDeploy),
            "deploying-your-desktop-and-mobile-apps" => Ok(Self::DeployingYourDesktopAndMobileApps),
            "deploy-requirements" => Ok(Self::DeployRequirements),
            "choosing-a-deploy-provider" => Ok(Self::ChoosingADeployProvider),
            "building-a-dockerfile" => Ok(Self::BuildingADockerfile),
            "deploying-to-fly" => Ok(Self::DeployingToFly),
            "continuous-deployment" => Ok(Self::ContinuousDeployment),
            "fullstack-desktop-and-mobile" => Ok(Self::FullstackDesktopAndMobile),
            "next-steps" => Ok(Self::NextSteps),
            _ => Err(GuideDeploySectionParseError),
        }
    }
}
impl std::fmt::Display for GuideDeploySection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Deploying => f.write_str("deploying"),
            Self::DioxusDeploy => f.write_str("dioxus-deploy"),
            Self::DeployingYourDesktopAndMobileApps => {
                f.write_str("deploying-your-desktop-and-mobile-apps")
            }
            Self::DeployRequirements => f.write_str("deploy-requirements"),
            Self::ChoosingADeployProvider => f.write_str("choosing-a-deploy-provider"),
            Self::BuildingADockerfile => f.write_str("building-a-dockerfile"),
            Self::DeployingToFly => f.write_str("deploying-to-fly"),
            Self::ContinuousDeployment => f.write_str("continuous-deployment"),
            Self::FullstackDesktopAndMobile => f.write_str("fullstack-desktop-and-mobile"),
            Self::NextSteps => f.write_str("next-steps"),
        }
    }
}
#[derive(Debug)]
pub struct GuideDeploySectionParseError;
impl std::fmt::Display for GuideDeploySectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuideDeploySectiondeploying, dioxus-deploy, deploying-your-desktop-and-mobile-apps, deploy-requirements, choosing-a-deploy-provider, building-a-dockerfile, deploying-to-fly, continuous-deployment, fullstack-desktop-and-mobile, next-steps",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuideDeploySectionParseError {}
#[component(no_case_check)]
pub fn GuideDeploy(section: GuideDeploySection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "deploying",
            Link {
                to: BookRoute::GuideDeploy {
                    section: GuideDeploySection::Deploying,
                },
                class: "header",
                "Deploying"
            }
        }
        p {
            "We're "
            em { "finally" }
            " ready to deploy our bundled apps into the world. Congrats on making it this far!"
        }
        p {
            "This step is optional for the tutorial but worth covering to understand the process. Feel free to skip ahead to "
            Link {
                to: BookRoute::GuideNextSteps {
                    section: GuideNextStepsSection::Empty,
                },
                "next steps"
            }
            " if you're not interested in deploying."
        }
        h2 { id: "dioxus-deploy",
            Link {
                to: BookRoute::GuideDeploy {
                    section: GuideDeploySection::DioxusDeploy,
                },
                class: "header",
                "Dioxus Deploy"
            }
        }
        p {
            "As mentioned in the "
            Link {
                to: BookRoute::Index {
                    section: IndexSection::WhosFundingDioxus,
                },
                "introduction"
            }
            ", Dioxus is an independent project with aspirations to fund itself through a paid deploy platform. Hopefully, one day, enough people ship apps with "
            Link { to: "https://dioxuslabs.com/deploy", "Dioxus Deploy" }
            " to fund development on Dioxus itself!"
        }
        p {
            "Currently, Dioxus does not provide its own deploy platform. If you want to sign-up for the beta and help us design the ideal \"end-to-end app-development experience,\" please "
            Link { to: "https://forms.gle/zeBZmrjSkajqg7hUA", "join the waitlist!" }
        }
        p {
            img {
                src: asset!(
                    "/assets/06_docs/deploy_screenshot.png", ImageAssetOptions::new().with_avif()
                ),
                alt: "Deploy",
                title: "",
            }
        }
        h2 { id: "deploying-your-desktop-and-mobile-apps",
            Link {
                to: BookRoute::GuideDeploy {
                    section: GuideDeploySection::DeployingYourDesktopAndMobileApps,
                },
                class: "header",
                "Deploying your Desktop and Mobile apps"
            }
        }
        p {
            "Generally, deploying a desktop app is as simple as distributing the bundle directly. Simply upload your app bundles to a host like GitHub or S3. With a download link, your users can easily download and install your apps."
        }
        blockquote {
            p {
                "📣 When shipping fullstack apps to production, you'll want to make sure to set your backend API URL properly as "
                Link {
                    to: BookRoute::GuideDeploy {
                        section: GuideDeploySection::FullstackDesktopAndMobile,
                    },
                    "covered later"
                }
                "."
            }
        }
        p {
            "If you'd like to distribute your app through app stores, you'll need to follow some additional steps."
        }
        ul {
            li {
                Link { to: "https://developer.apple.com/ios/submit/", "iOS" }
                ": Directly publish to the Apple App Store"
            }
            li {
                Link { to: "https://developer.apple.com/macos/submit/", "macOS" }
                ": Directly publish to the Apple App Store"
            }
            li {
                Link { to: "https://developer.android.com/studio/publish", "Android" }
                ": Directly publish to the Google Play Store"
            }
        }
        p {
            "Tauri provides some "
            Link { to: "https://tauri.app/distribute/", "helpful guides" }
            " for deploying Tauri apps which, while not Dioxus apps, need to follow many of the same steps for deploying to app stores."
        }
        p { "Making native app distribution easier is a top priority for Dioxus Deploy!" }
        h2 { id: "deploy-requirements",
            Link {
                to: BookRoute::GuideDeploy {
                    section: GuideDeploySection::DeployRequirements,
                },
                class: "header",
                "Deploy Requirements"
            }
        }
        p {
            "Dioxus web apps are structured as a Client bundle and a Server executable. Generally, any deploy provider that exposes a simple container will be sufficient for a Dioxus fullstack web application."
        }
        p {
            "Some providers like "
            Link { to: "http://workers.cloudflare.com", "Cloudflare Workers" }
            " and "
            Link { to: "https://www.fermyon.com/spin", "Fermyon Spin" }
            " provide WASM-based containers for apps. WASM runtimes are typically cheaper to operate and can horizontally scale better than a traditional virtual-machine based container. When deploying on WASM runtimes, you will need to create a WASM build of your server manually."
        }
        p {
            "Running the webserver is as simple as executing  "
            code { "./server" }
            ". Make sure to set the IP and PORT environment variables correctly:"
        }
        p {
            img {
                src: asset!("/assets/06_docs/serving_server.png", ImageAssetOptions::new().with_avif()),
                alt: "Serving a Server",
                title: "",
            }
        }
        h2 { id: "choosing-a-deploy-provider",
            Link {
                to: BookRoute::GuideDeploy {
                    section: GuideDeploySection::ChoosingADeployProvider,
                },
                class: "header",
                "Choosing a deploy provider"
            }
        }
        p {
            "There are "
            em { "many" }
            " deploy providers! We're not going to get too deep into the pros/cons of any particular provider. Generally, providers are good at one of a few categories: price, performance, UI/UX, advanced features, and enterprise requirements."
        }
        p {
            "Depending on your app, you might have strict requirements like SOC2 or HIPAA compliance. Make sure to do your own research for your own use-case."
        }
        ul {
            li {
                Link { to: "http://aws.amazon.com", "AWS" }
                ": Full-featured cloud provider powered by Amazon."
            }
            li {
                Link { to: "https://cloud.google.com", "GCP" }
                ": Full-featured cloud provider powered by Google."
            }
            li {
                Link { to: "http://azure.microsoft.com", "Azure" }
                ": Full-featured cloud provider powered by Microsoft."
            }
            li {
                Link { to: "http://fly.io", "Fly.io" }
                ": Simple scale-to-zero micro-vm-based cloud with integrated wireguard."
            }
            li {
                Link { to: "https://vercel.com", "Vercel" }
                ": Developer-focused cloud built on AWS cloud functions popular with JavaScript frameworks."
            }
            li {
                Link { to: "http://render.com", "Render" }
                ": A \"Modern Heroku\" focused on developer experience and simplicity."
            }
            li {
                Link { to: "https://www.digitalocean.com", "Digital Ocean" }
                ": A cloud built around virtual machines, databases, and storage."
            }
        }
        p {
            "For "
            em { "HotDog" }
            " we're going to deploy on "
            Link { to: "http://fly.io", "Fly.io" }
            ". We like "
            Link { to: "http://fly.io", "Fly.io" }
            " for a number of reasons. Most importantly, Fly is built on Amazon's "
            Link { to: "https://firecracker-microvm.github.io", "Firecracker" }
            " project which is entirely written in Rust!"
        }
        p {
            "Fly is also quite simple to get started - just log in with either your GitHub account or Google account."
        }
        h2 { id: "building-a-dockerfile",
            Link {
                to: BookRoute::GuideDeploy {
                    section: GuideDeploySection::BuildingADockerfile,
                },
                class: "header",
                "Building a Dockerfile"
            }
        }
        p {
            "Some deploy providers have prebuilt solutions for various runtimes. For example, some have dedicated NodeJS and Python runtimes with strict requirements."
        }
        p {
            "With Rust apps, there generally isn't a prebuilt \"pack\" to target. In these cases, we need to write a simple Dockerfile which compiles and starts our apps."
        }
        p {
            "Our Dockerfile will have three phases. The first phase downloads and caches dependencies so incremental builds stay fast:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#ff80f4;\">FROM</span><span style=\"color:#f8f8f2;\"> rust:</span><span style=\"color:#ff80f4;\">1 AS</span><span style=\"color:#f8f8f2;\"> chef\n</span><span style=\"color:#ff80f4;\">RUN</span><span style=\"color:#f8f8f2;\"> cargo install cargo</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">chef\n</span><span style=\"color:#ff80f4;\">WORKDIR </span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">app\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#ff80f4;\">FROM</span><span style=\"color:#f8f8f2;\"> chef </span><span style=\"color:#ff80f4;\">AS</span><span style=\"color:#f8f8f2;\"> planner\n</span><span style=\"color:#ff80f4;\">COPY</span><span style=\"color:#f8f8f2;\"> . .\n</span><span style=\"color:#ff80f4;\">RUN</span><span style=\"color:#f8f8f2;\"> cargo chef prepare </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">recipe</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">path recipe.json</span></pre>\n",
        }
        p { "In the second phase, we use cargo chef to load cached dependencies and preform the build:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#ff80f4;\">FROM</span><span style=\"color:#f8f8f2;\"> chef </span><span style=\"color:#ff80f4;\">AS</span><span style=\"color:#f8f8f2;\"> builder\n</span><span style=\"color:#ff80f4;\">COPY </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">from</span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\">planner </span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">app</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">recipe.json recipe.json\n</span><span style=\"color:#ff80f4;\">RUN</span><span style=\"color:#f8f8f2;\"> cargo chef cook </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">release </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">recipe</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">path recipe.json\n</span><span style=\"color:#ff80f4;\">COPY</span><span style=\"color:#f8f8f2;\"> . .\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> Install `dx`\n</span><span style=\"color:#ff80f4;\">RUN</span><span style=\"color:#f8f8f2;\"> curl </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">L </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">proto </span><span style=\"color:#f92672;\">&#39;=</span><span style=\"color:#f8f8f2;\">https</span><span style=\"color:#f92672;\">&#39; --</span><span style=\"color:#f8f8f2;\">tlsv1.</span><span style=\"color:#ff80f4;\">2 </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">sSf https:</span><span style=\"color:#8c8c8c;\">//raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash\n</span><span style=\"color:#ff80f4;\">RUN</span><span style=\"color:#f8f8f2;\"> cargo binstall dioxus</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">cli </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">root </span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">.cargo </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">y </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">force\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> Create the </span><span style=\"background-color:#f92672;color:#f8f8f0;\">final</span><span style=\"color:#f8f8f2;\"> bundle folder. Bundle always executes </span><span style=\"color:#f92672;\">in</span><span style=\"color:#f8f8f2;\"> release mode with optimizations enabled\n</span><span style=\"color:#ff80f4;\">RUN</span><span style=\"color:#f8f8f2;\"> dx bundle </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">platform web</span></pre>\n",
        }
        p { "Finally, we copy the built \"web\" folder to the \"slim\" runtime that serves our app." }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#ff80f4;\">FROM</span><span style=\"color:#f8f8f2;\"> chef </span><span style=\"color:#ff80f4;\">AS</span><span style=\"color:#f8f8f2;\"> runtime\n</span><span style=\"color:#ff80f4;\">COPY </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">from</span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\">builder </span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">app</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">target</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">dx</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">hot_dog</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">release</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">web</span><span style=\"color:#f92672;\">/ /</span><span style=\"color:#f8f8f2;\">usr</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">local</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">app\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> set our port and make sure to listen </span><span style=\"color:#f92672;\">for</span><span style=\"color:#f8f8f2;\"> all connections\n</span><span style=\"color:#ff80f4;\">ENV PORT</span><span style=\"color:#f92672;\">=</span><span style=\"color:#ff80f4;\">8080\n</span><span style=\"color:#ff80f4;\">ENV IP</span><span style=\"color:#f92672;\">=</span><span style=\"color:#ff80f4;\">0.0</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#ff80f4;\">0.0\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> expose the port </span><span style=\"color:#ff80f4;\">8080\n</span><span style=\"color:#ff80f4;\">EXPOSE 8080\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#ff80f4;\">WORKDIR </span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">usr</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">local</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">app\n</span><span style=\"color:#ff80f4;\">ENTRYPOINT </span><span style=\"color:#f8f8f2;\">[ </span><span style=\"color:#ffee99;\">&quot;/usr/local/app/server&quot; </span><span style=\"color:#f8f8f2;\">]</span></pre>\n",
        }
        p {
            "It's also a smart idea to set up a  "
            code { ".dockerignore" }
            " file:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">**/</span><span style=\"color:#f8f8f2;\">target\n</span><span style=\"color:#f92672;\">**/</span><span style=\"color:#f8f8f2;\">dist\n</span><span style=\"color:#ff80f4;\">LICENSES\n</span><span style=\"color:#ff80f4;\">LICENSE\n</span><span style=\"color:#f8f8f2;\">temp\n</span><span style=\"color:#ff80f4;\">README</span><span style=\"color:#f8f8f2;\">.md</span></pre>\n" }
        h2 { id: "deploying-to-fly",
            Link {
                to: BookRoute::GuideDeploy {
                    section: GuideDeploySection::DeployingToFly,
                },
                class: "header",
                "Deploying to Fly"
            }
        }
        p {
            "To get started with Fly, we need to go through the "
            Link { to: "https://fly.io/app/sign-up", "Sign Up flow" }
            " and enter our details. This shouldn't take too long."
        }
        p {
            "We'll add the dockerfile from above along with the dockerignore. We'll want to "
            Link { to: "https://fly.io/docs/flyctl/install/",
                "install  "
                code { "flyctl" }
            }
            " which also installs the "
            code { "fly" }
            " CLI."
        }
        p {
            "Let's call "
            Link { to: "https://fly.io/docs/flyctl/launch/",
                code { "fly launch" }
            }
            " which will automatically initialize our "
            code { "fly.toml" }
            "."
        }
        p {
            img {
                src: asset!("/assets/06_docs/fly_launch.png", ImageAssetOptions::new().with_avif()),
                alt: "Fly Launch",
                title: "",
            }
        }
        p {
            code { "fly launch" }
            " will spin up a build machine for us and build our app. In a minute or two, our app should be fully built and deployed."
        }
        p {
            "If we ever want to re-deploy our code, we can run  "
            code { "fly deploy" }
            "."
        }
        p {
            video {
                src: asset!("/assets/06_docs/fly_deploy.mp4"),
                alt: "Running fly deploy",
                title: "",
                autoplay: true,
                muted: true,
                r#loop: true,
                playsinline: true,
                preload: "metadata",
            }
        }
        p {
            "We can also add a volume to our app to persist our Sqlite database by adding a  "
            code { "[mounts]" }
            " section to our Fly.toml:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[mounts]\n</span><span style=\"color:#f8f8f2;\">  source </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;hotdogdb&quot;\n</span><span style=\"color:#f8f8f2;\">  destination </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;/usr/local/app/hotdogdb&quot;</span></pre>\n" }
        p {
            "Once the build is complete, Fly will assign our app a URL that we can customize later. With any luck, our app should be live!"
        }
        p {
            img {
                src: asset!("/assets/06_docs/fly-deployed.png", ImageAssetOptions::new().with_avif()),
                alt: "Live App",
                title: "",
            }
        }
        h2 { id: "continuous-deployment",
            Link {
                to: BookRoute::GuideDeploy {
                    section: GuideDeploySection::ContinuousDeployment,
                },
                class: "header",
                "Continuous Deployment"
            }
        }
        p {
            "Fly also supports "
            Link { to: "https://fly.io/docs/app-guides/continuous-deployment-with-github-actions/",
                "continuous deployment"
            }
            ". Whenever we push to our GitHub repository, we can execute "
            code { "fly deploy" }
            " automatically. This can serve as a foundation for staging environments and automatic releases."
        }
        p {
            "Our app just needs a  "
            code { ".github/workflows/fly-deploy.yml" }
            "."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">name: Fly Deploy\n</span><span style=\"color:#f8f8f2;\">on:\n</span><span style=\"color:#f8f8f2;\">  push:\n</span><span style=\"color:#f8f8f2;\">    branches:\n</span><span style=\"color:#f8f8f2;\">      </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\"> main\n</span><span style=\"color:#f8f8f2;\">jobs:\n</span><span style=\"color:#f8f8f2;\">  deploy:\n</span><span style=\"color:#f8f8f2;\">    name: Deploy app\n</span><span style=\"color:#f8f8f2;\">    runs</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">on: ubuntu</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">latest\n</span><span style=\"color:#f8f8f2;\">    concurrency: deploy</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">group\n</span><span style=\"color:#f8f8f2;\">    steps:\n</span><span style=\"color:#f8f8f2;\">      </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\"> uses: actions</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">checkout</span><span style=\"color:#f92672;\">@</span><span style=\"color:#f8f8f2;\">v4\n</span><span style=\"color:#f8f8f2;\">      </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\"> uses: superfly</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">flyctl</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">actions</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">setup</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">flyctl</span><span style=\"color:#f92672;\">@</span><span style=\"color:#f8f8f2;\">master\n</span><span style=\"color:#f8f8f2;\">      </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\"> run: flyctl deploy </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">remote</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">only\n</span><span style=\"color:#f8f8f2;\">        env:\n</span><span style=\"color:#f8f8f2;\">          </span><span style=\"color:#ff80f4;\">FLY_API_TOKEN</span><span style=\"color:#f8f8f2;\">: </span><span style=\"color:#f92672;\">$</span><span style=\"color:#f8f8f2;\">{{{{ secrets.</span><span style=\"color:#ff80f4;\">FLY_API_TOKEN </span><span style=\"color:#f8f8f2;\">}}}}</span></pre>\n",
        }
        h2 { id: "fullstack-desktop-and-mobile",
            Link {
                to: BookRoute::GuideDeploy {
                    section: GuideDeploySection::FullstackDesktopAndMobile,
                },
                class: "header",
                "Fullstack Desktop and Mobile"
            }
        }
        p {
            "Now that our backend is live, we can wire up the API to our native apps. By default, Dioxus doesn't know where to find your API, so you'll need to specify the URL manually by calling  "
            code { "server_fn::client::set_server_url" }
            "."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">main</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    #[cfg(not(feature </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;server&quot;</span><span style=\"color:#f8f8f2;\">))]\n</span><span style=\"color:#f8f8f2;\">    server_fn::client::set_server_url(</span><span style=\"color:#ffee99;\">&quot;https://hot-dog.fly.dev&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    dioxus::launch(app);\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "Note that as our app changes, the \"true\" endpoint of our server functions might change. The  "
            code { "#[server]" }
            " macro generates an API endpoint with the form of  "
            code { "/api/fetch_dogs-jkhj12" }
            " where the trailing data is a unique hash. As we update our server functions, the hash will change."
        }
        p {
            "To make server functions maintain a stable endpoint, we can manually name them with the  "
            code { "endpoint = \"xyz\"" }
            " attribute."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[server(endpoint </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;list_dogs&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\"> async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">list_dogs</span><span style=\"color:#f8f8f2;\">() -&gt; Result&lt;Vec&lt;(</span><span style=\"font-style:italic;color:#66d9ef;\">usize</span><span style=\"color:#f8f8f2;\">, String)&gt;, ServerFnError&gt; {{ </span><span style=\"color:#8c8c8c;\">/* ... */ </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[server(endpoint </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;remove_dog&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\"> async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">remove_dog</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">id</span><span style=\"color:#f8f8f2;\">: </span><span style=\"font-style:italic;color:#66d9ef;\">usize</span><span style=\"color:#f8f8f2;\">) -&gt; Result&lt;(), ServerFnError&gt; {{ </span><span style=\"color:#8c8c8c;\">/* ... */ </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[server(endpoint </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;save_dog&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\"> async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">save_dog</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">image</span><span style=\"color:#f8f8f2;\">: String) -&gt; Result&lt;(), ServerFnError&gt; {{ </span><span style=\"color:#8c8c8c;\">/* ... */ </span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        p {
            "Let's re-deploy our web app with  "
            code { "fly deploy" }
            ". This deploy should complete faster thanks to  "
            code { "cargo chef" }
            " caching our build."
        }
        p {
            "Now, with  "
            code { "dx serve --platform desktop" }
            ", we should be able to interact with the same backend across web and desktop."
        }
        p { "Amazing! Our startup is coming along nicely." }
        p {
            img {
                src: asset!(
                    "/assets/06_docs/full-crossplatform.png", ImageAssetOptions::new().with_avif()
                ),
                alt: "Full Cross Build",
                title: "",
            }
        }
        h2 { id: "next-steps",
            Link {
                to: BookRoute::GuideDeploy {
                    section: GuideDeploySection::NextSteps,
                },
                class: "header",
                "Next Steps"
            }
        }
        p { "Our app isn't done yet, but this guide has become pretty long!" }
        p { "There's so much extra to do:" }
        ul {
            li { "Adding users, login, and auth." }
            li { "Protecting our site from DDOS with tools Cloudflare." }
            li { "Adding more features" }
            li { "Marketing and sharing with friends!" }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuideNextStepsSection {
    #[default]
    Empty,
    WrappingUp,
    UpNext,
    IdeasForNewFeatures,
    Faq,
    IsDioxusFast,
    IsRustTooHard,
    DoesDioxusSupportXyz,
    WhyRsxInsteadOfHtml,
    ShouldIUseDioxusOrTauriOrLeptosOrIcedOr,
}
impl std::str::FromStr for GuideNextStepsSection {
    type Err = GuideNextStepsSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "wrapping-up" => Ok(Self::WrappingUp),
            "up-next" => Ok(Self::UpNext),
            "ideas-for-new-features" => Ok(Self::IdeasForNewFeatures),
            "faq" => Ok(Self::Faq),
            "is-dioxus-fast" => Ok(Self::IsDioxusFast),
            "is-rust-too-hard" => Ok(Self::IsRustTooHard),
            "does-dioxus-support-xyz" => Ok(Self::DoesDioxusSupportXyz),
            "why-rsx-instead-of-html" => Ok(Self::WhyRsxInsteadOfHtml),
            "should-i-use-dioxus-or-tauri-or-leptos-or-iced-or" => {
                Ok(Self::ShouldIUseDioxusOrTauriOrLeptosOrIcedOr)
            }
            _ => Err(GuideNextStepsSectionParseError),
        }
    }
}
impl std::fmt::Display for GuideNextStepsSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::WrappingUp => f.write_str("wrapping-up"),
            Self::UpNext => f.write_str("up-next"),
            Self::IdeasForNewFeatures => f.write_str("ideas-for-new-features"),
            Self::Faq => f.write_str("faq"),
            Self::IsDioxusFast => f.write_str("is-dioxus-fast"),
            Self::IsRustTooHard => f.write_str("is-rust-too-hard"),
            Self::DoesDioxusSupportXyz => f.write_str("does-dioxus-support-xyz"),
            Self::WhyRsxInsteadOfHtml => f.write_str("why-rsx-instead-of-html"),
            Self::ShouldIUseDioxusOrTauriOrLeptosOrIcedOr => {
                f.write_str("should-i-use-dioxus-or-tauri-or-leptos-or-iced-or")
            }
        }
    }
}
#[derive(Debug)]
pub struct GuideNextStepsSectionParseError;
impl std::fmt::Display for GuideNextStepsSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuideNextStepsSectionwrapping-up, up-next, ideas-for-new-features, faq, is-dioxus-fast, is-rust-too-hard, does-dioxus-support-xyz, why-rsx-instead-of-html, should-i-use-dioxus-or-tauri-or-leptos-or-iced-or",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuideNextStepsSectionParseError {}
#[component(no_case_check)]
pub fn GuideNextSteps(section: GuideNextStepsSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "wrapping-up",
            Link {
                to: BookRoute::GuideNextSteps {
                    section: GuideNextStepsSection::WrappingUp,
                },
                class: "header",
                "Wrapping Up"
            }
        }
        p {
            "Congrats on making it through our "
            em { "HotDog" }
            " tutorial!"
        }
        p { "Hopefully this isn't the end of our journey, but rather, a bold new beginning." }
        h2 { id: "up-next",
            Link {
                to: BookRoute::GuideNextSteps {
                    section: GuideNextStepsSection::UpNext,
                },
                class: "header",
                "Up Next"
            }
        }
        p {
            "We strongly recommend moving on to the "
            Link {
                to: BookRoute::EssentialsIndex {
                    section: EssentialsIndexSection::Empty,
                },
                "Essential Topics"
            }
            " to become familiar with the important details of Dioxus."
        }
        p { "The essentials section will guide you through key concepts in Dioxus:" }
        ul {
            li {
                p {
                    Link {
                        to: BookRoute::EssentialsRsxIndex {
                            section: EssentialsRsxIndexSection::Empty,
                        },
                        "Building UIs with RSX"
                    }
                    " will teach you how to define html inside your Dioxus app with rsx."
                }
            }
            li {
                p {
                    Link {
                        to: BookRoute::EssentialsLifecycleIndex {
                            section: EssentialsLifecycleIndexSection::Empty,
                        },
                        "Component Lifecycle"
                    }
                    " teaches you about the lifecycle of components along with the hooks you need to run code when the component is first created, mounted, and removed."
                }
            }
            li {
                p {
                    Link {
                        to: BookRoute::EssentialsStateIndex {
                            section: EssentialsStateIndexSection::Empty,
                        },
                        "Managing State"
                    }
                    " guides you through how state works in Dioxus. It will teach you how to create state with "
                    code { "use_signal" }
                    ", derive state with "
                    code { "use_memo" }
                    ", and integrate state with asynchronous tasks with "
                    code { "use_resource" }
                    ". Along the way, you will learn about you can use reactivity to declaratively describe your UI."
                }
            }
            li {
                p {
                    Link {
                        to: BookRoute::EssentialsBreakingIndex {
                            section: EssentialsBreakingIndexSection::Empty,
                        },
                        "Breaking Out"
                    }
                    " will teach you how to break out of Dioxus' rendering model to run JavaScript or interact with the DOM directly with "
                    code { "web-sys" }
                    "."
                }
            }
        }
        h2 { id: "ideas-for-new-features",
            Link {
                to: BookRoute::GuideNextSteps {
                    section: GuideNextStepsSection::IdeasForNewFeatures,
                },
                class: "header",
                "Ideas for New Features"
            }
        }
        p {
            "Challenge yourself by adding new features to "
            em { "HotDog" }
            "."
        }
        ul {
            li {
                "Add animations to your app with CSS or "
                Link { to: "https://github.com/wheregmis/dioxus-motion", "dioxus-motion" }
                "."
            }
            li {
                "Style your app with a library like "
                Link { to: "http://tailwindcss.com", "TailwindCSS" }
                "."
            }
            li { "Add inputs to allow users to upload their own dog photos." }
            li { "Make it social! Add login, user accounts, and a feed." }
            li { "Remix HotDog for something entirely new." }
        }
        h2 { id: "faq",
            Link {
                to: BookRoute::GuideNextSteps {
                    section: GuideNextStepsSection::Faq,
                },
                class: "header",
                "FAQ"
            }
        }
        p {
            "You might be curious how particular features work in Dioxus. Let's try to address a few popular question:"
        }
        h3 { id: "is-dioxus-fast",
            Link {
                to: BookRoute::GuideNextSteps {
                    section: GuideNextStepsSection::IsDioxusFast,
                },
                class: "header",
                "Is Dioxus Fast?"
            }
        }
        p {
            "Dioxus is really fast. Dioxus is built around an "
            em { "extremely" }
            " performant VirtualDom. While a VirtualDom might sound like "
            Link { to: "https://svelte.dev/blog/virtual-dom-is-pure-overhead", "\"pure overhead\"" }
            ", Dioxus leverages compile-time optimizations that make it faster than nearly all UI frameworks."
        }
        p {
            "On the web, Dioxus "
            Link { to: "https://krausest.github.io/js-framework-benchmark/2023/table_chrome_120.0.6099.62.html",
                "is on par with frameworks like Solid and Svelte"
            }
            " which leveragea new reactivity models or custom compilers."
        }
        h3 { id: "is-rust-too-hard",
            Link {
                to: BookRoute::GuideNextSteps {
                    section: GuideNextStepsSection::IsRustTooHard,
                },
                class: "header",
                "Is Rust too hard?"
            }
        }
        p {
            "Rust is a notoriously difficult language to learn, but it's extremely powerful. Dioxus has been designed to use the \"easy\" parts of Rust. For example, Dioxus primarily uses single-threaded code and avoids complicated generic interfaces."
        }
        p {
            "All-in-all, the productivity you gain by building once and deploying everywhere usually makes up for the steeper learning curve. Plus, as Dioxus matures, interfaces become easier to use and the ecosystem improves."
        }
        h3 { id: "does-dioxus-support-xyz",
            Link {
                to: BookRoute::GuideNextSteps {
                    section: GuideNextStepsSection::DoesDioxusSupportXyz,
                },
                class: "header",
                "Does Dioxus support \"xyz\"?"
            }
        }
        ul {
            li {
                "TailwindCSS: Yes, but it requires an additional step, see the "
                Link {
                    to: BookRoute::CookbookTailwind {
                        section: CookbookTailwindSection::Empty,
                    },
                    "docs for more info"
                }
                "."
            }
            li {
                "Native Widgets: Yes, but you might need to write this code yourself. The Rust ecosystem is young."
            }
            li { "Shadcn-ui: Not yet, a radix-ui port to Dioxus is underway but we're not done yet." }
            li {
                "Actix/Rocket: Yes, kind-of. In Dioxus, Server-Functions are built on axum, but you can use server-side-rendering with any framework."
            }
            li {
                "Static-site-generation: Yes! The docs are currently under construction, so stay tuned. 🏗\u{fe0f}"
            }
            li {
                "Animations: Yes, you can use CSS animations, "
                Link { to: "https://github.com/wheregmis/dioxus-motion", "dioxus-motion" }
                ", or integrate with the system animation APIs."
            }
            li { "Accessibility: Yes. Use semantic HTML and aria-tags for good screen-reader support." }
            li {
                "WGPU: Yes, kinda. You can overlay Dioxus on a WGPU scene or experiment with Dioxus-Native which renders with WGPU."
            }
            li {
                "AI: Yes, you can interface with providers like "
                Link { to: "https://crates.io/crates/openai-api-rs", "OpenAI" }
                " or even "
                Link { to: "https://github.com/DioxusLabs/dioxus-ai", "build your own provider" }
                "."
            }
        }
        p { "If you have an FAQ not covered here, suggest an edit!" }
        h3 { id: "why-rsx-instead-of-html",
            Link {
                to: BookRoute::GuideNextSteps {
                    section: GuideNextStepsSection::WhyRsxInsteadOfHtml,
                },
                class: "header",
                "Why RSX instead of HTML?"
            }
        }
        p {
            "If you've seen React's JSX or the  "
            code { "html!{{}}" }
            " Rust macro, you might be curious as to why Dioxus chose to use its own syntax instead of a syntax that looks more similar to HTML."
        }
        p { "A few reasons:" }
        ul {
            li { "RSX gets token coloring and code-folding without additional tooling" }
            li { "RSX is faster to type since curly braces are auto-closed" }
            li { "Not all RSX is HTML - Dioxus can be used in non-HTML contexts" }
            li { "HTML is not valid Rust - not all HTML can be used in html!{{}}" }
        }
        p {
            "We want the out-of-the-box experience for Dioxus to be great without setting up any custom tooling."
        }
        p {
            "The Dioxus "
            Link { to: "http://marketplace.visualstudio.com/items?itemName=DioxusLabs.dioxus",
                "VSCode Extension"
            }
            " can convert HTML to RSX as well as the CLI with "
            code { "dx translate" }
            "."
        }
        h3 { id: "should-i-use-dioxus-or-tauri-or-leptos-or-iced-or",
            Link {
                to: BookRoute::GuideNextSteps {
                    section: GuideNextStepsSection::ShouldIUseDioxusOrTauriOrLeptosOrIcedOr,
                },
                class: "header",
                "Should I use Dioxus or Tauri or Leptos or Iced or...?"
            }
        }
        p {
            "There's a budding ecosystem of Rust projects for building apps and websites! We have a good comparison in our "
            Link { to: "https://github.com/DioxusLabs/dioxus#dioxus-vs-other-frameworks",
                "Readme.md"
            }
        }
        p {
            "Dioxus is an \"all-in-one\" solution for building apps with Rust. We try to be helpful every step of the way: getting started, iterating, testing, bundling, and deploying."
        }
        ul {
            li {
                strong { "Tauri" }
                ": You can use Dioxus with Tauri, but we focus primarily on the standalone Dioxus experience. Tauri is a good choice if you want to use a JavaScript frontend or need full-featured access to the Webview DOM."
            }
            li {
                strong { "Leptos" }
                ": Dioxus and Leptos are both good choices for fullstack web development with differences in syntax and reactivity models. Dioxus is architected to support desktop and mobile \"1st-class\" whereas Leptos is primarily a web framework."
            }
            li {
                strong { "Iced:" }
                " Iced is GUI framework that renders using its own render engine, making it highly customizable. Iced is a good choice for apps that need access to lower-level rendering through WGPU. Dioxus will be releasing its own WGPU renderer in early 2025, so stay tuned!"
            }
        }
        p {
            "Dioxus is quite a large project and has been a bit slower to mature than other projects with larger development teams or smaller scopes. With 0.6, Dioxus is more mature but still has some ground to cover."
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum EssentialsIndexSection {
    #[default]
    Empty,
    CoreTopics,
}
impl std::str::FromStr for EssentialsIndexSection {
    type Err = EssentialsIndexSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "core-topics" => Ok(Self::CoreTopics),
            _ => Err(EssentialsIndexSectionParseError),
        }
    }
}
impl std::fmt::Display for EssentialsIndexSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::CoreTopics => f.write_str("core-topics"),
        }
    }
}
#[derive(Debug)]
pub struct EssentialsIndexSectionParseError;
impl std::fmt::Display for EssentialsIndexSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str("Invalid section name. Expected one of EssentialsIndexSectioncore-topics")?;
        Ok(())
    }
}
impl std::error::Error for EssentialsIndexSectionParseError {}
#[component(no_case_check)]
pub fn EssentialsIndex(section: EssentialsIndexSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "core-topics",
            Link {
                to: BookRoute::EssentialsIndex {
                    section: EssentialsIndexSection::CoreTopics,
                },
                class: "header",
                "Core Topics"
            }
        }
        p { "This section will guide you through key concepts in Dioxus:" }
        ul {
            li {
                p {
                    Link {
                        to: BookRoute::EssentialsRsxIndex {
                            section: EssentialsRsxIndexSection::Empty,
                        },
                        "Building UIs with RSX"
                    }
                    " will teach you how to define html inside your Dioxus app with rsx."
                }
            }
            li {
                p {
                    Link {
                        to: BookRoute::EssentialsLifecycleIndex {
                            section: EssentialsLifecycleIndexSection::Empty,
                        },
                        "Component Lifecycle"
                    }
                    " teaches you about the lifecycle of components along with the hooks you need to run code when the component is first created, mounted, and removed."
                }
            }
            li {
                p {
                    Link {
                        to: BookRoute::EssentialsStateIndex {
                            section: EssentialsStateIndexSection::Empty,
                        },
                        "Managing State"
                    }
                    " guides you through how state works in Dioxus. It will teach you how to create state with "
                    code { "use_signal" }
                    ", derive state with "
                    code { "use_memo" }
                    ", and integrate state with asynchronous tasks with "
                    code { "use_resource" }
                    ". Along the way, you will learn about you can use reactivity to declaratively describe your UI."
                }
            }
            li {
                p {
                    Link {
                        to: BookRoute::EssentialsBreakingIndex {
                            section: EssentialsBreakingIndexSection::Empty,
                        },
                        "Breaking Out"
                    }
                    " will teach you how to break out of Dioxus' rendering model to run JavaScript or interact with the DOM directly with "
                    code { "web-sys" }
                    "."
                }
            }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum EssentialsRsxIndexSection {
    #[default]
    Empty,
    BuildingUisWithRsx,
    TextNodes,
    Elements,
    Attributes,
    ConditionalAttributes,
    EventListeners,
    Children,
    Loops,
    IfStatements,
    WhyRsxAndNotHtml,
}
impl std::str::FromStr for EssentialsRsxIndexSection {
    type Err = EssentialsRsxIndexSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "building-uis-with-rsx" => Ok(Self::BuildingUisWithRsx),
            "text-nodes" => Ok(Self::TextNodes),
            "elements" => Ok(Self::Elements),
            "attributes" => Ok(Self::Attributes),
            "conditional-attributes" => Ok(Self::ConditionalAttributes),
            "event-listeners" => Ok(Self::EventListeners),
            "children" => Ok(Self::Children),
            "loops" => Ok(Self::Loops),
            "if-statements" => Ok(Self::IfStatements),
            "why-rsx-and-not-html-" => Ok(Self::WhyRsxAndNotHtml),
            _ => Err(EssentialsRsxIndexSectionParseError),
        }
    }
}
impl std::fmt::Display for EssentialsRsxIndexSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::BuildingUisWithRsx => f.write_str("building-uis-with-rsx"),
            Self::TextNodes => f.write_str("text-nodes"),
            Self::Elements => f.write_str("elements"),
            Self::Attributes => f.write_str("attributes"),
            Self::ConditionalAttributes => f.write_str("conditional-attributes"),
            Self::EventListeners => f.write_str("event-listeners"),
            Self::Children => f.write_str("children"),
            Self::Loops => f.write_str("loops"),
            Self::IfStatements => f.write_str("if-statements"),
            Self::WhyRsxAndNotHtml => f.write_str("why-rsx-and-not-html-"),
        }
    }
}
#[derive(Debug)]
pub struct EssentialsRsxIndexSectionParseError;
impl std::fmt::Display for EssentialsRsxIndexSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of EssentialsRsxIndexSectionbuilding-uis-with-rsx, text-nodes, elements, attributes, conditional-attributes, event-listeners, children, loops, if-statements, why-rsx-and-not-html-",
        )?;
        Ok(())
    }
}
impl std::error::Error for EssentialsRsxIndexSectionParseError {}
#[component(no_case_check)]
pub fn EssentialsRsxIndex(section: EssentialsRsxIndexSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "building-uis-with-rsx",
            Link {
                to: BookRoute::EssentialsRsxIndex {
                    section: EssentialsRsxIndexSection::BuildingUisWithRsx,
                },
                class: "header",
                "Building UIs with RSX"
            }
        }
        p {
            "Dioxus renders to HTML, if you are not familiar with HTML, this guide will help you get started with the basics. For more detail, the "
            Link { to: "https://developer.mozilla.org/en-US/docs/Web/HTML", "MDN docs" }
            " are a great resource."
        }
        h2 { id: "text-nodes",
            Link {
                to: BookRoute::EssentialsRsxIndex {
                    section: EssentialsRsxIndexSection::TextNodes,
                },
                class: "header",
                "Text Nodes"
            }
        }
        p { "Any content surrounded by quotes is rendered as a text node in rsx:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#ffee99;\">&quot;Hello world&quot;\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "building_uis_with_rsx.rs".to_string(),
        }
        DemoFrame { building_uis_with_rsx::Text {} }
        p {
            "You can include formatted segments inside of the text just like the  "
            code { "format!" }
            " macro:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> user </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| User {{\n</span><span style=\"color:#f8f8f2;\">    name: </span><span style=\"color:#ffee99;\">&quot;Dioxus&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">(),\n</span><span style=\"color:#f8f8f2;\">}});\n</span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Unlike the format macro, you can include many expressions inline in the formatted text\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#ffee99;\">&quot;Hello {{user.read().name}}&quot;\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "building_uis_with_rsx.rs".to_string(),
        }
        DemoFrame { building_uis_with_rsx::FormattedText {} }
        h2 { id: "elements",
            Link {
                to: BookRoute::EssentialsRsxIndex {
                    section: EssentialsRsxIndexSection::Elements,
                },
                class: "header",
                "Elements"
            }
        }
        p {
            "The most basic building block of HTML is an element. In rsx, you can create elements with the name and then curly braces. One of the most common elements is the  "
            code { "input" }
            " element. The input element creates an interactive input box:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    input {{}}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "building_uis_with_rsx.rs".to_string(),
        }
        DemoFrame { building_uis_with_rsx::Input {} }
        blockquote {
            p {
                "Bonus: web components"
                " "
                "Any element with a dash in the name is a web component. Web components are rendered directly in dioxus without type checking. We recommend wrapping web components in a type safe component to make them easier to use."
            }
            CodeBlock {
                contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    my</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">web</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">component {{}}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
                name: "building_uis_with_rsx.rs".to_string(),
            }
        }
        h2 { id: "attributes",
            Link {
                to: BookRoute::EssentialsRsxIndex {
                    section: EssentialsRsxIndexSection::Attributes,
                },
                class: "header",
                "Attributes"
            }
        }
        p {
            "Attributes provide extra information about an element. You can specify attributes in dioxus inside an element's braces by typing the name of the attribute, a colon, and then the value (typically a formatted string). We can use an attribute to set the  "
            code { "type" }
            " of an input element. The default type is  "
            code { "text" }
            " which shows a text input box, but we can set it to  "
            code { "number" }
            " to only accept numbers:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    input {{ </span><span style=\"font-style:italic;color:#66d9ef;\">type</span><span style=\"color:#f8f8f2;\">: </span><span style=\"color:#ffee99;\">&quot;number&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "building_uis_with_rsx.rs".to_string(),
        }
        DemoFrame { building_uis_with_rsx::InputType {} }
        p {
            "Just like text nodes, attributes can include formatted segments. We can set the value of the input element to a signal to control it:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> value </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ffee99;\">&quot;Hello world&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">());\n</span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    input {{ value: </span><span style=\"color:#ffee99;\">&quot;{{value}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "building_uis_with_rsx.rs".to_string(),
        }
        DemoFrame { building_uis_with_rsx::InputValue {} }
        h3 { id: "conditional-attributes",
            Link {
                to: BookRoute::EssentialsRsxIndex {
                    section: EssentialsRsxIndexSection::ConditionalAttributes,
                },
                class: "header",
                "Conditional Attributes"
            }
        }
        p {
            "You can conditionally set an attribute by setting the attribute value to an unterminated if statement. If the if statement evaluates to true, the attribute will be set:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> number_type </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">false</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    input {{ </span><span style=\"font-style:italic;color:#66d9ef;\">type</span><span style=\"color:#f8f8f2;\">: </span><span style=\"color:#f92672;\">if </span><span style=\"color:#66d9ef;\">number_type</span><span style=\"color:#f8f8f2;\">() {{ </span><span style=\"color:#ffee99;\">&quot;number&quot; </span><span style=\"color:#f8f8f2;\">}} }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "building_uis_with_rsx.rs".to_string(),
        }
        DemoFrame { building_uis_with_rsx::InputDisabled {} }
        h2 { id: "event-listeners",
            Link {
                to: BookRoute::EssentialsRsxIndex {
                    section: EssentialsRsxIndexSection::EventListeners,
                },
                class: "header",
                "Event Listeners"
            }
        }
        p {
            "Event listeners allow you to respond to user input. In rsx, event handlers always start with  "
            code { "on" }
            ". The syntax is the same as normal attributes, but event handlers only accept a closure that responds to the event. We can attach an event listener to the  "
            code { "oninput" }
            " event of the input element to listen for changes to the input:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> value </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ffee99;\">&quot;Hello world&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">());\n</span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    input {{\n</span><span style=\"color:#f8f8f2;\">        oninput: </span><span style=\"color:#f92672;\">move |</span><span style=\"color:#f8f8f2;\">event</span><span style=\"color:#f92672;\">|</span><span style=\"color:#f8f8f2;\"> value.</span><span style=\"color:#66d9ef;\">set</span><span style=\"color:#f8f8f2;\">(event.</span><span style=\"color:#66d9ef;\">value</span><span style=\"color:#f8f8f2;\">()),\n</span><span style=\"color:#f8f8f2;\">        value: </span><span style=\"color:#ffee99;\">&quot;{{value}}&quot;\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "building_uis_with_rsx.rs".to_string(),
        }
        DemoFrame { building_uis_with_rsx::OnInput {} }
        h2 { id: "children",
            Link {
                to: BookRoute::EssentialsRsxIndex {
                    section: EssentialsRsxIndexSection::Children,
                },
                class: "header",
                "Children"
            }
        }
        p {
            "You can add children to an element after all attributes and event listeners. Elements can accept text, components or other elements as children. We can add a  "
            code { "div" }
            " element around our input to center it:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    div {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// display sets the layout mode of the element\n</span><span style=\"color:#f8f8f2;\">        display: </span><span style=\"color:#ffee99;\">&quot;flex&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// justify-content centers the element horizontally\n</span><span style=\"color:#f8f8f2;\">        justify_content: </span><span style=\"color:#ffee99;\">&quot;center&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">        input {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"font-style:italic;color:#66d9ef;\">type</span><span style=\"color:#f8f8f2;\">: </span><span style=\"color:#ffee99;\">&quot;number&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "building_uis_with_rsx.rs".to_string(),
        }
        DemoFrame { building_uis_with_rsx::InputChildren {} }
        h2 { id: "loops",
            Link {
                to: BookRoute::EssentialsRsxIndex {
                    section: EssentialsRsxIndexSection::Loops,
                },
                class: "header",
                "Loops"
            }
        }
        p {
            "You can insert for loops directly in rsx. The body of the loop accepts any number of children that will be rendered with each iteration of the loop. The  "
            code { "ul" }
            " element in html renders an unordered list with any number of  "
            code { "li" }
            " (list item) elements. We can use those two elements to render a list of items in a loop:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> items </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| vec![</span><span style=\"color:#ffee99;\">&quot;Hello&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;Dioxus&quot;</span><span style=\"color:#f8f8f2;\">]);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    ul {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">for</span><span style=\"color:#f8f8f2;\"> item </span><span style=\"color:#f92672;\">in</span><span style=\"color:#f8f8f2;\"> items.</span><span style=\"color:#66d9ef;\">iter</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">            li {{ </span><span style=\"color:#ffee99;\">&quot;{{item}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "building_uis_with_rsx.rs".to_string(),
        }
        DemoFrame { building_uis_with_rsx::ForLoop {} }
        p {
            "Each item in your list should have unique value that is stable across rerenders called a key. Keys are used to identify how items move while diffing. Without keys, it is easy to accidentally lose or move state when you reorder items in a list. We can add keys to our list items by using the  "
            code { "key" }
            " attribute:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> items </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| vec![</span><span style=\"color:#ffee99;\">&quot;Hello&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;Dioxus&quot;</span><span style=\"color:#f8f8f2;\">]);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    ul {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">for</span><span style=\"color:#f8f8f2;\"> item </span><span style=\"color:#f92672;\">in</span><span style=\"color:#f8f8f2;\"> items.</span><span style=\"color:#66d9ef;\">iter</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">            li {{ key: </span><span style=\"color:#ffee99;\">&quot;{{item}}&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;{{item}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "building_uis_with_rsx.rs".to_string(),
        }
        DemoFrame { building_uis_with_rsx::KeyedForLoop {} }
        h2 { id: "if-statements",
            Link {
                to: BookRoute::EssentialsRsxIndex {
                    section: EssentialsRsxIndexSection::IfStatements,
                },
                class: "header",
                "If Statements"
            }
        }
        p {
            "You can also use if/else statements in rsx. Each branch of the if statement accepts child nodes that will be rendered if the condition is true. We can use the  "
            code { "if" }
            " statement to conditionally render a login screen:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> logged_in </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">false</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    div {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">if </span><span style=\"color:#66d9ef;\">logged_in</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;You are logged in&quot;\n</span><span style=\"color:#f8f8f2;\">        }} </span><span style=\"color:#f92672;\">else </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;You are not logged in&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "building_uis_with_rsx.rs".to_string(),
        }
        DemoFrame { building_uis_with_rsx::IfStatement {} }
        h2 { id: "why-rsx-and-not-html-",
            Link {
                to: BookRoute::EssentialsRsxIndex {
                    section: EssentialsRsxIndexSection::WhyRsxAndNotHtml,
                },
                class: "header",
                "Why RSX and not HTML ?"
            }
        }
        p {
            "If you've seen React's JSX or the  "
            code { "html!{{}}" }
            " Rust macro, you might be curious as to why Dioxus chose to use its own syntax instead of a syntax that looks more similar to HTML."
        }
        p { "A few reasons:" }
        ul {
            li { "RSX gets token coloring and code-folding without additional tooling" }
            li { "RSX is faster to type since curly braces are auto-closed" }
            li { "Not all RSX is HTML - Dioxus can be used in non-HTML contexts" }
            li { "HTML is not valid Rust - not all HTML can be used in html!{{}}" }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum EssentialsLifecycleIndexSection {
    #[default]
    Empty,
    ComponentLifecycle,
    InitializingStateWithUseHook,
    Rerendering,
    DontMutateStateInTheBodyOfAComponent,
    UsingEffects,
    CleaningUpComponentsWithDrop,
}
impl std::str::FromStr for EssentialsLifecycleIndexSection {
    type Err = EssentialsLifecycleIndexSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "component-lifecycle" => Ok(Self::ComponentLifecycle),
            "initializing-state-with-use-hook" => Ok(Self::InitializingStateWithUseHook),
            "rerendering" => Ok(Self::Rerendering),
            "-dont-mutate-state-in-the-body-of-a-component" => {
                Ok(Self::DontMutateStateInTheBodyOfAComponent)
            }
            "using-effects" => Ok(Self::UsingEffects),
            "cleaning-up-components-with-drop" => Ok(Self::CleaningUpComponentsWithDrop),
            _ => Err(EssentialsLifecycleIndexSectionParseError),
        }
    }
}
impl std::fmt::Display for EssentialsLifecycleIndexSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::ComponentLifecycle => f.write_str("component-lifecycle"),
            Self::InitializingStateWithUseHook => f.write_str("initializing-state-with-use-hook"),
            Self::Rerendering => f.write_str("rerendering"),
            Self::DontMutateStateInTheBodyOfAComponent => {
                f.write_str("-dont-mutate-state-in-the-body-of-a-component")
            }
            Self::UsingEffects => f.write_str("using-effects"),
            Self::CleaningUpComponentsWithDrop => f.write_str("cleaning-up-components-with-drop"),
        }
    }
}
#[derive(Debug)]
pub struct EssentialsLifecycleIndexSectionParseError;
impl std::fmt::Display for EssentialsLifecycleIndexSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of EssentialsLifecycleIndexSectioncomponent-lifecycle, initializing-state-with-use-hook, rerendering, -dont-mutate-state-in-the-body-of-a-component, using-effects, cleaning-up-components-with-drop",
        )?;
        Ok(())
    }
}
impl std::error::Error for EssentialsLifecycleIndexSectionParseError {}
#[component(no_case_check)]
pub fn EssentialsLifecycleIndex(
    section: EssentialsLifecycleIndexSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "component-lifecycle",
            Link {
                to: BookRoute::EssentialsLifecycleIndex {
                    section: EssentialsLifecycleIndexSection::ComponentLifecycle,
                },
                class: "header",
                "Component Lifecycle"
            }
        }
        h2 { id: "initializing-state-with-use-hook",
            Link {
                to: BookRoute::EssentialsLifecycleIndex {
                    section: EssentialsLifecycleIndexSection::InitializingStateWithUseHook,
                },
                class: "header",
                "Initializing State with use_hook"
            }
        }
        p {
            code { "use_hook" }
            " lets you create new state for your component. The closure you pass to  "
            code { "use_hook" }
            " will be called once the first time the component is rendered. Every time the component is re-rendered, the value that was created the first run will be re-used."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">UseHook</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// The closure that is passed to use_hook will be called once the first time the component is rendered\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> random_number </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_hook</span><span style=\"color:#f8f8f2;\">(|| {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> new_random_number </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">random_number</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        log!(</span><span style=\"color:#ffee99;\">&quot;{{new_random_number}}&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        new_random_number\n</span><span style=\"color:#f8f8f2;\">    }});\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ </span><span style=\"color:#ffee99;\">&quot;Random {{random_number}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "component_lifecycle.rs".to_string(),
        }
        DemoFrame { component_lifecycle::UseHookDemo {} }
        h2 { id: "rerendering",
            Link {
                to: BookRoute::EssentialsLifecycleIndex {
                    section: EssentialsLifecycleIndexSection::Rerendering,
                },
                class: "header",
                "Rerendering"
            }
        }
        p {
            "You can use "
            Link {
                to: BookRoute::EssentialsStateIndex {
                    section: EssentialsStateIndexSection::Empty,
                },
                "tracked values"
            }
            " to re-render your component whenever a value changes. "
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Rerenders</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    log!(</span><span style=\"color:#ffee99;\">&quot;Rerendering parent component with {{}}&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">count.</span><span style=\"color:#66d9ef;\">peek</span><span style=\"color:#f8f8f2;\">());\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        button {{ onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">+= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;Increment&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// Since we read count here, the component will rerender when count changes\n</span><span style=\"color:#f8f8f2;\">        Count {{ current_count: </span><span style=\"color:#66d9ef;\">count</span><span style=\"color:#f8f8f2;\">() }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// If the count prop changes, the component will rerender\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Count</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">current_count</span><span style=\"color:#f8f8f2;\">: </span><span style=\"font-style:italic;color:#66d9ef;\">i32</span><span style=\"color:#f8f8f2;\">) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    log!(</span><span style=\"color:#ffee99;\">&quot;Rerendering child component with {{current_count}}&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ </span><span style=\"color:#ffee99;\">&quot;The count is {{current_count}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "component_lifecycle.rs".to_string(),
        }
        DemoFrame { component_lifecycle::RerenderDemo {} }
        h3 { id: "-dont-mutate-state-in-the-body-of-a-component",
            Link {
                to: BookRoute::EssentialsLifecycleIndex {
                    section: EssentialsLifecycleIndexSection::DontMutateStateInTheBodyOfAComponent,
                },
                class: "header",
                "⚠\u{fe0f} Don't mutate state in the body of a component"
            }
        }
        p {
            "You should avoid changing state in the body of a component. If you read and write to state in the body of a component, you can cause an infinite loop as the component tries to rerender because of the change which triggers another state change."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Bad</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// ❌ Don&#39;t mutate state in the body of the component.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// It can easily cause an infinite loop!\n</span><span style=\"color:#f8f8f2;\">    count </span><span style=\"color:#f92672;\">+= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{ </span><span style=\"color:#ffee99;\">&quot;{{count}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "component_lifecycle.rs".to_string(),
        }
        p {
            "Instead, derive state with  "
            code { "use_memo" }
            ",  "
            code { "use_resource" }
            ", or mutate state in a effect."
        }
        h2 { id: "using-effects",
            Link {
                to: BookRoute::EssentialsLifecycleIndex {
                    section: EssentialsLifecycleIndexSection::UsingEffects,
                },
                class: "header",
                "Using Effects"
            }
        }
        p { "You can use effects to run code whenever a component is rendered." }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Effect</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Effects run after the component is rendered\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// You can use them to read or modify the rendered component\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">use_effect</span><span style=\"color:#f8f8f2;\">(|| {{\n</span><span style=\"color:#f8f8f2;\">        log!(</span><span style=\"color:#ffee99;\">&quot;Effect ran&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">        document::eval(</span><span style=\"color:#f92672;\">&amp;</span><span style=\"color:#f8f8f2;\">format!(\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;document.getElementById(&#39;effect-output&#39;).innerText = &#39;Effect ran&#39;&quot;\n</span><span style=\"color:#f8f8f2;\">        ));\n</span><span style=\"color:#f8f8f2;\">    }});\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ id: </span><span style=\"color:#ffee99;\">&quot;effect-output&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;This will be changed by the effect&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "component_lifecycle.rs".to_string(),
        }
        DemoFrame { component_lifecycle::EffectDemo {} }
        h2 { id: "cleaning-up-components-with-drop",
            Link {
                to: BookRoute::EssentialsLifecycleIndex {
                    section: EssentialsLifecycleIndexSection::CleaningUpComponentsWithDrop,
                },
                class: "header",
                "Cleaning Up Components with Drop"
            }
        }
        p {
            "Before a component is dropped, it will drop all of its hooks. You can use this drop behavior to clean up any resources that your component is using. If you just need the drop effect, you can use the "
            Link { to: "https://docs.rs/dioxus/latest/dioxus/prelude/fn.use_drop.html",
                code { "use_drop" }
            }
            " hook."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">TogglesChild</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> show </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">true</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        button {{ onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> show.</span><span style=\"color:#66d9ef;\">toggle</span><span style=\"color:#f8f8f2;\">(), </span><span style=\"color:#ffee99;\">&quot;Toggle&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">if </span><span style=\"color:#66d9ef;\">show</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">            Child {{}}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Child</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// You can use the use_drop hook to clean up any resources\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">use_drop</span><span style=\"color:#f8f8f2;\">(|| {{\n</span><span style=\"color:#f8f8f2;\">        log!(</span><span style=\"color:#ffee99;\">&quot;Child dropped&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">    }});\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ </span><span style=\"color:#ffee99;\">&quot;Child&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "component_lifecycle.rs".to_string(),
        }
        DemoFrame { component_lifecycle::DropDemo {} }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum EssentialsStateIndexSection {
    #[default]
    Empty,
    ManagingState,
    CreatingState,
    ReactiveScopes,
    DerivedState,
    DerivedAsyncState,
    DerivedUi,
    WorkingWithUntrackedState,
    MakingPropsReactive,
    MovingAroundState,
    PassingProps,
    PassingContext,
    UsingGlobals,
}
impl std::str::FromStr for EssentialsStateIndexSection {
    type Err = EssentialsStateIndexSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "managing-state" => Ok(Self::ManagingState),
            "creating-state" => Ok(Self::CreatingState),
            "reactive-scopes" => Ok(Self::ReactiveScopes),
            "derived-state" => Ok(Self::DerivedState),
            "derived-async-state" => Ok(Self::DerivedAsyncState),
            "derived-ui" => Ok(Self::DerivedUi),
            "working-with-untracked-state" => Ok(Self::WorkingWithUntrackedState),
            "making-props-reactive" => Ok(Self::MakingPropsReactive),
            "moving-around-state" => Ok(Self::MovingAroundState),
            "passing-props" => Ok(Self::PassingProps),
            "passing-context" => Ok(Self::PassingContext),
            "using-globals" => Ok(Self::UsingGlobals),
            _ => Err(EssentialsStateIndexSectionParseError),
        }
    }
}
impl std::fmt::Display for EssentialsStateIndexSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::ManagingState => f.write_str("managing-state"),
            Self::CreatingState => f.write_str("creating-state"),
            Self::ReactiveScopes => f.write_str("reactive-scopes"),
            Self::DerivedState => f.write_str("derived-state"),
            Self::DerivedAsyncState => f.write_str("derived-async-state"),
            Self::DerivedUi => f.write_str("derived-ui"),
            Self::WorkingWithUntrackedState => f.write_str("working-with-untracked-state"),
            Self::MakingPropsReactive => f.write_str("making-props-reactive"),
            Self::MovingAroundState => f.write_str("moving-around-state"),
            Self::PassingProps => f.write_str("passing-props"),
            Self::PassingContext => f.write_str("passing-context"),
            Self::UsingGlobals => f.write_str("using-globals"),
        }
    }
}
#[derive(Debug)]
pub struct EssentialsStateIndexSectionParseError;
impl std::fmt::Display for EssentialsStateIndexSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of EssentialsStateIndexSectionmanaging-state, creating-state, reactive-scopes, derived-state, derived-async-state, derived-ui, working-with-untracked-state, making-props-reactive, moving-around-state, passing-props, passing-context, using-globals",
        )?;
        Ok(())
    }
}
impl std::error::Error for EssentialsStateIndexSectionParseError {}
#[component(no_case_check)]
pub fn EssentialsStateIndex(section: EssentialsStateIndexSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "managing-state",
            Link {
                to: BookRoute::EssentialsStateIndex {
                    section: EssentialsStateIndexSection::ManagingState,
                },
                class: "header",
                "Managing State"
            }
        }
        p {
            "In Dioxus, your app is defined as a function of the current state. As the state changes, the parts of your app that depend on that state will automatically re-run. Reactivity automatically tracks state and updates derived state in your application."
        }
        h2 { id: "creating-state",
            Link {
                to: BookRoute::EssentialsStateIndex {
                    section: EssentialsStateIndexSection::CreatingState,
                },
                class: "header",
                "Creating State"
            }
        }
        p {
            "You can create mutable state in Dioxus with Signals. Signals are tracked values that automatically update your app when you change them. They form the skeleton of your app's state from which you can derive other state. Signals are often driven directly from user input through event handlers or async tasks."
        }
        p {
            "You can create a signal with the  "
            code { "use_signal" }
            " hook:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> signal </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);</span></pre>\n",
            name: "reactivity.rs".to_string(),
        }
        p {
            "Once you have your signal, you can clone it by calling the signal like a function or get a reference to the inner value with the  "
            code { ".read()" }
            " method:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// Call the signal like a function to clone the current value\n</span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> value: </span><span style=\"font-style:italic;color:#66d9ef;\">i32 </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">signal</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#8c8c8c;\">// get a reference to the inner value with the .read() method\n</span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> value: </span><span style=\"color:#f92672;\">&amp;</span><span style=\"font-style:italic;color:#66d9ef;\">i32 </span><span style=\"color:#f92672;\">= &amp;</span><span style=\"color:#f8f8f2;\">signal.</span><span style=\"color:#66d9ef;\">read</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#8c8c8c;\">// or use one of the traits implemented for Signal like Display\n</span><span style=\"color:#f8f8f2;\">log!(</span><span style=\"color:#ffee99;\">&quot;{{signal}}&quot;</span><span style=\"color:#f8f8f2;\">);</span></pre>\n",
            name: "reactivity.rs".to_string(),
        }
        p {
            "Finally, you can set the value of the signal with the  "
            code { ".set()" }
            " method or get a mutable reference to the inner value with the  "
            code { ".write()" }
            " method:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// Set the value from the signal\n</span><span style=\"color:#f8f8f2;\">signal.</span><span style=\"color:#66d9ef;\">set</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#8c8c8c;\">// get a mutable reference to the inner value with the .write() method\n</span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> value: </span><span style=\"color:#f92672;\">&amp;mut </span><span style=\"font-style:italic;color:#66d9ef;\">i32 </span><span style=\"color:#f92672;\">= &amp;mut</span><span style=\"color:#f8f8f2;\"> signal.</span><span style=\"color:#66d9ef;\">write</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">value </span><span style=\"color:#f92672;\">+= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">;</span></pre>\n",
            name: "reactivity.rs".to_string(),
        }
        h3 { id: "reactive-scopes",
            Link {
                to: BookRoute::EssentialsStateIndex {
                    section: EssentialsStateIndexSection::ReactiveScopes,
                },
                class: "header",
                "Reactive Scopes"
            }
        }
        p {
            "The simplest reactive primitive in Dioxus is the  "
            code { "use_effect" }
            " hook. It creates a closure that is run any time a tracked value that is run inside the closure changes."
        }
        p {
            "Any value you read inside the closure will become a dependency of the effect. If the value changes, the effect will rerun."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Effect</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// use_signal creates a tracked value called count\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">use_effect</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">move || </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// When we read count, it becomes a dependency of the effect\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> current_count </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">count</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// Whenever count changes, the effect will rerun\n</span><span style=\"color:#f8f8f2;\">        log!(</span><span style=\"color:#ffee99;\">&quot;{{current_count}}&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">    }});\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        button {{ onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">+= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;Increment&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        div {{ </span><span style=\"color:#ffee99;\">&quot;Count is {{count}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "reactivity.rs".to_string(),
        }
        DemoFrame { reactivity::EffectDemo {} }
        h3 { id: "derived-state",
            Link {
                to: BookRoute::EssentialsStateIndex {
                    section: EssentialsStateIndexSection::DerivedState,
                },
                class: "header",
                "Derived State"
            }
        }
        p {
            code { "use_memo" }
            " is a reactive primitive that lets you derive state from any tracked value. It takes a closure that computes the new state and returns a tracked value with the current state of the memo. Any time a dependency of the memo changes, the memo will rerun."
        }
        p {
            "The value you return from the closure will only change when the output of the closure changes ( "
            code { "PartialEq" }
            " between the old and new value returns false)."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Memo</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// use_memo creates a tracked value that is derived from count\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Since we read count inside the closure, it becomes a dependency of the memo\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Whenever count changes, the memo will rerun\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> half_count </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_memo</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">move || </span><span style=\"color:#66d9ef;\">count</span><span style=\"color:#f8f8f2;\">() </span><span style=\"color:#f92672;\">/ </span><span style=\"color:#ff80f4;\">2</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">use_effect</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">move || </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// half_count is itself a tracked value\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// When we read half_count, it becomes a dependency of the effect\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// and the effect will rerun when half_count changes\n</span><span style=\"color:#f8f8f2;\">        log!(</span><span style=\"color:#ffee99;\">&quot;{{half_count}}&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">    }});\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        button {{ onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">+= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;Increment&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        div {{ </span><span style=\"color:#ffee99;\">&quot;Count is {{count}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        div {{ </span><span style=\"color:#ffee99;\">&quot;Half count is {{half_count}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "reactivity.rs".to_string(),
        }
        DemoFrame { reactivity::MemoDemo {} }
        h3 { id: "derived-async-state",
            Link {
                to: BookRoute::EssentialsStateIndex {
                    section: EssentialsStateIndexSection::DerivedAsyncState,
                },
                class: "header",
                "Derived Async State"
            }
        }
        p {
            code { "use_resource" }
            " is a reactive primitive that lets you derive state from any async closure. It takes an async closure that computes the new state and returns a tracked value with the current state of the resource. Any time a dependency of the resource changes, the resource will rerun."
        }
        p {
            "The value you return from the closure will only change when the state of the future changes. Unlike  "
            code { "use_memo" }
            ", the resource's output is not memoized with  "
            code { "PartialEq" }
            "."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Resource</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// use_resource creates a tracked value that is derived from count\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Since we read count inside the closure, it becomes a dependency of the resource\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Whenever count changes, the resource will rerun\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> half_count </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_resource</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">move ||</span><span style=\"color:#f8f8f2;\"> async </span><span style=\"color:#f92672;\">move </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// You can do async work inside resources\n</span><span style=\"color:#f8f8f2;\">        gloo_timers::future::TimeoutFuture::new(</span><span style=\"color:#ff80f4;\">100</span><span style=\"color:#f8f8f2;\">).await;\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#66d9ef;\">count</span><span style=\"color:#f8f8f2;\">() </span><span style=\"color:#f92672;\">/ </span><span style=\"color:#ff80f4;\">2\n</span><span style=\"color:#f8f8f2;\">    }});\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">use_effect</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">move || </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// half_count is itself a tracked value\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// When we read half_count, it becomes a dependency of the effect\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// and the effect will rerun when half_count changes\n</span><span style=\"color:#f8f8f2;\">        log!(</span><span style=\"color:#ffee99;\">&quot;{{:?}}&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#66d9ef;\">half_count</span><span style=\"color:#f8f8f2;\">());\n</span><span style=\"color:#f8f8f2;\">    }});\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        button {{ onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">+= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;Change Signal&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        div {{ </span><span style=\"color:#ffee99;\">&quot;Count is {{count}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        div {{ </span><span style=\"color:#ffee99;\">&quot;Half count is {{half_count():?}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "reactivity.rs".to_string(),
        }
        DemoFrame { reactivity::ResourceDemo {} }
        h3 { id: "derived-ui",
            Link {
                to: BookRoute::EssentialsStateIndex {
                    section: EssentialsStateIndexSection::DerivedUi,
                },
                class: "header",
                "Derived UI"
            }
        }
        p {
            "Components are functions that return some UI. They memorize the output of the function just like memos. Components keep track of any dependencies you read inside the component and rerun when those dependencies change."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Component</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        button {{ onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">+= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;Change Signal&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// Since we read count inside Component, it becomes a dependency of Component\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// Whenever count changes, Component will rerun\n</span><span style=\"color:#f8f8f2;\">        Count {{ count: </span><span style=\"color:#66d9ef;\">count</span><span style=\"color:#f8f8f2;\">() }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// Components automatically memorize their props. If the props change, Count will rerun\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Count</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">count</span><span style=\"color:#f8f8f2;\">: </span><span style=\"font-style:italic;color:#66d9ef;\">i32</span><span style=\"color:#f8f8f2;\">) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ </span><span style=\"color:#ffee99;\">&quot;Count: {{count}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "reactivity.rs".to_string(),
        }
        DemoFrame { reactivity::ComponentDemo {} }
        h3 { id: "working-with-untracked-state",
            Link {
                to: BookRoute::EssentialsStateIndex {
                    section: EssentialsStateIndexSection::WorkingWithUntrackedState,
                },
                class: "header",
                "Working with Untracked State"
            }
        }
        p {
            "Most of the state in your app will be tracked values. All built in hooks return tracked values, and we encourage custom hooks to do the same. However, there are times when you need to work with untracked state. For example, you may receive a raw untracked value in props. When you read an untracked value inside a reactive context, it will not subscribe to the value:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Component</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        button {{ onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">+= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;Change Signal&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        Count {{ count: </span><span style=\"color:#66d9ef;\">count</span><span style=\"color:#f8f8f2;\">() }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// The count reruns the component when it changes, but it is not a tracked value\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Count</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">count</span><span style=\"color:#f8f8f2;\">: </span><span style=\"font-style:italic;color:#66d9ef;\">i32</span><span style=\"color:#f8f8f2;\">) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// When you read count inside the memo, it does not subscribe to the count signal\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// because the value is not reactive\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> double_count </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_memo</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">move ||</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">* </span><span style=\"color:#ff80f4;\">2</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ </span><span style=\"color:#ffee99;\">&quot;Double count: {{double_count}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "reactivity.rs".to_string(),
        }
        DemoFrame { reactivity::NonReactiveDemo {} }
        p {
            "You can start tracking raw state with the  "
            code { "use_reactive" }
            " hook. This hook takes a tuple of dependencies and returns a reactive closure. When the closure is called in a reactive context, it will track subscribe to the dependencies and rerun the closure when the dependencies change."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Count</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">count</span><span style=\"color:#f8f8f2;\">: </span><span style=\"font-style:italic;color:#66d9ef;\">i32</span><span style=\"color:#f8f8f2;\">) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// You can manually track a non-reactive value with the use_reactive hook\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> double_count </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_memo</span><span style=\"color:#f8f8f2;\">(\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// Use reactive takes a tuple of dependencies and returns a reactive closure\n</span><span style=\"color:#f8f8f2;\">        use_reactive!(|(</span><span style=\"font-style:italic;color:#fd971f;\">count</span><span style=\"color:#f8f8f2;\">,)| count </span><span style=\"color:#f92672;\">* </span><span style=\"color:#ff80f4;\">2</span><span style=\"color:#f8f8f2;\">),\n</span><span style=\"color:#f8f8f2;\">    );\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ </span><span style=\"color:#ffee99;\">&quot;Double count: {{double_count}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "reactivity.rs".to_string(),
        }
        DemoFrame { reactivity::UseReactiveDemo {} }
        h3 { id: "making-props-reactive",
            Link {
                to: BookRoute::EssentialsStateIndex {
                    section: EssentialsStateIndexSection::MakingPropsReactive,
                },
                class: "header",
                "Making Props Reactive"
            }
        }
        p {
            "To avoid losing reactivity with props, we recommend you wrap any props you want to track in a  "
            code { "ReadOnlySignal" }
            ". Dioxus will automatically convert  "
            code { "T" }
            " into  "
            code { "ReadOnlySignal<T>" }
            " when you pass props to the component. This will ensure your props are tracked and rerun any state you derive in the component:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// You can track props by wrapping the type in a ReadOnlySignal\n</span><span style=\"color:#8c8c8c;\">// Dioxus will automatically convert T into ReadOnlySignal&lt;T&gt; when you pass\n</span><span style=\"color:#8c8c8c;\">// props to the component\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Count</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">count</span><span style=\"color:#f8f8f2;\">: ReadOnlySignal&lt;</span><span style=\"font-style:italic;color:#66d9ef;\">i32</span><span style=\"color:#f8f8f2;\">&gt;) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Then when you read count inside the memo, it subscribes to the count signal\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> double_count </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_memo</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">move || </span><span style=\"color:#66d9ef;\">count</span><span style=\"color:#f8f8f2;\">() </span><span style=\"color:#f92672;\">* </span><span style=\"color:#ff80f4;\">2</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ </span><span style=\"color:#ffee99;\">&quot;Double count: {{double_count}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "reactivity.rs".to_string(),
        }
        DemoFrame { reactivity::MakingPropsReactiveDemo {} }
        h2 { id: "moving-around-state",
            Link {
                to: BookRoute::EssentialsStateIndex {
                    section: EssentialsStateIndexSection::MovingAroundState,
                },
                class: "header",
                "Moving Around State"
            }
        }
        p {
            "As you create signals and derived state in your app, you will need to move around that state between components. Dioxus provides three different ways to pass around state:"
        }
        h3 { id: "passing-props",
            Link {
                to: BookRoute::EssentialsStateIndex {
                    section: EssentialsStateIndexSection::PassingProps,
                },
                class: "header",
                "Passing props"
            }
        }
        p {
            "You can pass your values through component "
            Link {
                to: BookRoute::ReferenceComponentProps {
                    section: ReferenceComponentPropsSection::Empty,
                },
                "props"
            }
            ". This should be your default when passing around state. It is the most explicit and local to your component. Use this until it gets annoying to pass around the value:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">ParentComponent</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#ffee99;\">&quot;Count is {{count}}&quot;\n</span><span style=\"color:#f8f8f2;\">        IncrementButton {{\n</span><span style=\"color:#f8f8f2;\">            count\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">IncrementButton</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">mut </span><span style=\"font-style:italic;color:#fd971f;\">count</span><span style=\"color:#f8f8f2;\">: Signal&lt;</span><span style=\"font-style:italic;color:#66d9ef;\">i32</span><span style=\"color:#f8f8f2;\">&gt;) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        button {{\n</span><span style=\"color:#f8f8f2;\">            onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">+= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;Increment&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "moving_state_around.rs".to_string(),
        }
        DemoFrame { moving_state_around::PassingProps {} }
        h3 { id: "passing-context",
            Link {
                to: BookRoute::EssentialsStateIndex {
                    section: EssentialsStateIndexSection::PassingContext,
                },
                class: "header",
                "Passing context"
            }
        }
        p {
            "If you need a slightly more powerful way to pass around state, you can use the context API."
        }
        p {
            "The context API lets you pass state from a parent component to all children. This is useful if you want to share state between many components. You can insert a unique type into the context with the "
            Link { to: "https://docs.rs/dioxus-hooks/latest/dioxus_hooks/fn.use_context_provider.html",
                code { "use_context_provider" }
            }
            " hook in the parent component. Then you can access the context in any child component with the "
            Link { to: "https://docs.rs/dioxus-hooks/latest/dioxus_hooks/fn.use_context.html",
                code { "use_context" }
            }
            " hook."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(Clone, Copy)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">MyState {{\n</span><span style=\"color:#f8f8f2;\">    count: Signal&lt;</span><span style=\"font-style:italic;color:#66d9ef;\">i32</span><span style=\"color:#f8f8f2;\">&gt;,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">ParentComponent</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Use context provider provides an unique type to all children of this component\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> state </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_context_provider</span><span style=\"color:#f8f8f2;\">(|| MyState {{\n</span><span style=\"color:#f8f8f2;\">        count: Signal::new(</span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">),\n</span><span style=\"color:#f8f8f2;\">    }});\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#ffee99;\">&quot;Count is {{state.count}}&quot;\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// IncrementButton will have access to the count without explicitly passing it through props\n</span><span style=\"color:#f8f8f2;\">        IncrementButton {{}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">IncrementButton</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Use context gets the value from a parent component\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">use_context::&lt;MyState&gt;().count;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        button {{\n</span><span style=\"color:#f8f8f2;\">            onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">+= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;Increment&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "moving_state_around.rs".to_string(),
        }
        DemoFrame { moving_state_around::PassingContext {} }
        p {
            "This is slightly less explicit than passing it as a prop, but it is still local to the component. This is really great if you want state that is global to part of your app. It lets you create multiple global-ish states while still making state different when you reuse components. If I create a new  "
            code { "ParentComponent" }
            ", it will have a new  "
            code { "MyState" }
            "."
        }
        h3 { id: "using-globals",
            Link {
                to: BookRoute::EssentialsStateIndex {
                    section: EssentialsStateIndexSection::UsingGlobals,
                },
                class: "header",
                "Using globals"
            }
        }
        p {
            "Finally, if you have truly global state, you can put your state in a  "
            code { "Global<T>" }
            " static. This is useful if you want to share state with your whole app:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#8c8c8c;\">// Globals are created the first time you access them with the closure you pass to Global::new\n</span><span style=\"font-style:italic;color:#66d9ef;\">static </span><span style=\"color:#ff80f4;\">COUNT</span><span style=\"color:#f8f8f2;\">: GlobalSignal&lt;</span><span style=\"font-style:italic;color:#66d9ef;\">i32</span><span style=\"color:#f8f8f2;\">&gt; </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">Global::new(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">ParentComponent</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#ffee99;\">&quot;Count is {{COUNT}}&quot;\n</span><span style=\"color:#f8f8f2;\">        IncrementButton {{}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">IncrementButton</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        button {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#8c8c8c;\">// You don&#39;t need to pass anything around or get anything out of the context because COUNT is global\n</span><span style=\"color:#f8f8f2;\">            onclick: </span><span style=\"color:#f92672;\">move |_| *</span><span style=\"color:#ff80f4;\">COUNT</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">write</span><span style=\"color:#f8f8f2;\">() </span><span style=\"color:#f92672;\">+= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;Increment&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "moving_state_around.rs".to_string(),
        }
        DemoFrame { moving_state_around::UsingGlobals {} }
        p {
            "Global state can be very ergonomic if your state is truly global, but you shouldn't use it if you need state to be different for different instances of your component. If I create another  "
            code { "IncrementButton" }
            " it will use the same  "
            code { "COUNT" }
            ". Libraries should generally avoid this to make components more reusable."
        }
        blockquote {
            p {
                "Note: Even though it is in a static,  "
                code { "COUNT" }
                " will be different for each app instance so you don't need to worry about state mangling when multiple instances of your app are running on the server"
            }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum EssentialsBreakingIndexSection {
    #[default]
    Empty,
    BreakingOutOfDioxus,
    InteractingWithJavascriptWithEvalAndWebSys,
    SynchronizingDomUpdatesWithUseEffect,
    GettingAccessToElementsWithOnmounted,
    DownCastingWebSysEvents,
}
impl std::str::FromStr for EssentialsBreakingIndexSection {
    type Err = EssentialsBreakingIndexSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "breaking-out-of-dioxus" => Ok(Self::BreakingOutOfDioxus),
            "interacting-with-javascript-with-eval-and-web-sys" => {
                Ok(Self::InteractingWithJavascriptWithEvalAndWebSys)
            }
            "synchronizing-dom-updates-with-use-effect" => {
                Ok(Self::SynchronizingDomUpdatesWithUseEffect)
            }
            "getting-access-to-elements-with-onmounted" => {
                Ok(Self::GettingAccessToElementsWithOnmounted)
            }
            "down-casting-web-sys-events" => Ok(Self::DownCastingWebSysEvents),
            _ => Err(EssentialsBreakingIndexSectionParseError),
        }
    }
}
impl std::fmt::Display for EssentialsBreakingIndexSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::BreakingOutOfDioxus => f.write_str("breaking-out-of-dioxus"),
            Self::InteractingWithJavascriptWithEvalAndWebSys => {
                f.write_str("interacting-with-javascript-with-eval-and-web-sys")
            }
            Self::SynchronizingDomUpdatesWithUseEffect => {
                f.write_str("synchronizing-dom-updates-with-use-effect")
            }
            Self::GettingAccessToElementsWithOnmounted => {
                f.write_str("getting-access-to-elements-with-onmounted")
            }
            Self::DownCastingWebSysEvents => f.write_str("down-casting-web-sys-events"),
        }
    }
}
#[derive(Debug)]
pub struct EssentialsBreakingIndexSectionParseError;
impl std::fmt::Display for EssentialsBreakingIndexSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of EssentialsBreakingIndexSectionbreaking-out-of-dioxus, interacting-with-javascript-with-eval-and-web-sys, synchronizing-dom-updates-with-use-effect, getting-access-to-elements-with-onmounted, down-casting-web-sys-events",
        )?;
        Ok(())
    }
}
impl std::error::Error for EssentialsBreakingIndexSectionParseError {}
#[component(no_case_check)]
pub fn EssentialsBreakingIndex(
    section: EssentialsBreakingIndexSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "breaking-out-of-dioxus",
            Link {
                to: BookRoute::EssentialsBreakingIndex {
                    section: EssentialsBreakingIndexSection::BreakingOutOfDioxus,
                },
                class: "header",
                "Breaking Out of Dioxus"
            }
        }
        p {
            "Dioxus is makes it easy to build reactive user interfaces. However, there are some cases where you may need to break out of the reactive paradigm to interact with the DOM directly."
        }
        h2 { id: "interacting-with-javascript-with-eval-and-web-sys",
            Link {
                to: BookRoute::EssentialsBreakingIndex {
                    section: EssentialsBreakingIndexSection::InteractingWithJavascriptWithEvalAndWebSys,
                },
                class: "header",
                "Interacting with JavaScript with eval and web-sys"
            }
        }
        p {
            "Dioxus exposes a limited number of "
            Link { to: "https://developer.mozilla.org/en-US/docs/Web/API", "web apis" }
            " with a nicer interface. If you need access to more APIs, you can use the "
            code { "eval" }
            " function to run JavaScript in the browser."
        }
        p { "For example, you can use the eval function to read the domain of the current page:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Eval</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> domain </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#66d9ef;\">String</span><span style=\"color:#f8f8f2;\">::new);\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        button {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#8c8c8c;\">// When you click the button, some javascript will run in the browser\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#8c8c8c;\">// to read the domain and set the signal\n</span><span style=\"color:#f8f8f2;\">            onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> async </span><span style=\"color:#f92672;\">move </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">                domain.</span><span style=\"color:#66d9ef;\">set</span><span style=\"color:#f8f8f2;\">(document::eval(</span><span style=\"color:#ffee99;\">&quot;return document.domain&quot;</span><span style=\"color:#f8f8f2;\">).await.</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">());\n</span><span style=\"color:#f8f8f2;\">            }},\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;Read Domain&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#ffee99;\">&quot;Current domain: {{domain}}&quot;\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "breaking_out.rs".to_string(),
        }
        DemoFrame { breaking_out::Eval {} }
        p {
            "If you are only targeting web, you can also use the "
            Link { to: "https://crates.io/crates/web-sys",
                code { "web-sys" }
            }
            " crate for typed access to the web APIs. Here is what reading the domain looks like with web-sys:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">::web_sys::window;\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">wasm_bindgen::JsCast;\n</span><span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">WebSys</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> domain </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#66d9ef;\">String</span><span style=\"color:#f8f8f2;\">::new);\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        button {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#8c8c8c;\">// When you click the button, we use web-sys to read the domain and a signal\n</span><span style=\"color:#f8f8f2;\">            onclick: </span><span style=\"color:#f92672;\">move |_| </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">                domain\n</span><span style=\"color:#f8f8f2;\">                    .</span><span style=\"color:#66d9ef;\">set</span><span style=\"color:#f8f8f2;\">(\n</span><span style=\"color:#f8f8f2;\">                        </span><span style=\"color:#66d9ef;\">window</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">                            .</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">                            .</span><span style=\"color:#66d9ef;\">document</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">                            .</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">                            .dyn_into::&lt;::web_sys::HtmlDocument&gt;()\n</span><span style=\"color:#f8f8f2;\">                            .</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">                            .</span><span style=\"color:#66d9ef;\">domain</span><span style=\"color:#f8f8f2;\">(),\n</span><span style=\"color:#f8f8f2;\">                    );\n</span><span style=\"color:#f8f8f2;\">            }},\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;Read Domain&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#ffee99;\">&quot;Current domain: {{domain}}&quot;\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "breaking_out.rs".to_string(),
        }
        DemoFrame { breaking_out::WebSys {} }
        h2 { id: "synchronizing-dom-updates-with-use-effect",
            Link {
                to: BookRoute::EssentialsBreakingIndex {
                    section: EssentialsBreakingIndexSection::SynchronizingDomUpdatesWithUseEffect,
                },
                class: "header",
                "Synchronizing DOM updates with use_effect"
            }
        }
        p {
            "If you do need to interact with the DOM directly, you should do so in a  "
            code { "use_effect" }
            " hook. This hook will run after the component is rendered and all of the Dioxus UI has been rendered. You can read or modify the DOM in this hook."
        }
        p {
            "For example, you can use the  "
            code { "use_effect" }
            " hook to write to a canvas element after it is created:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Canvas</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">use_effect</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">move || </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// Effects are reactive like memos, and resources. If you read a value inside the effect, the effect will rerun when that value changes\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> count.</span><span style=\"color:#66d9ef;\">read</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// You can use the count value to update the DOM manually\n</span><span style=\"color:#f8f8f2;\">        document::eval(</span><span style=\"color:#f92672;\">&amp;</span><span style=\"color:#f8f8f2;\">format!(\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"font-style:italic;color:#66d9ef;\">r</span><span style=\"color:#ffee99;\">#&quot;var c = document.getElementById(&quot;dioxus-canvas&quot;);\n</span><span style=\"color:#ffee99;\">var ctx = c.getContext(&quot;2d&quot;);\n</span><span style=\"color:#ffee99;\">ctx.clearRect(0, 0, c.width, c.height);\n</span><span style=\"color:#ffee99;\">ctx.font = &quot;30px Arial&quot;;\n</span><span style=\"color:#ffee99;\">ctx.fillText(&quot;</span><span style=\"color:#ff80f4;\">{{count}}</span><span style=\"color:#ffee99;\">&quot;, 10, 50);&quot;#\n</span><span style=\"color:#f8f8f2;\">        ));\n</span><span style=\"color:#f8f8f2;\">    }});\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        button {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#8c8c8c;\">// When you click the button, count will be incremented and the effect will rerun\n</span><span style=\"color:#f8f8f2;\">            onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">+= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;Increment&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">        canvas {{ id: </span><span style=\"color:#ffee99;\">&quot;dioxus-canvas&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "breaking_out.rs".to_string(),
        }
        DemoFrame { breaking_out::Canvas {} }
        h2 { id: "getting-access-to-elements-with-onmounted",
            Link {
                to: BookRoute::EssentialsBreakingIndex {
                    section: EssentialsBreakingIndexSection::GettingAccessToElementsWithOnmounted,
                },
                class: "header",
                "Getting access to elements with onmounted"
            }
        }
        p {
            "If you need a handle to an element that is rendered by dioxus, you can use the  "
            code { "onmounted" }
            " event. This event will fire after the element is first mounted to the DOM. It returns a live reference to the element with some methods to interact with it."
        }
        p {
            "You can use the onmounted event to do things like focus or scroll to an element after it is rendered:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">OnMounted</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> input_element </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"font-style:italic;color:#66d9ef;\">None</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ height: </span><span style=\"color:#ffee99;\">&quot;100px&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            button {{\n</span><span style=\"color:#f8f8f2;\">                class: </span><span style=\"color:#ffee99;\">&quot;focus:outline-2 focus:outline-blue-600 focus:outline-dashed&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">                </span><span style=\"color:#8c8c8c;\">// The onmounted event will run the first time the button element is mounted\n</span><span style=\"color:#f8f8f2;\">                onmounted: </span><span style=\"color:#f92672;\">move |</span><span style=\"color:#f8f8f2;\">element</span><span style=\"color:#f92672;\">|</span><span style=\"color:#f8f8f2;\"> input_element.</span><span style=\"color:#66d9ef;\">set</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#66d9ef;\">Some</span><span style=\"color:#f8f8f2;\">(element.</span><span style=\"color:#66d9ef;\">data</span><span style=\"color:#f8f8f2;\">())),\n</span><span style=\"color:#f8f8f2;\">                </span><span style=\"color:#ffee99;\">&quot;First button&quot;\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">            button {{\n</span><span style=\"color:#f8f8f2;\">                </span><span style=\"color:#8c8c8c;\">// When you click the button, if the button element has been mounted, we focus to that element\n</span><span style=\"color:#f8f8f2;\">                onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> async </span><span style=\"color:#f92672;\">move </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">                    </span><span style=\"color:#f92672;\">if </span><span style=\"font-style:italic;color:#66d9ef;\">let Some</span><span style=\"color:#f8f8f2;\">(header) </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">input_element</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">                        </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">_ =</span><span style=\"color:#f8f8f2;\"> header.</span><span style=\"color:#66d9ef;\">set_focus</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ff80f4;\">true</span><span style=\"color:#f8f8f2;\">).await;\n</span><span style=\"color:#f8f8f2;\">                    }}\n</span><span style=\"color:#f8f8f2;\">                }},\n</span><span style=\"color:#f8f8f2;\">                </span><span style=\"color:#ffee99;\">&quot;Focus first button&quot;\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "breaking_out.rs".to_string(),
        }
        DemoFrame { breaking_out::OnMounted {} }
        h2 { id: "down-casting-web-sys-events",
            Link {
                to: BookRoute::EssentialsBreakingIndex {
                    section: EssentialsBreakingIndexSection::DownCastingWebSysEvents,
                },
                class: "header",
                "Down casting web sys events"
            }
        }
        p {
            "Dioxus provides platform agnostic wrappers over each event type. These wrappers are often nicer to interact with than the raw event types, but they can be more limited. If you are targeting web, you can downcast the event with the  "
            code { "as_web_event" }
            " method to get the underlying web-sys event:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Downcast</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> event_text </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{\n</span><span style=\"color:#f8f8f2;\">            onmousemove: </span><span style=\"color:#f92672;\">move |</span><span style=\"color:#f8f8f2;\">event</span><span style=\"color:#f92672;\">| </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">                #[cfg(feature </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;web&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">                {{\n</span><span style=\"color:#f8f8f2;\">                    </span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::web::WebEventExt;\n</span><span style=\"color:#f8f8f2;\">                    event_text.</span><span style=\"color:#66d9ef;\">set</span><span style=\"color:#f8f8f2;\">(event.</span><span style=\"color:#66d9ef;\">as_web_event</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#66d9ef;\">movement_x</span><span style=\"color:#f8f8f2;\">());\n</span><span style=\"color:#f8f8f2;\">                }}\n</span><span style=\"color:#f8f8f2;\">            }},\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;movement_x was {{event_text}}&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "breaking_out.rs".to_string(),
        }
        DemoFrame { breaking_out::Downcast {} }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuidesIndexSection {
    #[default]
    Empty,
    DioxusGuides,
    State,
    Assets,
    Platforms,
}
impl std::str::FromStr for GuidesIndexSection {
    type Err = GuidesIndexSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "dioxus-guides" => Ok(Self::DioxusGuides),
            "state" => Ok(Self::State),
            "assets" => Ok(Self::Assets),
            "platforms" => Ok(Self::Platforms),
            _ => Err(GuidesIndexSectionParseError),
        }
    }
}
impl std::fmt::Display for GuidesIndexSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::DioxusGuides => f.write_str("dioxus-guides"),
            Self::State => f.write_str("state"),
            Self::Assets => f.write_str("assets"),
            Self::Platforms => f.write_str("platforms"),
        }
    }
}
#[derive(Debug)]
pub struct GuidesIndexSectionParseError;
impl std::fmt::Display for GuidesIndexSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuidesIndexSectiondioxus-guides, state, assets, platforms",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuidesIndexSectionParseError {}
#[component(no_case_check)]
pub fn GuidesIndex(section: GuidesIndexSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "dioxus-guides",
            Link {
                to: BookRoute::GuidesIndex {
                    section: GuidesIndexSection::DioxusGuides,
                },
                class: "header",
                "Dioxus Guides"
            }
        }
        p {
            "These guides contains more detailed explanations for some concepts covered in the "
            Link {
                to: BookRoute::GuideIndex {
                    section: GuideIndexSection::Empty,
                },
                code { "guide" }
            }
            " and more."
        }
        h2 { id: "state",
            Link {
                to: BookRoute::GuidesIndex {
                    section: GuidesIndexSection::State,
                },
                class: "header",
                "State"
            }
        }
        ul {
            li {
                Link {
                    to: BookRoute::GuidesManagingState {
                        section: GuidesManagingStateSection::Empty,
                    },
                    "State management"
                }
                " (signals-based reactivity)"
            }
        }
        h2 { id: "assets",
            Link {
                to: BookRoute::GuidesIndex {
                    section: GuidesIndexSection::Assets,
                },
                class: "header",
                "Assets"
            }
        }
        ul {
            li {
                Link {
                    to: BookRoute::GuidesAssets {
                        section: GuidesAssetsSection::Empty,
                    },
                    code { "Assets" }
                }
                " Overview of how to include assets in your application"
            }
        }
        h2 { id: "platforms",
            Link {
                to: BookRoute::GuidesIndex {
                    section: GuidesIndexSection::Platforms,
                },
                class: "header",
                "Platforms"
            }
        }
        ul {
            li {
                Link {
                    to: BookRoute::GuidesDesktopIndex {
                        section: GuidesDesktopIndexSection::Empty,
                    },
                    code { "Desktop" }
                }
                " Overview of desktop specific APIS"
            }
            li {
                Link {
                    to: BookRoute::GuidesWebIndex {
                        section: GuidesWebIndexSection::Empty,
                    },
                    code { "Web" }
                }
                " Overview of web specific APIS"
            }
            li {
                Link {
                    to: BookRoute::GuidesFullstackIndex {
                        section: GuidesFullstackIndexSection::Empty,
                    },
                    code { "Fullstack" }
                }
                " Overview of Fullstack specific APIS"
                ul {
                    li {
                        Link {
                            to: BookRoute::GuidesFullstackServerFunctions {
                                section: GuidesFullstackServerFunctionsSection::Empty,
                            },
                            code { "Server Functions" }
                        }
                        " Server functions make it easy to communicate between your server and client"
                    }
                    li {
                        Link {
                            to: BookRoute::GuidesFullstackExtractors {
                                section: GuidesFullstackExtractorsSection::Empty,
                            },
                            code { "Extractors" }
                        }
                        " Extractors allow you to get extra information out of the headers of a request"
                    }
                    li {
                        Link {
                            to: BookRoute::GuidesFullstackMiddleware {
                                section: GuidesFullstackMiddlewareSection::Empty,
                            },
                            code { "Middleware" }
                        }
                        " Middleware allows you to wrap a server function request or response"
                    }
                    li {
                        Link {
                            to: BookRoute::GuidesFullstackAuthentication {
                                section: GuidesFullstackAuthenticationSection::Empty,
                            },
                            code { "Authentication" }
                        }
                        " An overview of how to handle authentication with server functions"
                    }
                    li {
                        Link {
                            to: BookRoute::GuidesFullstackRouting {
                                section: GuidesFullstackRoutingSection::Empty,
                            },
                            code { "Routing" }
                        }
                        " An overview of how to work with the router in the fullstack renderer"
                    }
                }
            }
            li {
                Link {
                    to: BookRoute::GuidesSsr {
                        section: GuidesSsrSection::Empty,
                    },
                    code { "SSR" }
                }
                " Overview of the SSR renderer"
            }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuidesManagingStateSection {
    #[default]
    Empty,
    TheRulesOfHooks,
    NoHooksInConditionals,
    NoHooksInClosures,
    NoHooksInLoops,
}
impl std::str::FromStr for GuidesManagingStateSection {
    type Err = GuidesManagingStateSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "the-rules-of-hooks" => Ok(Self::TheRulesOfHooks),
            "no-hooks-in-conditionals" => Ok(Self::NoHooksInConditionals),
            "no-hooks-in-closures" => Ok(Self::NoHooksInClosures),
            "no-hooks-in-loops" => Ok(Self::NoHooksInLoops),
            _ => Err(GuidesManagingStateSectionParseError),
        }
    }
}
impl std::fmt::Display for GuidesManagingStateSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::TheRulesOfHooks => f.write_str("the-rules-of-hooks"),
            Self::NoHooksInConditionals => f.write_str("no-hooks-in-conditionals"),
            Self::NoHooksInClosures => f.write_str("no-hooks-in-closures"),
            Self::NoHooksInLoops => f.write_str("no-hooks-in-loops"),
        }
    }
}
#[derive(Debug)]
pub struct GuidesManagingStateSectionParseError;
impl std::fmt::Display for GuidesManagingStateSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuidesManagingStateSectionthe-rules-of-hooks, no-hooks-in-conditionals, no-hooks-in-closures, no-hooks-in-loops",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuidesManagingStateSectionParseError {}
#[component(no_case_check)]
pub fn GuidesManagingState(section: GuidesManagingStateSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "the-rules-of-hooks",
            Link {
                to: BookRoute::GuidesManagingState {
                    section: GuidesManagingStateSection::TheRulesOfHooks,
                },
                class: "header",
                "The Rules of Hooks"
            }
        }
        p {
            "Hooks are a powerful way to manage state in Dioxus, but there are some rules you need to follow to insure they work as expected. Dioxus uses the order you call hooks to differentiate between hooks. Because the order you call hooks matters, you must follow these rules:"
        }
        ol {
            li { "Hooks may be only used in components or other hooks (we'll get to that later)" }
            li {
                "On every call to the component function"
                ol {
                    li { "The same hooks must be called" }
                    li { "In the same order" }
                }
            }
            li {
                "Hooks name's should start with "
                code { "use_" }
                " so you don't accidentally confuse them with regular functions"
            }
        }
        p { "These rules mean that there are certain things you can't do with hooks:" }
        h4 { id: "no-hooks-in-conditionals",
            Link {
                to: BookRoute::GuidesManagingState {
                    section: GuidesManagingStateSection::NoHooksInConditionals,
                },
                class: "header",
                "No Hooks in Conditionals"
            }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// ❌ don&#39;t call hooks in conditionals!\n</span><span style=\"color:#8c8c8c;\">// We must ensure that the same hooks will be called every time\n</span><span style=\"color:#8c8c8c;\">// But `if` statements only run if the conditional is true!\n</span><span style=\"color:#8c8c8c;\">// So we might violate rule 2.\n</span><span style=\"color:#f92672;\">if</span><span style=\"color:#f8f8f2;\"> you_are_happy </span><span style=\"color:#f92672;\">&amp;&amp;</span><span style=\"color:#f8f8f2;\"> you_know_it {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> something </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ffee99;\">&quot;hands&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">    println!(</span><span style=\"color:#ffee99;\">&quot;clap your </span><span style=\"color:#ff80f4;\">{{something}}</span><span style=\"color:#ffee99;\">&quot;</span><span style=\"color:#f8f8f2;\">)\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// ✅ instead, *always* call use_signal\n</span><span style=\"color:#8c8c8c;\">// You can put other stuff in the conditional though\n</span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> something </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ffee99;\">&quot;hands&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f92672;\">if</span><span style=\"color:#f8f8f2;\"> you_are_happy </span><span style=\"color:#f92672;\">&amp;&amp;</span><span style=\"color:#f8f8f2;\"> you_know_it {{\n</span><span style=\"color:#f8f8f2;\">    println!(</span><span style=\"color:#ffee99;\">&quot;clap your </span><span style=\"color:#ff80f4;\">{{something}}</span><span style=\"color:#ffee99;\">&quot;</span><span style=\"color:#f8f8f2;\">)\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "hooks_bad.rs".to_string(),
        }
        h4 { id: "no-hooks-in-closures",
            Link {
                to: BookRoute::GuidesManagingState {
                    section: GuidesManagingStateSection::NoHooksInClosures,
                },
                class: "header",
                "No Hooks in Closures"
            }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// ❌ don&#39;t call hooks inside closures!\n</span><span style=\"color:#8c8c8c;\">// We can&#39;t guarantee that the closure, if used, will be called in the same order every time\n</span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#a6e22e;\">_a </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">|| {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> b </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">b</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">}};\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// ✅ instead, move hook `b` outside\n</span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> b </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#a6e22e;\">_a </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">|| </span><span style=\"color:#66d9ef;\">b</span><span style=\"color:#f8f8f2;\">();</span></pre>\n",
            name: "hooks_bad.rs".to_string(),
        }
        h4 { id: "no-hooks-in-loops",
            Link {
                to: BookRoute::GuidesManagingState {
                    section: GuidesManagingStateSection::NoHooksInLoops,
                },
                class: "header",
                "No Hooks in Loops"
            }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// `names` is a Vec&lt;&amp;str&gt;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// ❌ Do not use hooks in loops!\n</span><span style=\"color:#8c8c8c;\">// In this case, if the length of the Vec changes, we break rule 2\n</span><span style=\"color:#f92672;\">for</span><span style=\"color:#f8f8f2;\"> _name </span><span style=\"color:#f92672;\">in &amp;</span><span style=\"color:#f8f8f2;\">names {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> is_selected </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">false</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">    println!(</span><span style=\"color:#ffee99;\">&quot;selected: </span><span style=\"color:#ff80f4;\">{{is_selected}}</span><span style=\"color:#ffee99;\">&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// ✅ Instead, use a hashmap with use_signal\n</span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> selection_map </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(HashMap::&lt;</span><span style=\"color:#f92672;\">&amp;</span><span style=\"font-style:italic;color:#66d9ef;\">str</span><span style=\"color:#f8f8f2;\">, </span><span style=\"font-style:italic;color:#66d9ef;\">bool</span><span style=\"color:#f8f8f2;\">&gt;::new);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">for</span><span style=\"color:#f8f8f2;\"> name </span><span style=\"color:#f92672;\">in &amp;</span><span style=\"color:#f8f8f2;\">names {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> is_selected </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> selection_map.</span><span style=\"color:#66d9ef;\">read</span><span style=\"color:#f8f8f2;\">()[name];\n</span><span style=\"color:#f8f8f2;\">    println!(</span><span style=\"color:#ffee99;\">&quot;selected: </span><span style=\"color:#ff80f4;\">{{is_selected}}</span><span style=\"color:#ffee99;\">&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "hooks_bad.rs".to_string(),
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum RouterIndexSection {
    #[default]
    Empty,
    Introduction,
}
impl std::str::FromStr for RouterIndexSection {
    type Err = RouterIndexSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "introduction" => Ok(Self::Introduction),
            _ => Err(RouterIndexSectionParseError),
        }
    }
}
impl std::fmt::Display for RouterIndexSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Introduction => f.write_str("introduction"),
        }
    }
}
#[derive(Debug)]
pub struct RouterIndexSectionParseError;
impl std::fmt::Display for RouterIndexSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str("Invalid section name. Expected one of RouterIndexSectionintroduction")?;
        Ok(())
    }
}
impl std::error::Error for RouterIndexSectionParseError {}
#[component(no_case_check)]
pub fn RouterIndex(section: RouterIndexSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "introduction",
            Link {
                to: BookRoute::RouterIndex {
                    section: RouterIndexSection::Introduction,
                },
                class: "header",
                "Introduction"
            }
        }
        blockquote {
            p {
                "If you are not familiar with Dioxus itself, check out the "
                Link {
                    to: BookRoute::GuideIndex {
                        section: GuideIndexSection::Empty,
                    },
                    "Dioxus guide"
                }
                " first."
            }
        }
        p {
            "Whether you are building a website, desktop app, or mobile app, splitting your app's views into \"pages\" can be an effective method for organization and maintainability."
        }
        p {
            "For this purpose, Dioxus provides a router. Use the  "
            code { "cargo add" }
            " command to add the dependency:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">cargo add dioxus </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">features router</span></pre>\n" }
        p {
            "Then, add this to your  "
            code { "Dioxus.toml" }
            " (learn more about configuration "
            Link {
                to: BookRoute::CliConfigure {
                    section: CliConfigureSection::Empty,
                },
                "here"
            }
            "):"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[web.watcher]\n</span><span style=\"color:#f8f8f2;\">index_on_404 </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">true</span></pre>\n" }
        blockquote {
            p {
                "This configuration only works when using  "
                code { "dx serve" }
                ". If you host your app in a different way (which you most likely do in production), you need to find out how to add a fallback 404 page to your app, and make it a copy of the generated  "
                code { "dist/index.html" }
                "."
            }
        }
        p {
            "This will instruct  "
            code { "dx serve" }
            " to redirect any unknown route to the index, to then be resolved by the router."
            " "
            "The router works on the client. If we connect through the index route (e.g.,  "
            code { "localhost:8080" }
            ", then click a link to go to  "
            code { "localhost:8080/contact" }
            "), the app renders the new route without reloading."
            " "
            "However, when we go to a route "
            em { "before" }
            " going to the index (go straight to "
            code { "localhost:8080/contact" }
            "), we are trying to access a static route from the server, but the only static route on our server is the index (because the Dioxus frontend is a Single Page Application) and it will fail unless we redirect all missing routes to the index."
        }
        p {
            "This book is intended to get you up to speed with Dioxus Router. It is split"
            " "
            "into two sections:"
        }
        ol {
            li {
                "The "
                Link {
                    to: BookRoute::RouterReferenceIndex {
                        section: RouterReferenceIndexSection::Empty,
                    },
                    "reference"
                }
                " section explains individual features in "
                "depth. You can read it from start to finish, or you can read individual chapters "
                "in whatever order you want."
            }
            li {
                "If you prefer a learning-by-doing approach, you can check out the "
                em {
                    Link {
                        to: BookRoute::RouterExampleIndex {
                            section: RouterExampleIndexSection::Empty,
                        },
                        "example project"
                    }
                }
                ". It guides you through "
                "creating a dioxus app, setting up the router, and using some of its "
                "functionality."
            }
        }
        blockquote {
            p {
                "Please note that this is not the only documentation for the Dioxus Router. You can also check out the "
                Link { to: "https://docs.rs/dioxus-router/", "API Docs" }
                "."
            }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum RouterExampleIndexSection {
    #[default]
    Empty,
    Overview,
    YoullLearnHowTo,
}
impl std::str::FromStr for RouterExampleIndexSection {
    type Err = RouterExampleIndexSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "overview" => Ok(Self::Overview),
            "youll-learn-how-to" => Ok(Self::YoullLearnHowTo),
            _ => Err(RouterExampleIndexSectionParseError),
        }
    }
}
impl std::fmt::Display for RouterExampleIndexSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Overview => f.write_str("overview"),
            Self::YoullLearnHowTo => f.write_str("youll-learn-how-to"),
        }
    }
}
#[derive(Debug)]
pub struct RouterExampleIndexSectionParseError;
impl std::fmt::Display for RouterExampleIndexSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of RouterExampleIndexSectionoverview, youll-learn-how-to",
        )?;
        Ok(())
    }
}
impl std::error::Error for RouterExampleIndexSectionParseError {}
#[component(no_case_check)]
pub fn RouterExampleIndex(section: RouterExampleIndexSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "overview",
            Link {
                to: BookRoute::RouterExampleIndex {
                    section: RouterExampleIndexSection::Overview,
                },
                class: "header",
                "Overview"
            }
        }
        p {
            "In this guide, you'll learn to effectively use Dioxus Router whether you're"
            " "
            "building a small todo app or the next FAANG company. We will create a small"
            " "
            "website with a blog, homepage, and more!"
        }
        blockquote {
            p {
                "To follow along with the router example, you'll need a working Dioxus app."
                " "
                "Check out the "
                Link { to: "https://dioxuslabs.com/learn/0.6/getting_started", "Dioxus book" }
                " to get started."
            }
        }
        blockquote {
            p {
                "Make sure to add Dioxus Router as a dependency, as explained in the"
                Link {
                    to: BookRoute::RouterIndex {
                        section: RouterIndexSection::Empty,
                    },
                    "introduction"
                }
                "."
            }
        }
        h2 { id: "youll-learn-how-to",
            Link {
                to: BookRoute::RouterExampleIndex {
                    section: RouterExampleIndexSection::YoullLearnHowTo,
                },
                class: "header",
                "You'll learn how to"
            }
        }
        ul {
            li { "Create routes and render \"pages\"." }
            li {
                "Utilize nested routes, create a navigation bar, and render content for a"
                " "
                "set of routes."
            }
            li { "Parse URL parameters to dynamically display content." }
            li { "Redirect visitors to different routes." }
        }
        blockquote {
            p {
                strong { "Disclaimer" }
            }
            p {
                "The example will only display the features of Dioxus Router. It will not"
                " "
                "include any actual functionality. To keep things simple we will only be using"
                " "
                "a single file, this is not the recommended way of doing things with a real"
                " "
                "application."
            }
        }
        p {
            "You can find the complete application in the "
            Link {
                to: BookRoute::RouterExampleFullCode {
                    section: RouterExampleFullCodeSection::Empty,
                },
                "full code"
            }
            " chapter."
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum RouterExampleFirstRouteSection {
    #[default]
    Empty,
    CreatingOurFirstRoute,
    Fundamentals,
    CreatingRoutes,
    FallbackRoute,
    Conclusion,
}
impl std::str::FromStr for RouterExampleFirstRouteSection {
    type Err = RouterExampleFirstRouteSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "creating-our-first-route" => Ok(Self::CreatingOurFirstRoute),
            "fundamentals" => Ok(Self::Fundamentals),
            "creating-routes" => Ok(Self::CreatingRoutes),
            "fallback-route" => Ok(Self::FallbackRoute),
            "conclusion" => Ok(Self::Conclusion),
            _ => Err(RouterExampleFirstRouteSectionParseError),
        }
    }
}
impl std::fmt::Display for RouterExampleFirstRouteSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::CreatingOurFirstRoute => f.write_str("creating-our-first-route"),
            Self::Fundamentals => f.write_str("fundamentals"),
            Self::CreatingRoutes => f.write_str("creating-routes"),
            Self::FallbackRoute => f.write_str("fallback-route"),
            Self::Conclusion => f.write_str("conclusion"),
        }
    }
}
#[derive(Debug)]
pub struct RouterExampleFirstRouteSectionParseError;
impl std::fmt::Display for RouterExampleFirstRouteSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of RouterExampleFirstRouteSectioncreating-our-first-route, fundamentals, creating-routes, fallback-route, conclusion",
        )?;
        Ok(())
    }
}
impl std::error::Error for RouterExampleFirstRouteSectionParseError {}
#[component(no_case_check)]
pub fn RouterExampleFirstRoute(
    section: RouterExampleFirstRouteSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "creating-our-first-route",
            Link {
                to: BookRoute::RouterExampleFirstRoute {
                    section: RouterExampleFirstRouteSection::CreatingOurFirstRoute,
                },
                class: "header",
                "Creating Our First Route"
            }
        }
        p {
            "In this chapter, we will start utilizing Dioxus Router and add a homepage and a"
            " "
            "404 page to our project."
        }
        h2 { id: "fundamentals",
            Link {
                to: BookRoute::RouterExampleFirstRoute {
                    section: RouterExampleFirstRouteSection::Fundamentals,
                },
                class: "header",
                "Fundamentals"
            }
        }
        p {
            "The core of the Dioxus Router is the "
            Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/components/fn.Routable.html",
                code { "Routable" }
            }
            " macro and the "
            Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/components/fn.Router.html",
                code { "Router" }
            }
            " component."
        }
        p { "Routable is a trait for anything that can:" }
        ul {
            li { "Be parsed from a URL" }
            li { "Be turned into a URL" }
            li { "Be rendered as to a Element" }
        }
        p {
            "Let's create a new router. First, we need an actual page to route to! Let's add a homepage component:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Home</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{ h1 {{ </span><span style=\"color:#ffee99;\">&quot;Welcome to the Dioxus Blog!&quot; </span><span style=\"color:#f8f8f2;\">}} }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "first_route.rs".to_string(),
        }
        h2 { id: "creating-routes",
            Link {
                to: BookRoute::RouterExampleFirstRoute {
                    section: RouterExampleFirstRouteSection::CreatingRoutes,
                },
                class: "header",
                "Creating Routes"
            }
        }
        p {
            "We want to use Dioxus Router to separate our application into different \"pages\"."
            " "
            "Dioxus Router will then determine which page to render based on the URL path."
        }
        p {
            "To start using Dioxus Router, we need to use the "
            Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/components/fn.Routable.html",
                code { "Routable" }
            }
            " macro."
        }
        p {
            "The "
            Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/components/fn.Routable.html",
                code { "Routable" }
            }
            " macro takes an enum with all of the possible routes in our application. Each variant of the enum represents a route and must be annotated with the "
            code { "#[route(path)]" }
            " attribute."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#![allow(non_snake_case)]\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus_router::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">/// An enum of all of the possible routes in the app.\n</span><span style=\"color:#f8f8f2;\">#[derive(Routable, Clone)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">Route {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// The home page is at the / route\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    Home {{}},\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "first_route.rs".to_string(),
        }
        p {
            "The "
            Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/components/fn.Router.html",
                code { "Router" }
            }
            " component will provide a router context for all the inner components and hooks to use. You usually will want to place this at the top of your components tree."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{ Router::&lt;Route&gt; {{}} }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "first_route.rs".to_string(),
        }
        p {
            "If you head to your application's browser tab, you should now see the text"
            code { "Welcome to Dioxus Blog!" }
            " when on the root URL ( "
            code { "http://localhost:8080/" }
            "). If"
            " "
            "you enter a different path for the URL, nothing should be displayed."
        }
        p {
            "This is because we told Dioxus Router to render the  "
            code { "Home" }
            " component only when"
            " "
            "the URL path is  "
            code { "/" }
            "."
        }
        h2 { id: "fallback-route",
            Link {
                to: BookRoute::RouterExampleFirstRoute {
                    section: RouterExampleFirstRouteSection::FallbackRoute,
                },
                class: "header",
                "Fallback Route"
            }
        }
        p {
            "In our example, when a route doesn't exist Dioxus Router doesn't render anything. Many sites also have a \"404\" page when a path does not exist. Let's add one to our site."
        }
        p {
            "First, we create a new  "
            code { "PageNotFound" }
            " component."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">PageNotFound</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">route</span><span style=\"color:#f8f8f2;\">: Vec&lt;String&gt;) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        h1 {{ </span><span style=\"color:#ffee99;\">&quot;Page not found&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        p {{ </span><span style=\"color:#ffee99;\">&quot;We are terribly sorry, but the page you requested doesn&#39;t exist.&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        pre {{ color: </span><span style=\"color:#ffee99;\">&quot;red&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;log:</span><span style=\"color:#ff80f4;\">\\n</span><span style=\"color:#ffee99;\">attemped to navigate to: {{route:?}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "catch_all.rs".to_string(),
        }
        p { "Next, register the route in the Route enum to match if all other routes fail." }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(Routable, Clone)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">Route {{\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    Home {{}},\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// PageNotFound is a catch all route that will match any route and placing the matched segments in the route field\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/:..route&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    PageNotFound {{ route: Vec&lt;String&gt; }},\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "catch_all.rs".to_string(),
        }
        p {
            "Now when you go to a route that doesn't exist, you should see the page not found"
            " "
            "text."
        }
        h2 { id: "conclusion",
            Link {
                to: BookRoute::RouterExampleFirstRoute {
                    section: RouterExampleFirstRouteSection::Conclusion,
                },
                class: "header",
                "Conclusion"
            }
        }
        p {
            "In this chapter, we learned how to create a route and tell Dioxus Router what"
            " "
            "component to render when the URL path is  "
            code { "/" }
            ". We also created a 404 page to"
            " "
            "handle when a route doesn't exist. Next, we'll create the blog portion of our"
            " "
            "site. We will utilize nested routes and URL parameters."
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum RouterExampleBuildingANestSection {
    #[default]
    Empty,
    BuildingANest,
    SiteNavigation,
    UrlParametersAndNestedRoutes,
    Conclusion,
}
impl std::str::FromStr for RouterExampleBuildingANestSection {
    type Err = RouterExampleBuildingANestSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "building-a-nest" => Ok(Self::BuildingANest),
            "site-navigation" => Ok(Self::SiteNavigation),
            "url-parameters-and-nested-routes" => Ok(Self::UrlParametersAndNestedRoutes),
            "conclusion" => Ok(Self::Conclusion),
            _ => Err(RouterExampleBuildingANestSectionParseError),
        }
    }
}
impl std::fmt::Display for RouterExampleBuildingANestSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::BuildingANest => f.write_str("building-a-nest"),
            Self::SiteNavigation => f.write_str("site-navigation"),
            Self::UrlParametersAndNestedRoutes => f.write_str("url-parameters-and-nested-routes"),
            Self::Conclusion => f.write_str("conclusion"),
        }
    }
}
#[derive(Debug)]
pub struct RouterExampleBuildingANestSectionParseError;
impl std::fmt::Display for RouterExampleBuildingANestSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of RouterExampleBuildingANestSectionbuilding-a-nest, site-navigation, url-parameters-and-nested-routes, conclusion",
        )?;
        Ok(())
    }
}
impl std::error::Error for RouterExampleBuildingANestSectionParseError {}
#[component(no_case_check)]
pub fn RouterExampleBuildingANest(
    section: RouterExampleBuildingANestSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "building-a-nest",
            Link {
                to: BookRoute::RouterExampleBuildingANest {
                    section: RouterExampleBuildingANestSection::BuildingANest,
                },
                class: "header",
                "Building a Nest"
            }
        }
        p {
            "In this chapter, we will begin to build the blog portion of our site which will"
            " "
            "include links, nested routes, and route parameters."
        }
        h2 { id: "site-navigation",
            Link {
                to: BookRoute::RouterExampleBuildingANest {
                    section: RouterExampleBuildingANestSection::SiteNavigation,
                },
                class: "header",
                "Site Navigation"
            }
        }
        p {
            "Our site visitors won't know all the available pages and blogs on our site so we"
            " "
            "should provide a navigation bar for them. Our navbar will be a list of links going between our pages."
        }
        p {
            "We want our navbar component to be rendered on several different pages on our site. Instead of duplicating the code, we can create a component that wraps all children routes. This is called a layout component. To tell the router where to render the child routes, we use the "
            Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/components/fn.Outlet.html",
                code { "Outlet" }
            }
            " component."
        }
        p {
            "Let's create a new  "
            code { "NavBar" }
            " component:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">NavBar</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        nav {{\n</span><span style=\"color:#f8f8f2;\">            ul {{ li {{ </span><span style=\"color:#ffee99;\">&quot;links&quot; </span><span style=\"color:#f8f8f2;\">}} }}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// The Outlet component will render child routes (In this case just the Home component) inside the Outlet component\n</span><span style=\"color:#f8f8f2;\">        Outlet::&lt;Route&gt; {{}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "nested_routes.rs".to_string(),
        }
        p {
            "Next, let's add our  "
            code { "NavBar" }
            " component as a layout to our Route enum:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(Routable, Clone)]\n</span><span style=\"color:#f8f8f2;\">#[rustfmt::skip]\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">Route {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// All routes under the NavBar layout will be rendered inside of the NavBar Outlet\n</span><span style=\"color:#f8f8f2;\">    #[layout(NavBar)]\n</span><span style=\"color:#f8f8f2;\">        #[route(</span><span style=\"color:#ffee99;\">&quot;/&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">        Home {{}},\n</span><span style=\"color:#f8f8f2;\">    #[end_layout]\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/:..route&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    PageNotFound {{ route: Vec&lt;String&gt; }},\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "nested_routes.rs".to_string(),
        }
        p {
            "To add links to our  "
            code { "NavBar" }
            ", we could always use an HTML anchor element but that has two issues:"
        }
        ol {
            li { "It causes a full-page reload" }
            li { "We can accidentally link to a page that doesn't exist" }
        }
        p {
            "Instead, we want to use the "
            Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/components/fn.Link.html",
                code { "Link" }
            }
            " component provided by Dioxus Router."
        }
        p {
            "The "
            Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/components/fn.Link.html",
                code { "Link" }
            }
            " is similar to a regular "
            code { "<a>" }
            " tag. It takes a target and children."
        }
        p {
            "Unlike a regular  "
            code { "<a>" }
            " tag, we can pass in our Route enum as the target. Because we annotated our routes with the  "
            code { "#[route(path)]" }
            " attribute, the "
            Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/components/fn.Link.html",
                code { "Link" }
            }
            " will know how to generate the correct URL. If we use the Route enum, the rust compiler will prevent us from linking to a page that doesn't exist."
        }
        p { "Let's add our links:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">NavBar</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        nav {{\n</span><span style=\"color:#f8f8f2;\">            ul {{\n</span><span style=\"color:#f8f8f2;\">                li {{\n</span><span style=\"color:#f8f8f2;\">                    Link {{ to: Route::Home {{}}, </span><span style=\"color:#ffee99;\">&quot;Home&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">                }}\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">        Outlet::&lt;Route&gt; {{}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "links.rs".to_string(),
        }
        blockquote {
            p {
                "Using this method, the "
                Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/components/fn.Link.html",
                    code { "Link" }
                }
                " component only works for links within our"
                " "
                "application. To learn more about navigation targets see"
                Link {
                    to: BookRoute::RouterExampleNavigationTargets {
                        section: RouterExampleNavigationTargetsSection::Empty,
                    },
                    "here"
                }
                "."
            }
        }
        p {
            "Now you should see a list of links near the top of your page. Click on one and"
            " "
            "you should seamlessly travel between pages."
        }
        h2 { id: "url-parameters-and-nested-routes",
            Link {
                to: BookRoute::RouterExampleBuildingANest {
                    section: RouterExampleBuildingANestSection::UrlParametersAndNestedRoutes,
                },
                class: "header",
                "URL Parameters and Nested Routes"
            }
        }
        p {
            "Many websites such as GitHub put parameters in their URL. For example,"
            code { "https://github.com/DioxusLabs" }
            " utilizes the text after the domain to"
            " "
            "dynamically search and display content about an organization."
        }
        p {
            "We want to store our blogs in a database and load them as needed. We also"
            " "
            "want our users to be able to send people a link to a specific blog post."
            " "
            "Instead of listing all of the blog titles at compile time, we can make a dynamic route."
        }
        p {
            "We could utilize a search page that loads a blog when clicked but then our users"
            " "
            "won't be able to share our blogs easily. This is where URL parameters come in."
        }
        p {
            "The path to our blog will look like  "
            code { "/blog/myBlogPage" }
            ",  "
            code { "myBlogPage" }
            " being the"
            " "
            "URL parameter."
        }
        p {
            "First, let's create a layout component (similar to the navbar) that wraps the blog content. This allows us to add a heading that tells the user they are on the blog."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Blog</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        h1 {{ </span><span style=\"color:#ffee99;\">&quot;Blog&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        Outlet::&lt;Route&gt; {{}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "dynamic_route.rs".to_string(),
        }
        p {
            "Now we'll create another index component, that'll be displayed when no blog post"
            " "
            "is selected:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">BlogList</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        h2 {{ </span><span style=\"color:#ffee99;\">&quot;Choose a post&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        ul {{\n</span><span style=\"color:#f8f8f2;\">            li {{\n</span><span style=\"color:#f8f8f2;\">                Link {{\n</span><span style=\"color:#f8f8f2;\">                    to: Route::BlogPost {{\n</span><span style=\"color:#f8f8f2;\">                        name: </span><span style=\"color:#ffee99;\">&quot;Blog post 1&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">into</span><span style=\"color:#f8f8f2;\">(),\n</span><span style=\"color:#f8f8f2;\">                    }},\n</span><span style=\"color:#f8f8f2;\">                    </span><span style=\"color:#ffee99;\">&quot;Read the first blog post&quot;\n</span><span style=\"color:#f8f8f2;\">                }}\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">            li {{\n</span><span style=\"color:#f8f8f2;\">                Link {{\n</span><span style=\"color:#f8f8f2;\">                    to: Route::BlogPost {{\n</span><span style=\"color:#f8f8f2;\">                        name: </span><span style=\"color:#ffee99;\">&quot;Blog post 2&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">into</span><span style=\"color:#f8f8f2;\">(),\n</span><span style=\"color:#f8f8f2;\">                    }},\n</span><span style=\"color:#f8f8f2;\">                    </span><span style=\"color:#ffee99;\">&quot;Read the second blog post&quot;\n</span><span style=\"color:#f8f8f2;\">                }}\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "dynamic_route.rs".to_string(),
        }
        p {
            "We also need to create a component that displays an actual blog post. This component will accept the URL parameters as props:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// The name prop comes from the /:name route segment\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">BlogPost</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">name</span><span style=\"color:#f8f8f2;\">: String) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{ h2 {{ </span><span style=\"color:#ffee99;\">&quot;Blog Post: {{name}}&quot; </span><span style=\"color:#f8f8f2;\">}} }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "dynamic_route.rs".to_string(),
        }
        p { "Finally, let's tell our router about those components:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(Routable, Clone)]\n</span><span style=\"color:#f8f8f2;\">#[rustfmt::skip]\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">Route {{\n</span><span style=\"color:#f8f8f2;\">    #[layout(NavBar)]\n</span><span style=\"color:#f8f8f2;\">        #[route(</span><span style=\"color:#ffee99;\">&quot;/&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">        Home {{}},\n</span><span style=\"color:#f8f8f2;\">        #[nest(</span><span style=\"color:#ffee99;\">&quot;/blog&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">            #[layout(Blog)]\n</span><span style=\"color:#f8f8f2;\">            #[route(</span><span style=\"color:#ffee99;\">&quot;/&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">            BlogList {{}},\n</span><span style=\"color:#f8f8f2;\">            #[route(</span><span style=\"color:#ffee99;\">&quot;/post/:name&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">            BlogPost {{ name: </span><span style=\"font-style:italic;color:#66d9ef;\">String </span><span style=\"color:#f8f8f2;\">}},\n</span><span style=\"color:#f8f8f2;\">            #[end_layout]\n</span><span style=\"color:#f8f8f2;\">        #[end_nest]\n</span><span style=\"color:#f8f8f2;\">    #[end_layout]\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/:..route&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    PageNotFound {{\n</span><span style=\"color:#f8f8f2;\">        route: Vec&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    }},\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "dynamic_route.rs".to_string(),
        }
        p {
            "That's it! If you head to  "
            code { "/blog/1" }
            " you should see our sample post."
        }
        h2 { id: "conclusion",
            Link {
                to: BookRoute::RouterExampleBuildingANest {
                    section: RouterExampleBuildingANestSection::Conclusion,
                },
                class: "header",
                "Conclusion"
            }
        }
        p {
            "In this chapter, we utilized Dioxus Router's Link, and Route Parameter"
            " "
            "functionality to build the blog portion of our application. In the next chapter,"
            " "
            "we will go over how navigation targets (like the one we passed to our links)"
            " "
            "work."
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum RouterExampleNavigationTargetsSection {
    #[default]
    Empty,
    NavigationTargets,
    WhatIsANavigationTarget,
    ExternalNavigation,
}
impl std::str::FromStr for RouterExampleNavigationTargetsSection {
    type Err = RouterExampleNavigationTargetsSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "navigation-targets" => Ok(Self::NavigationTargets),
            "what-is-a-navigation-target" => Ok(Self::WhatIsANavigationTarget),
            "external-navigation" => Ok(Self::ExternalNavigation),
            _ => Err(RouterExampleNavigationTargetsSectionParseError),
        }
    }
}
impl std::fmt::Display for RouterExampleNavigationTargetsSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::NavigationTargets => f.write_str("navigation-targets"),
            Self::WhatIsANavigationTarget => f.write_str("what-is-a-navigation-target"),
            Self::ExternalNavigation => f.write_str("external-navigation"),
        }
    }
}
#[derive(Debug)]
pub struct RouterExampleNavigationTargetsSectionParseError;
impl std::fmt::Display for RouterExampleNavigationTargetsSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of RouterExampleNavigationTargetsSectionnavigation-targets, what-is-a-navigation-target, external-navigation",
        )?;
        Ok(())
    }
}
impl std::error::Error for RouterExampleNavigationTargetsSectionParseError {}
#[component(no_case_check)]
pub fn RouterExampleNavigationTargets(
    section: RouterExampleNavigationTargetsSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "navigation-targets",
            Link {
                to: BookRoute::RouterExampleNavigationTargets {
                    section: RouterExampleNavigationTargetsSection::NavigationTargets,
                },
                class: "header",
                "Navigation Targets"
            }
        }
        p {
            "In the previous chapter, we learned how to create links to pages within our app."
            " "
            "We told them where to go using the  "
            code { "target" }
            " property. This property takes something that can be converted to a "
            Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/navigation/enum.NavigationTarget.html",
                code { "NavigationTarget" }
            }
            "."
        }
        h2 { id: "what-is-a-navigation-target",
            Link {
                to: BookRoute::RouterExampleNavigationTargets {
                    section: RouterExampleNavigationTargetsSection::WhatIsANavigationTarget,
                },
                class: "header",
                "What is a navigation target?"
            }
        }
        p {
            "A "
            Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/navigation/enum.NavigationTarget.html",
                code { "NavigationTarget" }
            }
            " is similar to the "
            code { "href" }
            " of an HTML anchor element. It"
            " "
            "tells the router where to navigate to. The Dioxus Router knows two kinds of"
            " "
            "navigation targets:"
        }
        ul {
            li {
                Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/navigation/enum.NavigationTarget.html#variant.Internal",
                    code { "Internal" }
                }
                ": We used internal links in the previous chapter. It's a link to a page within our"
                " "
                "app represented as a Route enum."
            }
            li {
                Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/navigation/enum.NavigationTarget.html#variant.External",
                    code { "External" }
                }
                ": This works exactly like an HTML anchors' "
                code { "href" }
                ". Don't use this for in-app"
                " "
                "navigation as it will trigger a page reload by the browser."
            }
        }
        h2 { id: "external-navigation",
            Link {
                to: BookRoute::RouterExampleNavigationTargets {
                    section: RouterExampleNavigationTargetsSection::ExternalNavigation,
                },
                class: "header",
                "External navigation"
            }
        }
        p { "If we need a link to an external page we can do it like this:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">GoToDioxus</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        Link {{ to: </span><span style=\"color:#ffee99;\">&quot;https://dioxuslabs.com&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;ExternalTarget target&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "external_link.rs".to_string(),
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum RouterExampleRedirectionPerfectionSection {
    #[default]
    Empty,
    RedirectionPerfection,
    CreatingRedirects,
    Conclusion,
    Challenges,
}
impl std::str::FromStr for RouterExampleRedirectionPerfectionSection {
    type Err = RouterExampleRedirectionPerfectionSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "redirection-perfection" => Ok(Self::RedirectionPerfection),
            "creating-redirects" => Ok(Self::CreatingRedirects),
            "conclusion" => Ok(Self::Conclusion),
            "challenges" => Ok(Self::Challenges),
            _ => Err(RouterExampleRedirectionPerfectionSectionParseError),
        }
    }
}
impl std::fmt::Display for RouterExampleRedirectionPerfectionSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::RedirectionPerfection => f.write_str("redirection-perfection"),
            Self::CreatingRedirects => f.write_str("creating-redirects"),
            Self::Conclusion => f.write_str("conclusion"),
            Self::Challenges => f.write_str("challenges"),
        }
    }
}
#[derive(Debug)]
pub struct RouterExampleRedirectionPerfectionSectionParseError;
impl std::fmt::Display for RouterExampleRedirectionPerfectionSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of RouterExampleRedirectionPerfectionSectionredirection-perfection, creating-redirects, conclusion, challenges",
        )?;
        Ok(())
    }
}
impl std::error::Error for RouterExampleRedirectionPerfectionSectionParseError {}
#[component(no_case_check)]
pub fn RouterExampleRedirectionPerfection(
    section: RouterExampleRedirectionPerfectionSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "redirection-perfection",
            Link {
                to: BookRoute::RouterExampleRedirectionPerfection {
                    section: RouterExampleRedirectionPerfectionSection::RedirectionPerfection,
                },
                class: "header",
                "Redirection Perfection"
            }
        }
        p { "You're well on your way to becoming a routing master!" }
        p { "In this chapter, we will cover creating redirects" }
        h2 { id: "creating-redirects",
            Link {
                to: BookRoute::RouterExampleRedirectionPerfection {
                    section: RouterExampleRedirectionPerfectionSection::CreatingRedirects,
                },
                class: "header",
                "Creating Redirects"
            }
        }
        p {
            "A redirect is very simple. When dioxus encounters a redirect while finding out"
            " "
            "what components to render, it will redirect the user to the target of the"
            " "
            "redirect."
        }
        p {
            "As a simple example, let's say you want user to still land on your blog, even"
            " "
            "if they used the path  "
            code { "/myblog" }
            " or  "
            code { "/myblog/:name" }
            "."
        }
        p {
            "Redirects are special attributes in the router enum that accept a route and a closure"
            " "
            "with the route parameters. The closure should return a route to redirect to."
        }
        p { "Let's add a redirect to our router enum:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(Routable, Clone)]\n</span><span style=\"color:#f8f8f2;\">#[rustfmt::skip]\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">Route {{\n</span><span style=\"color:#f8f8f2;\">    #[layout(NavBar)]\n</span><span style=\"color:#f8f8f2;\">        #[route(</span><span style=\"color:#ffee99;\">&quot;/&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">        Home {{}},\n</span><span style=\"color:#f8f8f2;\">        #[nest(</span><span style=\"color:#ffee99;\">&quot;/blog&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">            #[layout(Blog)]\n</span><span style=\"color:#f8f8f2;\">                #[route(</span><span style=\"color:#ffee99;\">&quot;/&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">                BlogList {{}},\n</span><span style=\"color:#f8f8f2;\">                #[route(</span><span style=\"color:#ffee99;\">&quot;/post/:name&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">                BlogPost {{ name: </span><span style=\"font-style:italic;color:#66d9ef;\">String </span><span style=\"color:#f8f8f2;\">}},\n</span><span style=\"color:#f8f8f2;\">            #[end_layout]\n</span><span style=\"color:#f8f8f2;\">        #[end_nest]\n</span><span style=\"color:#f8f8f2;\">    #[end_layout]\n</span><span style=\"color:#f8f8f2;\">    #[nest(</span><span style=\"color:#ffee99;\">&quot;/myblog&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">        #[redirect(</span><span style=\"color:#ffee99;\">&quot;/&quot;</span><span style=\"color:#f8f8f2;\">, || Route::BlogList {{}})]\n</span><span style=\"color:#f8f8f2;\">        #[redirect(</span><span style=\"color:#ffee99;\">&quot;/:name&quot;</span><span style=\"color:#f8f8f2;\">, |name: String| Route::BlogPost {{ name }})]\n</span><span style=\"color:#f8f8f2;\">    #[end_nest]\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/:..route&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    PageNotFound {{\n</span><span style=\"color:#f8f8f2;\">        route: Vec&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    }},\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "full_example.rs".to_string(),
        }
        p { "That's it! Now your users will be redirected to the blog." }
        h3 { id: "conclusion",
            Link {
                to: BookRoute::RouterExampleRedirectionPerfection {
                    section: RouterExampleRedirectionPerfectionSection::Conclusion,
                },
                class: "header",
                "Conclusion"
            }
        }
        p {
            "Well done! You've completed the Dioxus Router guide. You've built a small "
            "application and learned about the many things you can do with Dioxus Router."
            " "
            "To continue your journey, you attempt a challenge listed below, look at the "
            Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/router/examples",
                "router examples"
            }
            ", or "
            "the "
            Link { to: "https://docs.rs/dioxus-router/", "API reference" }
            "."
        }
        h3 { id: "challenges",
            Link {
                to: BookRoute::RouterExampleRedirectionPerfection {
                    section: RouterExampleRedirectionPerfectionSection::Challenges,
                },
                class: "header",
                "Challenges"
            }
        }
        ul {
            li { "Organize your components into separate files for better maintainability." }
            li { "Give your app some style if you haven't already." }
            li { "Build an about page so your visitors know who you are." }
            li { "Add a user system that uses URL parameters." }
            li { "Create a simple admin system to create, delete, and edit blogs." }
            li { "If you want to go to the max, hook up your application to a rest API and database." }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum RouterExampleFullCodeSection {
    #[default]
    Empty,
    FullCode,
}
impl std::str::FromStr for RouterExampleFullCodeSection {
    type Err = RouterExampleFullCodeSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "full-code" => Ok(Self::FullCode),
            _ => Err(RouterExampleFullCodeSectionParseError),
        }
    }
}
impl std::fmt::Display for RouterExampleFullCodeSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::FullCode => f.write_str("full-code"),
        }
    }
}
#[derive(Debug)]
pub struct RouterExampleFullCodeSectionParseError;
impl std::fmt::Display for RouterExampleFullCodeSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str("Invalid section name. Expected one of RouterExampleFullCodeSectionfull-code")?;
        Ok(())
    }
}
impl std::error::Error for RouterExampleFullCodeSectionParseError {}
#[component(no_case_check)]
pub fn RouterExampleFullCode(section: RouterExampleFullCodeSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "full-code",
            Link {
                to: BookRoute::RouterExampleFullCode {
                    section: RouterExampleFullCodeSection::FullCode,
                },
                class: "header",
                "Full Code"
            }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#![allow(non_snake_case)]\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus_router::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// ANCHOR: router\n</span><span style=\"color:#f8f8f2;\">#[derive(Routable, Clone)]\n</span><span style=\"color:#f8f8f2;\">#[rustfmt::skip]\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">Route {{\n</span><span style=\"color:#f8f8f2;\">    #[layout(NavBar)]\n</span><span style=\"color:#f8f8f2;\">        #[route(</span><span style=\"color:#ffee99;\">&quot;/&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">        Home {{}},\n</span><span style=\"color:#f8f8f2;\">        #[nest(</span><span style=\"color:#ffee99;\">&quot;/blog&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">            #[layout(Blog)]\n</span><span style=\"color:#f8f8f2;\">                #[route(</span><span style=\"color:#ffee99;\">&quot;/&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">                BlogList {{}},\n</span><span style=\"color:#f8f8f2;\">                #[route(</span><span style=\"color:#ffee99;\">&quot;/post/:name&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">                BlogPost {{ name: </span><span style=\"font-style:italic;color:#66d9ef;\">String </span><span style=\"color:#f8f8f2;\">}},\n</span><span style=\"color:#f8f8f2;\">            #[end_layout]\n</span><span style=\"color:#f8f8f2;\">        #[end_nest]\n</span><span style=\"color:#f8f8f2;\">    #[end_layout]\n</span><span style=\"color:#f8f8f2;\">    #[nest(</span><span style=\"color:#ffee99;\">&quot;/myblog&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">        #[redirect(</span><span style=\"color:#ffee99;\">&quot;/&quot;</span><span style=\"color:#f8f8f2;\">, || Route::BlogList {{}})]\n</span><span style=\"color:#f8f8f2;\">        #[redirect(</span><span style=\"color:#ffee99;\">&quot;/:name&quot;</span><span style=\"color:#f8f8f2;\">, |name: String| Route::BlogPost {{ name }})]\n</span><span style=\"color:#f8f8f2;\">    #[end_nest]\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/:..route&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    PageNotFound {{\n</span><span style=\"color:#f8f8f2;\">        route: Vec&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    }},\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#8c8c8c;\">// ANCHOR_END: router\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{ Router::&lt;Route&gt; {{}} }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">NavBar</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        nav {{\n</span><span style=\"color:#f8f8f2;\">            ul {{\n</span><span style=\"color:#f8f8f2;\">                li {{\n</span><span style=\"color:#f8f8f2;\">                    Link {{ to: Route::Home {{}}, </span><span style=\"color:#ffee99;\">&quot;Home&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">                }}\n</span><span style=\"color:#f8f8f2;\">                li {{\n</span><span style=\"color:#f8f8f2;\">                    Link {{ to: Route::BlogList {{}}, </span><span style=\"color:#ffee99;\">&quot;Blog&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">                }}\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">        Outlet::&lt;Route&gt; {{}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Home</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{ h1 {{ </span><span style=\"color:#ffee99;\">&quot;Welcome to the Dioxus Blog!&quot; </span><span style=\"color:#f8f8f2;\">}} }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Blog</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        h1 {{ </span><span style=\"color:#ffee99;\">&quot;Blog&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        Outlet::&lt;Route&gt; {{}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">BlogList</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        h2 {{ </span><span style=\"color:#ffee99;\">&quot;Choose a post&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        ul {{\n</span><span style=\"color:#f8f8f2;\">            li {{\n</span><span style=\"color:#f8f8f2;\">                Link {{\n</span><span style=\"color:#f8f8f2;\">                    to: Route::BlogPost {{\n</span><span style=\"color:#f8f8f2;\">                        name: </span><span style=\"color:#ffee99;\">&quot;Blog post 1&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">into</span><span style=\"color:#f8f8f2;\">(),\n</span><span style=\"color:#f8f8f2;\">                    }},\n</span><span style=\"color:#f8f8f2;\">                    </span><span style=\"color:#ffee99;\">&quot;Read the first blog post&quot;\n</span><span style=\"color:#f8f8f2;\">                }}\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">            li {{\n</span><span style=\"color:#f8f8f2;\">                Link {{\n</span><span style=\"color:#f8f8f2;\">                    to: Route::BlogPost {{\n</span><span style=\"color:#f8f8f2;\">                        name: </span><span style=\"color:#ffee99;\">&quot;Blog post 2&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">into</span><span style=\"color:#f8f8f2;\">(),\n</span><span style=\"color:#f8f8f2;\">                    }},\n</span><span style=\"color:#f8f8f2;\">                    </span><span style=\"color:#ffee99;\">&quot;Read the second blog post&quot;\n</span><span style=\"color:#f8f8f2;\">                }}\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">BlogPost</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">name</span><span style=\"color:#f8f8f2;\">: String) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{ h2 {{ </span><span style=\"color:#ffee99;\">&quot;Blog Post: {{name}}&quot; </span><span style=\"color:#f8f8f2;\">}} }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">PageNotFound</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">route</span><span style=\"color:#f8f8f2;\">: Vec&lt;String&gt;) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        h1 {{ </span><span style=\"color:#ffee99;\">&quot;Page not found&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        p {{ </span><span style=\"color:#ffee99;\">&quot;We are terribly sorry, but the page you requested doesn&#39;t exist.&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        pre {{ color: </span><span style=\"color:#ffee99;\">&quot;red&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;log:</span><span style=\"color:#ff80f4;\">\\n</span><span style=\"color:#ffee99;\">attemped to navigate to: {{route:?}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "full_example.rs".to_string(),
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum RouterReferenceIndexSection {
    #[default]
    Empty,
    AddingTheRouterToYourApplication,
}
impl std::str::FromStr for RouterReferenceIndexSection {
    type Err = RouterReferenceIndexSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "adding-the-router-to-your-application" => Ok(Self::AddingTheRouterToYourApplication),
            _ => Err(RouterReferenceIndexSectionParseError),
        }
    }
}
impl std::fmt::Display for RouterReferenceIndexSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::AddingTheRouterToYourApplication => {
                f.write_str("adding-the-router-to-your-application")
            }
        }
    }
}
#[derive(Debug)]
pub struct RouterReferenceIndexSectionParseError;
impl std::fmt::Display for RouterReferenceIndexSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of RouterReferenceIndexSectionadding-the-router-to-your-application",
        )?;
        Ok(())
    }
}
impl std::error::Error for RouterReferenceIndexSectionParseError {}
#[component(no_case_check)]
pub fn RouterReferenceIndex(section: RouterReferenceIndexSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "adding-the-router-to-your-application",
            Link {
                to: BookRoute::RouterReferenceIndex {
                    section: RouterReferenceIndexSection::AddingTheRouterToYourApplication,
                },
                class: "header",
                "Adding the router to your application"
            }
        }
        p {
            "In this chapter, we will learn how to add the router to our app. By itself, this"
            " "
            "is not very useful. However, it is a prerequisite for all the functionality"
            " "
            "described in the other chapters."
        }
        blockquote {
            p {
                "Make sure you added the  "
                code { "dioxus-router" }
                " dependency as explained in the"
                Link {
                    to: BookRoute::RouterIndex {
                        section: RouterIndexSection::Empty,
                    },
                    "introduction"
                }
                "."
            }
        }
        p {
            "In most cases, we want to add the router to the root component of our app. This"
            " "
            "way, we can ensure that we have access to all its functionality everywhere."
        }
        p { "First, we define the router with the router macro:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#![allow(non_snake_case)]\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus_router::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">/// An enum of all of the possible routes in the app.\n</span><span style=\"color:#f8f8f2;\">#[derive(Routable, Clone)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">Route {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// The home page is at the / route\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    Home {{}},\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "first_route.rs".to_string(),
        }
        p {
            "Then we render the router with the "
            "[ "
            code { "Router" }
            "]"
            " component."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{ Router::&lt;Route&gt; {{}} }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "first_route.rs".to_string(),
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum RouterReferenceRoutesIndexSection {
    #[default]
    Empty,
    DefiningRoutes,
    RouteSegments,
    StaticSegments,
    DynamicSegments,
    CatchAllSegments,
    QuerySegments,
}
impl std::str::FromStr for RouterReferenceRoutesIndexSection {
    type Err = RouterReferenceRoutesIndexSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "defining-routes" => Ok(Self::DefiningRoutes),
            "route-segments" => Ok(Self::RouteSegments),
            "static-segments" => Ok(Self::StaticSegments),
            "dynamic-segments" => Ok(Self::DynamicSegments),
            "catch-all-segments" => Ok(Self::CatchAllSegments),
            "query-segments" => Ok(Self::QuerySegments),
            _ => Err(RouterReferenceRoutesIndexSectionParseError),
        }
    }
}
impl std::fmt::Display for RouterReferenceRoutesIndexSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::DefiningRoutes => f.write_str("defining-routes"),
            Self::RouteSegments => f.write_str("route-segments"),
            Self::StaticSegments => f.write_str("static-segments"),
            Self::DynamicSegments => f.write_str("dynamic-segments"),
            Self::CatchAllSegments => f.write_str("catch-all-segments"),
            Self::QuerySegments => f.write_str("query-segments"),
        }
    }
}
#[derive(Debug)]
pub struct RouterReferenceRoutesIndexSectionParseError;
impl std::fmt::Display for RouterReferenceRoutesIndexSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of RouterReferenceRoutesIndexSectiondefining-routes, route-segments, static-segments, dynamic-segments, catch-all-segments, query-segments",
        )?;
        Ok(())
    }
}
impl std::error::Error for RouterReferenceRoutesIndexSectionParseError {}
#[component(no_case_check)]
pub fn RouterReferenceRoutesIndex(
    section: RouterReferenceRoutesIndexSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "defining-routes",
            Link {
                to: BookRoute::RouterReferenceRoutesIndex {
                    section: RouterReferenceRoutesIndexSection::DefiningRoutes,
                },
                class: "header",
                "Defining Routes"
            }
        }
        p {
            "When creating a "
            "[ "
            code { "Routable" }
            "]"
            " enum, we can define routes for our application using the  "
            code { "route(\"path\")" }
            " attribute."
        }
        h2 { id: "route-segments",
            Link {
                to: BookRoute::RouterReferenceRoutesIndex {
                    section: RouterReferenceRoutesIndexSection::RouteSegments,
                },
                class: "header",
                "Route Segments"
            }
        }
        p {
            "Each route is made up of segments. Most segments are separated by  "
            code { "/" }
            " characters in the path."
        }
        p { "There are four fundamental types of segments:" }
        ol {
            li {
                Link {
                    to: BookRoute::RouterReferenceRoutesIndex {
                        section: RouterReferenceRoutesIndexSection::StaticSegments,
                    },
                    "Static segments"
                }
                " are fixed strings that must be present in the path."
            }
            li {
                Link {
                    to: BookRoute::RouterReferenceRoutesIndex {
                        section: RouterReferenceRoutesIndexSection::DynamicSegments,
                    },
                    "Dynamic segments"
                }
                " are types that can be parsed from a segment."
            }
            li {
                Link {
                    to: BookRoute::RouterReferenceRoutesIndex {
                        section: RouterReferenceRoutesIndexSection::CatchAllSegments,
                    },
                    "Catch-all segments"
                }
                " are types that can be parsed from multiple segments."
            }
            li {
                Link {
                    to: BookRoute::RouterReferenceRoutesIndex {
                        section: RouterReferenceRoutesIndexSection::QuerySegments,
                    },
                    "Query segments"
                }
                " are types that can be parsed from the query string."
            }
        }
        p { "Routes are matched:" }
        ul {
            li {
                "First, from most specific to least specific (Static then Dynamic then Catch All) (Query is always matched)"
            }
            li {
                "Then, if multiple routes match the same path, the order in which they are defined in the enum is followed."
            }
        }
        h2 { id: "static-segments",
            Link {
                to: BookRoute::RouterReferenceRoutesIndex {
                    section: RouterReferenceRoutesIndexSection::StaticSegments,
                },
                class: "header",
                "Static segments"
            }
        }
        p {
            "Fixed routes match a specific path. For example, the route  "
            code { "#[route(\"/about\")]" }
            " will match the path  "
            code { "/about" }
            "."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(Routable, Clone)]\n</span><span style=\"color:#f8f8f2;\">#[rustfmt::skip]\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">Route {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Routes always start with a slash\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    Home {{}},\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// You can have multiple segments in a route\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/hello/world&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    HelloWorld {{}},\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Home</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    todo!()\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">HelloWorld</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    todo!()\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "static_segments.rs".to_string(),
        }
        h2 { id: "dynamic-segments",
            Link {
                to: BookRoute::RouterReferenceRoutesIndex {
                    section: RouterReferenceRoutesIndexSection::DynamicSegments,
                },
                class: "header",
                "Dynamic Segments"
            }
        }
        p {
            "Dynamic segments are in the form of  "
            code { ":name" }
            " where  "
            code { "name" }
            " is"
            " "
            "the name of the field in the route variant. If the segment is parsed"
            " "
            "successfully then the route matches, otherwise the matching continues."
        }
        p {
            "The segment can be of any type that implements  "
            code { "FromStr" }
            "."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(Routable, Clone)]\n</span><span style=\"color:#f8f8f2;\">#[rustfmt::skip]\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">Route {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// segments that start with : are dynamic segments\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/post/:name&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    BlogPost {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// You must include dynamic segments in child variants\n</span><span style=\"color:#f8f8f2;\">        name: </span><span style=\"font-style:italic;color:#66d9ef;\">String</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">    }},\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/document/:id&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    Document {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// You can use any type that implements FromStr\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// If the segment can&#39;t be parsed, the route will not match\n</span><span style=\"color:#f8f8f2;\">        id: </span><span style=\"font-style:italic;color:#66d9ef;\">usize</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">    }},\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// Components must contain the same dynamic segments as their corresponding variant\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">BlogPost</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">name</span><span style=\"color:#f8f8f2;\">: String) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    todo!()\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Document</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">id</span><span style=\"color:#f8f8f2;\">: </span><span style=\"font-style:italic;color:#66d9ef;\">usize</span><span style=\"color:#f8f8f2;\">) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    todo!()\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "dynamic_segments.rs".to_string(),
        }
        h2 { id: "catch-all-segments",
            Link {
                to: BookRoute::RouterReferenceRoutesIndex {
                    section: RouterReferenceRoutesIndexSection::CatchAllSegments,
                },
                class: "header",
                "Catch All Segments"
            }
        }
        p {
            "Catch All segments are in the form of  "
            code { ":..name" }
            " where  "
            code { "name" }
            " is the name of the field in the route variant. If the segments are parsed successfully then the route matches, otherwise the matching continues."
        }
        p {
            "The segment can be of any type that implements  "
            code { "FromSegments" }
            ". (Vec"
            p { class: "inline-html-block", dangerous_inner_html: "<String>" }
            " implements this by default)"
        }
        p {
            "Catch All segments must be the "
            em { "last route segment" }
            " in the path (query segments are not counted) and cannot be included in nests."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(Routable, Clone)]\n</span><span style=\"color:#f8f8f2;\">#[rustfmt::skip]\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">Route {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// segments that start with :.. are catch all segments\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/blog/:..segments&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    BlogPost {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// You must include catch all segment in child variants\n</span><span style=\"color:#f8f8f2;\">        segments: Vec&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    }},\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// Components must contain the same catch all segments as their corresponding variant\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">BlogPost</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">segments</span><span style=\"color:#f8f8f2;\">: Vec&lt;String&gt;) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    todo!()\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "catch_all_segments.rs".to_string(),
        }
        h2 { id: "query-segments",
            Link {
                to: BookRoute::RouterReferenceRoutesIndex {
                    section: RouterReferenceRoutesIndexSection::QuerySegments,
                },
                class: "header",
                "Query Segments"
            }
        }
        p {
            "Query segments are in the form of  "
            code { "?:name&:othername" }
            " where  "
            code { "name" }
            " and  "
            code { "othername" }
            " are the names of fields in the route variant."
        }
        p {
            "Unlike "
            Link {
                to: BookRoute::RouterReferenceRoutesIndex {
                    section: RouterReferenceRoutesIndexSection::DynamicSegments,
                },
                "Dynamic Segments"
            }
            " and "
            Link {
                to: BookRoute::RouterReferenceRoutesIndex {
                    section: RouterReferenceRoutesIndexSection::CatchAllSegments,
                },
                "Catch All Segments"
            }
            ", parsing a Query segment must not fail."
        }
        p {
            "The segment can be of any type that implements  "
            code { "FromQueryArgument" }
            "."
        }
        p {
            "Query segments must be the "
            em { "after all route segments" }
            " and cannot be included in nests."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(Routable, Clone)]\n</span><span style=\"color:#f8f8f2;\">#[rustfmt::skip]\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">Route {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// segments that start with ?: are query segments\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/blog?:name&amp;:surname&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    BlogPost {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// You must include query segments in child variants\n</span><span style=\"color:#f8f8f2;\">        name: </span><span style=\"font-style:italic;color:#66d9ef;\">String</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">        surname: </span><span style=\"font-style:italic;color:#66d9ef;\">String</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">    }},\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">BlogPost</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">name</span><span style=\"color:#f8f8f2;\">: String, </span><span style=\"font-style:italic;color:#fd971f;\">surname</span><span style=\"color:#f8f8f2;\">: String) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ </span><span style=\"color:#ffee99;\">&quot;This is your blogpost with a query segment:&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        div {{ </span><span style=\"color:#ffee99;\">&quot;Name: {{name}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        div {{ </span><span style=\"color:#ffee99;\">&quot;Surname: {{surname}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{ Router::&lt;Route&gt; {{}} }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">main</span><span style=\"color:#f8f8f2;\">() {{}}</span></pre>\n",
            name: "query_segments.rs".to_string(),
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum RouterReferenceRoutesNestedSection {
    #[default]
    Empty,
    NestedRoutes,
    Nesting,
}
impl std::str::FromStr for RouterReferenceRoutesNestedSection {
    type Err = RouterReferenceRoutesNestedSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "nested-routes" => Ok(Self::NestedRoutes),
            "nesting" => Ok(Self::Nesting),
            _ => Err(RouterReferenceRoutesNestedSectionParseError),
        }
    }
}
impl std::fmt::Display for RouterReferenceRoutesNestedSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::NestedRoutes => f.write_str("nested-routes"),
            Self::Nesting => f.write_str("nesting"),
        }
    }
}
#[derive(Debug)]
pub struct RouterReferenceRoutesNestedSectionParseError;
impl std::fmt::Display for RouterReferenceRoutesNestedSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of RouterReferenceRoutesNestedSectionnested-routes, nesting",
        )?;
        Ok(())
    }
}
impl std::error::Error for RouterReferenceRoutesNestedSectionParseError {}
#[component(no_case_check)]
pub fn RouterReferenceRoutesNested(
    section: RouterReferenceRoutesNestedSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "nested-routes",
            Link {
                to: BookRoute::RouterReferenceRoutesNested {
                    section: RouterReferenceRoutesNestedSection::NestedRoutes,
                },
                class: "header",
                "Nested Routes"
            }
        }
        p {
            "When developing bigger applications we often want to nest routes within each"
            " "
            "other. As an example, we might want to organize a settings menu using this"
            " "
            "pattern:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">└ Settings\n</span><span style=\"color:#f8f8f2;\">  ├ General Settings (displayed when opening the settings)\n</span><span style=\"color:#f8f8f2;\">  ├ Change Password\n</span><span style=\"color:#f8f8f2;\">  └ Privacy Settings</span></pre>\n" }
        p { "We might want to map this structure to these paths and components:" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">settings\t\t  -&gt; Settings {{ GeneralSettings }}\n</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">settings</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">password -&gt; Settings {{ PWSettings }}\n</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">settings</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">privacy  -&gt; Settings {{ PrivacySettings }}</span></pre>\n" }
        p { "Nested routes allow us to do this without repeating /settings in every route." }
        h2 { id: "nesting",
            Link {
                to: BookRoute::RouterReferenceRoutesNested {
                    section: RouterReferenceRoutesNestedSection::Nesting,
                },
                class: "header",
                "Nesting"
            }
        }
        p {
            "To nest routes, we use the  "
            code { "#[nest(\"path\")]" }
            " and  "
            code { "#[end_nest]" }
            " attributes."
        }
        p { "The path in nest must not:" }
        ol {
            li {
                "Contain a "
                Link {
                    to: BookRoute::RouterReferenceRoutesIndex {
                        section: RouterReferenceRoutesIndexSection::CatchAllSegments,
                    },
                    "Catch All Segment"
                }
            }
            li {
                "Contain a "
                Link {
                    to: BookRoute::RouterReferenceRoutesIndex {
                        section: RouterReferenceRoutesIndexSection::QuerySegments,
                    },
                    "Query Segment"
                }
            }
        }
        p {
            "If you define a dynamic segment in a nest, it will be available to all child routes and layouts."
        }
        p {
            "To finish a nest, we use the  "
            code { "#[end_nest]" }
            " attribute or the end of the enum."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(Routable, Clone)]\n</span><span style=\"color:#8c8c8c;\">// Skipping formatting allows you to indent nests\n</span><span style=\"color:#f8f8f2;\">#[rustfmt::skip]\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">Route {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Start the /blog nest\n</span><span style=\"color:#f8f8f2;\">    #[nest(</span><span style=\"color:#ffee99;\">&quot;/blog&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// You can nest as many times as you want\n</span><span style=\"color:#f8f8f2;\">        #[nest(</span><span style=\"color:#ffee99;\">&quot;/:id&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">            #[route(</span><span style=\"color:#ffee99;\">&quot;/post&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">            PostId {{\n</span><span style=\"color:#f8f8f2;\">                </span><span style=\"color:#8c8c8c;\">// You must include parent dynamic segments in child variants\n</span><span style=\"color:#f8f8f2;\">                id: </span><span style=\"font-style:italic;color:#66d9ef;\">usize</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            }},\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// End nests manually with #[end_nest]\n</span><span style=\"color:#f8f8f2;\">        #[end_nest]\n</span><span style=\"color:#f8f8f2;\">        #[route(</span><span style=\"color:#ffee99;\">&quot;/:id&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// The absolute route of BlogPost is /blog/:name\n</span><span style=\"color:#f8f8f2;\">        BlogPost {{\n</span><span style=\"color:#f8f8f2;\">            id: </span><span style=\"font-style:italic;color:#66d9ef;\">usize</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">        }},\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Or nests are ended automatically at the end of the enum\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">BlogPost</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">id</span><span style=\"color:#f8f8f2;\">: </span><span style=\"font-style:italic;color:#66d9ef;\">usize</span><span style=\"color:#f8f8f2;\">) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    todo!()\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">PostId</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">id</span><span style=\"color:#f8f8f2;\">: </span><span style=\"font-style:italic;color:#66d9ef;\">usize</span><span style=\"color:#f8f8f2;\">) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    todo!()\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "nest.rs".to_string(),
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum RouterReferenceLayoutsSection {
    #[default]
    Empty,
    Layouts,
    LayoutsWithDynamicSegments,
}
impl std::str::FromStr for RouterReferenceLayoutsSection {
    type Err = RouterReferenceLayoutsSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "layouts" => Ok(Self::Layouts),
            "layouts-with-dynamic-segments" => Ok(Self::LayoutsWithDynamicSegments),
            _ => Err(RouterReferenceLayoutsSectionParseError),
        }
    }
}
impl std::fmt::Display for RouterReferenceLayoutsSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Layouts => f.write_str("layouts"),
            Self::LayoutsWithDynamicSegments => f.write_str("layouts-with-dynamic-segments"),
        }
    }
}
#[derive(Debug)]
pub struct RouterReferenceLayoutsSectionParseError;
impl std::fmt::Display for RouterReferenceLayoutsSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of RouterReferenceLayoutsSectionlayouts, layouts-with-dynamic-segments",
        )?;
        Ok(())
    }
}
impl std::error::Error for RouterReferenceLayoutsSectionParseError {}
#[component(no_case_check)]
pub fn RouterReferenceLayouts(section: RouterReferenceLayoutsSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "layouts",
            Link {
                to: BookRoute::RouterReferenceLayouts {
                    section: RouterReferenceLayoutsSection::Layouts,
                },
                class: "header",
                "Layouts"
            }
        }
        p {
            "Layouts allow you to wrap all child routes in a component. This can be useful when creating something like a header that will be used in many different routes."
        }
        p {
            Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/components/fn.Outlet.html",
                code { "Outlet" }
            }
            " tells the router where to render content in layouts. In the following example,"
            " "
            "the Index will be rendered within the "
            Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/components/fn.Outlet.html",
                code { "Outlet" }
            }
            "."
        }
        p {
            "This page is built with the Dioxus. It uses Layouts in several different places. Here is an outline of how layouts are used on the current page. Hover over different layouts to see what elements they are on the page."
        }
        LayoutsExplanation {}
        p { "Here is a more complete example of a layout wrapping the body of a page." }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(Routable, Clone)]\n</span><span style=\"color:#f8f8f2;\">#[rustfmt::skip]\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">Route {{\n</span><span style=\"color:#f8f8f2;\">    #[layout(Wrapper)]\n</span><span style=\"color:#f8f8f2;\">        #[route(</span><span style=\"color:#ffee99;\">&quot;/&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">        Index {{}},\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Wrapper</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        header {{ </span><span style=\"color:#ffee99;\">&quot;header&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// The index route will be rendered here\n</span><span style=\"color:#f8f8f2;\">        Outlet::&lt;Route&gt; {{}}\n</span><span style=\"color:#f8f8f2;\">        footer {{ </span><span style=\"color:#ffee99;\">&quot;footer&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Index</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{ h1 {{ </span><span style=\"color:#ffee99;\">&quot;Index&quot; </span><span style=\"color:#f8f8f2;\">}} }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "outlet.rs".to_string(),
        }
        p {
            "The example above will output the following HTML (line breaks added for"
            " "
            "readability):"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">&lt;</span><span style=\"color:#f8f8f2;\">header</span><span style=\"color:#f92672;\">&gt;</span><span style=\"color:#f8f8f2;\">header&lt;</span><span style=\"background-color:#f92672;color:#f8f8f0;\">/</span><span style=\"color:#f8f8f2;\">header</span><span style=\"color:#f92672;\">&gt;\n</span><span style=\"color:#f92672;\">&lt;</span><span style=\"color:#f8f8f2;\">h1</span><span style=\"color:#f92672;\">&gt;</span><span style=\"color:#f8f8f2;\">Index&lt;</span><span style=\"background-color:#f92672;color:#f8f8f0;\">/</span><span style=\"color:#f8f8f2;\">h1</span><span style=\"color:#f92672;\">&gt;\n</span><span style=\"color:#f92672;\">&lt;</span><span style=\"color:#f8f8f2;\">footer</span><span style=\"color:#f92672;\">&gt;</span><span style=\"color:#f8f8f2;\">footer&lt;</span><span style=\"background-color:#f92672;color:#f8f8f0;\">/</span><span style=\"color:#f8f8f2;\">footer</span><span style=\"color:#f92672;\">&gt;</span></pre>\n",
        }
        h2 { id: "layouts-with-dynamic-segments",
            Link {
                to: BookRoute::RouterReferenceLayouts {
                    section: RouterReferenceLayoutsSection::LayoutsWithDynamicSegments,
                },
                class: "header",
                "Layouts with dynamic segments"
            }
        }
        p {
            "You can combine layouts with "
            Link {
                to: BookRoute::RouterReferenceRoutesNested {
                    section: RouterReferenceRoutesNestedSection::Empty,
                },
                "nested routes"
            }
            " to create dynamic layouts with content that changes based on the current route."
        }
        p {
            "Just like routes, layouts components must accept a prop for each dynamic segment in the route. For example, if you have a route with a dynamic segment like  "
            code { "/:name" }
            ", your layout component must accept a  "
            code { "name" }
            " prop:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(Routable, Clone)]\n</span><span style=\"color:#f8f8f2;\">#[rustfmt::skip]\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">Route {{\n</span><span style=\"color:#f8f8f2;\">    #[nest(</span><span style=\"color:#ffee99;\">&quot;/:name&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">        #[layout(Wrapper)]\n</span><span style=\"color:#f8f8f2;\">            #[route(</span><span style=\"color:#ffee99;\">&quot;/&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">            Index {{\n</span><span style=\"color:#f8f8f2;\">                name: </span><span style=\"font-style:italic;color:#66d9ef;\">String</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            }},\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Wrapper</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">name</span><span style=\"color:#f8f8f2;\">: String) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        header {{ </span><span style=\"color:#ffee99;\">&quot;Welcome {{name}}!&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// The index route will be rendered here\n</span><span style=\"color:#f8f8f2;\">        Outlet::&lt;Route&gt; {{}}\n</span><span style=\"color:#f8f8f2;\">        footer {{ </span><span style=\"color:#ffee99;\">&quot;footer&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Index</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">name</span><span style=\"color:#f8f8f2;\">: String) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{ h1 {{ </span><span style=\"color:#ffee99;\">&quot;This is a homepage for {{name}}&quot; </span><span style=\"color:#f8f8f2;\">}} }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "outlet.rs".to_string(),
        }
        p {
            "Or to get the full route, you can use the  "
            code { "use_route" }
            " hook."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(Routable, Clone)]\n</span><span style=\"color:#f8f8f2;\">#[rustfmt::skip]\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">Route {{\n</span><span style=\"color:#f8f8f2;\">    #[layout(Wrapper)]\n</span><span style=\"color:#f8f8f2;\">        #[route(</span><span style=\"color:#ffee99;\">&quot;/:name&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">        Index {{\n</span><span style=\"color:#f8f8f2;\">            name: </span><span style=\"font-style:italic;color:#66d9ef;\">String</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">        }},\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Wrapper</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> full_route </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">use_route::&lt;Route&gt;();\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        header {{ </span><span style=\"color:#ffee99;\">&quot;Welcome to {{full_route}}!&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// The index route will be rendered here\n</span><span style=\"color:#f8f8f2;\">        Outlet::&lt;Route&gt; {{}}\n</span><span style=\"color:#f8f8f2;\">        footer {{ </span><span style=\"color:#ffee99;\">&quot;footer&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Index</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">name</span><span style=\"color:#f8f8f2;\">: String) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{ h1 {{ </span><span style=\"color:#ffee99;\">&quot;This is a homepage for {{name}}&quot; </span><span style=\"color:#f8f8f2;\">}} }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "outlet.rs".to_string(),
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum RouterReferenceNavigationIndexSection {
    #[default]
    Empty,
    LinksNavigation,
}
impl std::str::FromStr for RouterReferenceNavigationIndexSection {
    type Err = RouterReferenceNavigationIndexSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "links--navigation" => Ok(Self::LinksNavigation),
            _ => Err(RouterReferenceNavigationIndexSectionParseError),
        }
    }
}
impl std::fmt::Display for RouterReferenceNavigationIndexSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::LinksNavigation => f.write_str("links--navigation"),
        }
    }
}
#[derive(Debug)]
pub struct RouterReferenceNavigationIndexSectionParseError;
impl std::fmt::Display for RouterReferenceNavigationIndexSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of RouterReferenceNavigationIndexSectionlinks--navigation",
        )?;
        Ok(())
    }
}
impl std::error::Error for RouterReferenceNavigationIndexSectionParseError {}
#[component(no_case_check)]
pub fn RouterReferenceNavigationIndex(
    section: RouterReferenceNavigationIndexSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "links--navigation",
            Link {
                to: BookRoute::RouterReferenceNavigationIndex {
                    section: RouterReferenceNavigationIndexSection::LinksNavigation,
                },
                class: "header",
                "Links & Navigation"
            }
        }
        p {
            "When we split our app into pages, we need to provide our users with a way to"
            " "
            "navigate between them. On regular web pages, we'd use an anchor element for that,"
            " "
            "like this:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">&lt;</span><span style=\"color:#f8f8f2;\">a href</span><span style=\"color:#f92672;\">=</span><span style=\"color:#ffee99;\">&quot;/other&quot;</span><span style=\"color:#f92672;\">&gt;</span><span style=\"color:#f8f8f2;\">Link to an other page&lt;</span><span style=\"background-color:#f92672;color:#f8f8f0;\">/</span><span style=\"color:#f8f8f2;\">a</span><span style=\"color:#f92672;\">&gt;</span></pre>\n" }
        p { "However, we cannot do that when using the router for three reasons:" }
        ol {
            li {
                "Anchor tags make the browser load a new page from the server. This takes a"
                " "
                "lot of time, and it is much faster to let the router handle the navigation"
                " "
                "client-side."
            }
            li {
                "Navigation using anchor tags only works when the app is running inside a"
                " "
                "browser. This means we cannot use them inside apps using Dioxus Desktop."
            }
            li {
                "Anchor tags cannot check if the target page exists. This means we cannot"
                " "
                "prevent accidentally linking to non-existent pages."
            }
        }
        p {
            "To solve these problems, the router provides us with a "
            "[ "
            code { "Link" }
            "]"
            " component we can"
            " "
            "use like this:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">NavBar</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        nav {{\n</span><span style=\"color:#f8f8f2;\">            ul {{\n</span><span style=\"color:#f8f8f2;\">                li {{\n</span><span style=\"color:#f8f8f2;\">                    Link {{ to: Route::Home {{}}, </span><span style=\"color:#ffee99;\">&quot;Home&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">                }}\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">        Outlet::&lt;Route&gt; {{}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "links.rs".to_string(),
        }
        p {
            "The  "
            code { "target" }
            " in the example above is similar to the  "
            code { "href" }
            " of a regular anchor"
            " "
            "element. However, it tells the router more about what kind of navigation it"
            " "
            "should perform. It accepts something that can be converted into a"
            " "
            "[ "
            code { "NavigationTarget" }
            "]"
            " "
            ":"
        }
        ul {
            li {
                "The example uses a Internal route. This is the most common type of navigation."
                " "
                "It tells the router to navigate to a page within our app by passing a variant of a "
                "["
                code { "Routable" }
                "]"
                " enum. This type of navigation can never fail if the link component is used inside a router component."
            }
            li {
                "["
                code { "External" }
                "]"
                " allows us to navigate to URLs outside of our app. This is useful"
                " "
                "for links to external websites. NavigationTarget::External accepts an URL to navigate to. This type of navigation can fail if the URL is invalid."
            }
        }
        blockquote {
            p {
                "The "
                "[ "
                code { "Link" }
                "]"
                " accepts several props that modify its behavior. See the API docs"
                " "
                "for more details."
            }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum RouterReferenceNavigationProgrammaticSection {
    #[default]
    Empty,
    ProgrammaticNavigation,
    UsingANavigator,
    ExternalNavigationTargets,
}
impl std::str::FromStr for RouterReferenceNavigationProgrammaticSection {
    type Err = RouterReferenceNavigationProgrammaticSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "programmatic-navigation" => Ok(Self::ProgrammaticNavigation),
            "using-a-navigator" => Ok(Self::UsingANavigator),
            "external-navigation-targets" => Ok(Self::ExternalNavigationTargets),
            _ => Err(RouterReferenceNavigationProgrammaticSectionParseError),
        }
    }
}
impl std::fmt::Display for RouterReferenceNavigationProgrammaticSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::ProgrammaticNavigation => f.write_str("programmatic-navigation"),
            Self::UsingANavigator => f.write_str("using-a-navigator"),
            Self::ExternalNavigationTargets => f.write_str("external-navigation-targets"),
        }
    }
}
#[derive(Debug)]
pub struct RouterReferenceNavigationProgrammaticSectionParseError;
impl std::fmt::Display for RouterReferenceNavigationProgrammaticSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of RouterReferenceNavigationProgrammaticSectionprogrammatic-navigation, using-a-navigator, external-navigation-targets",
        )?;
        Ok(())
    }
}
impl std::error::Error for RouterReferenceNavigationProgrammaticSectionParseError {}
#[component(no_case_check)]
pub fn RouterReferenceNavigationProgrammatic(
    section: RouterReferenceNavigationProgrammaticSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "programmatic-navigation",
            Link {
                to: BookRoute::RouterReferenceNavigationProgrammatic {
                    section: RouterReferenceNavigationProgrammaticSection::ProgrammaticNavigation,
                },
                class: "header",
                "Programmatic Navigation"
            }
        }
        p {
            "Sometimes we want our application to navigate to another page without having the"
            " "
            "user click on a link. This is called programmatic navigation."
        }
        h2 { id: "using-a-navigator",
            Link {
                to: BookRoute::RouterReferenceNavigationProgrammatic {
                    section: RouterReferenceNavigationProgrammaticSection::UsingANavigator,
                },
                class: "header",
                "Using a Navigator"
            }
        }
        p {
            "We can get a navigator with the "
            Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/prelude/struct.Navigator.html",
                code { "navigator" }
            }
            " function which returns a "
            Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/prelude/struct.Navigator.html",
                code { "Navigator" }
            }
            "."
        }
        p {
            "We can use the "
            Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/prelude/struct.Navigator.html",
                code { "Navigator" }
            }
            " to trigger four different kinds of navigation:"
        }
        ul {
            li {
                code { "push" }
                " will navigate to the target. It works like a regular anchor tag."
            }
            li {
                code { "replace" }
                " works like "
                code { "push" }
                ", except that it replaces the current history entry"
                " "
                "instead of adding a new one. This means the prior page cannot be restored with the browser's back button."
            }
            li {
                code { "Go back" }
                " works like the browser's back button."
            }
            li {
                code { "Go forward" }
                " works like the browser's forward button."
            }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Home</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> nav </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">navigator</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// push\n</span><span style=\"color:#f8f8f2;\">    nav.</span><span style=\"color:#66d9ef;\">push</span><span style=\"color:#f8f8f2;\">(Route::PageNotFound {{ route: vec![] }});\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// replace\n</span><span style=\"color:#f8f8f2;\">    nav.</span><span style=\"color:#66d9ef;\">replace</span><span style=\"color:#f8f8f2;\">(Route::Home {{}});\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// go back\n</span><span style=\"color:#f8f8f2;\">    nav.</span><span style=\"color:#66d9ef;\">go_back</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// go forward\n</span><span style=\"color:#f8f8f2;\">    nav.</span><span style=\"color:#66d9ef;\">go_forward</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{ h1 {{ </span><span style=\"color:#ffee99;\">&quot;Welcome to the Dioxus Blog!&quot; </span><span style=\"color:#f8f8f2;\">}} }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "navigator.rs".to_string(),
        }
        p {
            "You might have noticed that, like "
            Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/components/fn.Link.html",
                code { "Link" }
            }
            ", the "
            Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/prelude/struct.Navigator.html",
                code { "Navigator" }
            }
            "s "
            code { "push" }
            " and"
            code { "replace" }
            " functions take a "
            Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/navigation/enum.NavigationTarget.html",
                code { "NavigationTarget" }
            }
            ". This means we can use either"
            code { "Internal" }
            ", or "
            code { "External" }
            " targets."
        }
        h2 { id: "external-navigation-targets",
            Link {
                to: BookRoute::RouterReferenceNavigationProgrammatic {
                    section: RouterReferenceNavigationProgrammaticSection::ExternalNavigationTargets,
                },
                class: "header",
                "External Navigation Targets"
            }
        }
        p {
            "Unlike a "
            Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/components/fn.Link.html",
                code { "Link" }
            }
            ", the "
            Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/prelude/struct.Navigator.html",
                code { "Navigator" }
            }
            " cannot rely on the browser (or webview) to"
            " "
            "handle navigation to external targets via a generated anchor element."
        }
        p {
            "This means, that under certain conditions, navigation to external targets can"
            " "
            "fail."
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum RouterReferenceHistoryProvidersSection {
    #[default]
    Empty,
    HistoryProviders,
}
impl std::str::FromStr for RouterReferenceHistoryProvidersSection {
    type Err = RouterReferenceHistoryProvidersSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "history-providers" => Ok(Self::HistoryProviders),
            _ => Err(RouterReferenceHistoryProvidersSectionParseError),
        }
    }
}
impl std::fmt::Display for RouterReferenceHistoryProvidersSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::HistoryProviders => f.write_str("history-providers"),
        }
    }
}
#[derive(Debug)]
pub struct RouterReferenceHistoryProvidersSectionParseError;
impl std::fmt::Display for RouterReferenceHistoryProvidersSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of RouterReferenceHistoryProvidersSectionhistory-providers",
        )?;
        Ok(())
    }
}
impl std::error::Error for RouterReferenceHistoryProvidersSectionParseError {}
#[component(no_case_check)]
pub fn RouterReferenceHistoryProviders(
    section: RouterReferenceHistoryProvidersSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "history-providers",
            Link {
                to: BookRoute::RouterReferenceHistoryProviders {
                    section: RouterReferenceHistoryProvidersSection::HistoryProviders,
                },
                class: "header",
                "History Providers"
            }
        }
        p {
            "[ "
            code { "HistoryProvider" }
            "]"
            " "
            "s are used by the router to keep track of the navigation history"
            " "
            "and update any external state (e.g. the browser's URL)."
        }
        p {
            "The router provides two "
            "[ "
            code { "HistoryProvider" }
            "]"
            " "
            "s, but you can also create your own."
            " "
            "The two default implementations are:"
        }
        ul {
            li {
                "The "
                "["
                code { "MemoryHistory" }
                "]"
                " is a custom implementation that works in memory."
            }
            li {
                "The "
                "["
                code { "LiveviewHistory" }
                "]"
                " is a custom implementation that works with the liveview renderer."
            }
            li {
                "The "
                "["
                code { "WebHistory" }
                "]"
                " integrates with the browser's URL."
            }
        }
        p {
            "By default, the router uses the "
            "[ "
            code { "MemoryHistory" }
            "]"
            " "
            ". It might be changed to use"
            " "
            "[ "
            code { "WebHistory" }
            "]"
            " when the  "
            code { "web" }
            " feature is active, but that is not guaranteed."
        }
        p { "You can override the default history:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        Router::&lt;Route&gt; {{ config: || RouterConfig::default() }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "history_provider.rs".to_string(),
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum RouterReferenceHistoryButtonsSection {
    #[default]
    Empty,
    HistoryButtons,
}
impl std::str::FromStr for RouterReferenceHistoryButtonsSection {
    type Err = RouterReferenceHistoryButtonsSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "history-buttons" => Ok(Self::HistoryButtons),
            _ => Err(RouterReferenceHistoryButtonsSectionParseError),
        }
    }
}
impl std::fmt::Display for RouterReferenceHistoryButtonsSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::HistoryButtons => f.write_str("history-buttons"),
        }
    }
}
#[derive(Debug)]
pub struct RouterReferenceHistoryButtonsSectionParseError;
impl std::fmt::Display for RouterReferenceHistoryButtonsSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of RouterReferenceHistoryButtonsSectionhistory-buttons",
        )?;
        Ok(())
    }
}
impl std::error::Error for RouterReferenceHistoryButtonsSectionParseError {}
#[component(no_case_check)]
pub fn RouterReferenceHistoryButtons(
    section: RouterReferenceHistoryButtonsSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "history-buttons",
            Link {
                to: BookRoute::RouterReferenceHistoryButtons {
                    section: RouterReferenceHistoryButtonsSection::HistoryButtons,
                },
                class: "header",
                "History Buttons"
            }
        }
        p {
            "Some platforms, like web browsers, provide users with an easy way to navigate"
            " "
            "through an app's history. They have UI elements or integrate with the OS."
        }
        p {
            "However, native platforms usually don't provide such amenities, which means that"
            " "
            "apps wanting users to have access to them, need to implement them. For this"
            " "
            "reason, the router comes with two components, which emulate a browser's back and"
            " "
            "forward buttons:"
        }
        ul {
            li {
                Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/components/fn.GoBackButton.html",
                    code { "GoBackButton" }
                }
            }
            li {
                Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/components/fn.GoForwardButton.html",
                    code { "GoForwardButton" }
                }
            }
        }
        blockquote {
            p {
                "If you want to navigate through the history programmatically, take a look at"
                Link {
                    to: BookRoute::RouterReferenceNavigationProgrammatic {
                        section: RouterReferenceNavigationProgrammaticSection::Empty,
                    },
                    code { "programmatic navigation" }
                }
                "."
            }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">HistoryNavigation</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        GoBackButton {{ </span><span style=\"color:#ffee99;\">&quot;Back to the Past&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        GoForwardButton {{ </span><span style=\"color:#ffee99;\">&quot;Back to the Future&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "history_buttons.rs".to_string(),
        }
        p {
            "As you might know, browsers usually disable the back and forward buttons if"
            " "
            "there is no history to navigate to. The router's history buttons try to do that"
            " "
            "too, but depending on the "
            "["
            " "
            "history provider"
            " "
            "]"
            " that might not be possible."
        }
        p {
            "Importantly, neither  "
            code { "WebHistory" }
            " supports that feature."
            " "
            "This is due to limitations of the browser History API."
        }
        p {
            "However, in both cases, the router will just ignore button presses, if there is"
            " "
            "no history to navigate to."
        }
        p {
            "Also, when using  "
            code { "WebHistory" }
            ", the history buttons might"
            " "
            "navigate a user to a history entry outside your app."
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum RouterReferenceRoutingUpdateCallbackSection {
    #[default]
    Empty,
    RoutingUpdateCallback,
    HowDoesTheCallbackBehave,
    CodeExample,
}
impl std::str::FromStr for RouterReferenceRoutingUpdateCallbackSection {
    type Err = RouterReferenceRoutingUpdateCallbackSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "routing-update-callback" => Ok(Self::RoutingUpdateCallback),
            "how-does-the-callback-behave" => Ok(Self::HowDoesTheCallbackBehave),
            "code-example" => Ok(Self::CodeExample),
            _ => Err(RouterReferenceRoutingUpdateCallbackSectionParseError),
        }
    }
}
impl std::fmt::Display for RouterReferenceRoutingUpdateCallbackSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::RoutingUpdateCallback => f.write_str("routing-update-callback"),
            Self::HowDoesTheCallbackBehave => f.write_str("how-does-the-callback-behave"),
            Self::CodeExample => f.write_str("code-example"),
        }
    }
}
#[derive(Debug)]
pub struct RouterReferenceRoutingUpdateCallbackSectionParseError;
impl std::fmt::Display for RouterReferenceRoutingUpdateCallbackSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of RouterReferenceRoutingUpdateCallbackSectionrouting-update-callback, how-does-the-callback-behave, code-example",
        )?;
        Ok(())
    }
}
impl std::error::Error for RouterReferenceRoutingUpdateCallbackSectionParseError {}
#[component(no_case_check)]
pub fn RouterReferenceRoutingUpdateCallback(
    section: RouterReferenceRoutingUpdateCallbackSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "routing-update-callback",
            Link {
                to: BookRoute::RouterReferenceRoutingUpdateCallback {
                    section: RouterReferenceRoutingUpdateCallbackSection::RoutingUpdateCallback,
                },
                class: "header",
                "Routing Update Callback"
            }
        }
        p {
            "In some cases, we might want to run custom code when the current route changes. For this reason, the "
            Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/prelude/struct.RouterConfig.html",
                code { "RouterConfig" }
            }
            " exposes an "
            code { "on_update" }
            " field."
        }
        h2 { id: "how-does-the-callback-behave",
            Link {
                to: BookRoute::RouterReferenceRoutingUpdateCallback {
                    section: RouterReferenceRoutingUpdateCallbackSection::HowDoesTheCallbackBehave,
                },
                class: "header",
                "How does the callback behave?"
            }
        }
        p {
            "The  "
            code { "on_update" }
            " is called whenever the current routing information changes. It is called after the router updated its internal state, but before dependent components and hooks are updated."
        }
        p {
            "If the callback returns a "
            Link { to: "https://docs.rs/dioxus-router/latest/dioxus_router/navigation/enum.NavigationTarget.html",
                code { "NavigationTarget" }
            }
            ", the router will replace the current location with the specified target. It will not call the "
            code { "on_update" }
            " again."
        }
        p {
            "If at any point the router encounters a navigation failure, it will go to the appropriate state without calling the  "
            code { "on_update" }
            ". It doesn't matter if the invalid target initiated the navigation, was found as a redirect target, or was returned by the  "
            code { "on_update" }
            " itself."
        }
        h2 { id: "code-example",
            Link {
                to: BookRoute::RouterReferenceRoutingUpdateCallback {
                    section: RouterReferenceRoutingUpdateCallbackSection::CodeExample,
                },
                class: "header",
                "Code Example"
            }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(Routable, Clone, PartialEq)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">Route {{\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    Index {{}},\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/home&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    Home {{}},\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Home</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{ p {{ </span><span style=\"color:#ffee99;\">&quot;Home&quot; </span><span style=\"color:#f8f8f2;\">}} }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Index</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{ p {{ </span><span style=\"color:#ffee99;\">&quot;Index&quot; </span><span style=\"color:#f8f8f2;\">}} }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">app</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        Router::&lt;Route&gt; {{\n</span><span style=\"color:#f8f8f2;\">            config: || {{\n</span><span style=\"color:#f8f8f2;\">                RouterConfig::default()\n</span><span style=\"color:#f8f8f2;\">                    .</span><span style=\"color:#66d9ef;\">on_update</span><span style=\"color:#f8f8f2;\">(|</span><span style=\"font-style:italic;color:#fd971f;\">state</span><span style=\"color:#f8f8f2;\">| {{\n</span><span style=\"color:#f8f8f2;\">                        (state.</span><span style=\"color:#66d9ef;\">current</span><span style=\"color:#f8f8f2;\">() </span><span style=\"color:#f92672;\">== </span><span style=\"color:#f8f8f2;\">Route::Index {{}})\n</span><span style=\"color:#f8f8f2;\">                            .</span><span style=\"color:#66d9ef;\">then_some</span><span style=\"color:#f8f8f2;\">(NavigationTarget::Internal(Route::Home {{}}))\n</span><span style=\"color:#f8f8f2;\">                    }})\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "routing_update.rs".to_string(),
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuidesAssetsSection {
    #[default]
    Empty,
    Assets,
    IncludingImages,
    IncludingArbitraryFiles,
    IncludingStylesheets,
    Conclusion,
}
impl std::str::FromStr for GuidesAssetsSection {
    type Err = GuidesAssetsSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "assets" => Ok(Self::Assets),
            "including-images" => Ok(Self::IncludingImages),
            "including-arbitrary-files" => Ok(Self::IncludingArbitraryFiles),
            "including-stylesheets" => Ok(Self::IncludingStylesheets),
            "conclusion" => Ok(Self::Conclusion),
            _ => Err(GuidesAssetsSectionParseError),
        }
    }
}
impl std::fmt::Display for GuidesAssetsSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Assets => f.write_str("assets"),
            Self::IncludingImages => f.write_str("including-images"),
            Self::IncludingArbitraryFiles => f.write_str("including-arbitrary-files"),
            Self::IncludingStylesheets => f.write_str("including-stylesheets"),
            Self::Conclusion => f.write_str("conclusion"),
        }
    }
}
#[derive(Debug)]
pub struct GuidesAssetsSectionParseError;
impl std::fmt::Display for GuidesAssetsSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuidesAssetsSectionassets, including-images, including-arbitrary-files, including-stylesheets, conclusion",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuidesAssetsSectionParseError {}
#[component(no_case_check)]
pub fn GuidesAssets(section: GuidesAssetsSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "assets",
            Link {
                to: BookRoute::GuidesAssets {
                    section: GuidesAssetsSection::Assets,
                },
                class: "header",
                "Assets"
            }
        }
        p {
            "Assets are files that are included in the final build of the application. They can be images, fonts, stylesheets, or any other file that is not a source file. Dioxus includes first class support for assets, and provides a simple way to include them in your application and automatically optimize them for production."
        }
        p {
            "Assets in dioxus are also compatible with libraries! If you are building a library, you can include assets in your library and they will be automatically included in the final build of any application that uses your library."
        }
        h2 { id: "including-images",
            Link {
                to: BookRoute::GuidesAssets {
                    section: GuidesAssetsSection::IncludingImages,
                },
                class: "header",
                "Including images"
            }
        }
        p {
            "To include an asset in your application, you can simply wrap the path to the asset in the  "
            code { "asset!" }
            " macro. For example, to include an image in your application, you can use the following code:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// You can link to assets that are relative to the package root or even link to an asset from a url\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// These assets will automatically be picked up by the dioxus cli, optimized, and bundled with your final applications\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">const </span><span style=\"color:#ff80f4;\">ASSET</span><span style=\"color:#f8f8f2;\">: Asset </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">asset!(</span><span style=\"color:#ffee99;\">&quot;/assets/static/ferrous_wave.png&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        img {{ src: </span><span style=\"color:#ffee99;\">&quot;{{ASSET}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "assets.rs".to_string(),
        }
        p {
            "You can also optimize, resize, and preload images using the  "
            code { "asset!" }
            " macro. Choosing an optimized file type (like Avif) and a reasonable quality setting can significantly reduce the size of your images which helps your application load faster. For example, you can use the following code to include an optimized image in your application:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">const </span><span style=\"color:#ff80f4;\">ENUM_ROUTER_IMG</span><span style=\"color:#f8f8f2;\">: Asset </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">asset!(\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#ffee99;\">&quot;/assets/static/enum_router.png&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// You can pass a second argument to the asset macro to set up options for the asset\n</span><span style=\"color:#f8f8f2;\">    ImageAssetOptions::new()\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// You can set the image size in pixels at compile time to send the smallest possible image to the client\n</span><span style=\"color:#f8f8f2;\">        .</span><span style=\"color:#66d9ef;\">with_size</span><span style=\"color:#f8f8f2;\">(ImageSize::Manual {{ width: </span><span style=\"color:#ff80f4;\">52</span><span style=\"color:#f8f8f2;\">, height: </span><span style=\"color:#ff80f4;\">52 </span><span style=\"color:#f8f8f2;\">}})\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// You can also convert the image to a web friendly format at compile time. This can make your images significantly smaller\n</span><span style=\"color:#f8f8f2;\">        .</span><span style=\"color:#66d9ef;\">with_format</span><span style=\"color:#f8f8f2;\">(ImageFormat::Avif)\n</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">EnumRouter</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        img {{ src: </span><span style=\"color:#ffee99;\">&quot;{{ENUM_ROUTER_IMG}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "assets.rs".to_string(),
        }
        h2 { id: "including-arbitrary-files",
            Link {
                to: BookRoute::GuidesAssets {
                    section: GuidesAssetsSection::IncludingArbitraryFiles,
                },
                class: "header",
                "Including arbitrary files"
            }
        }
        p {
            "In dioxus desktop, you may want to include a file with data for your application. If you don't set any options for your asset and the file extension is not recognized, the asset will be copied without any changes. For example, you can use the following code to include a binary file in your application:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// You can also collect arbitrary files. Relative paths are resolved relative to the package root\n</span><span style=\"font-style:italic;color:#66d9ef;\">const </span><span style=\"color:#ff80f4;\">PATH_TO_BUNDLED_CARGO_TOML</span><span style=\"color:#f8f8f2;\">: Asset </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">asset!(</span><span style=\"color:#ffee99;\">&quot;/Cargo.toml&quot;</span><span style=\"color:#f8f8f2;\">);</span></pre>\n",
            name: "assets.rs".to_string(),
        }
        p {
            "These files will be automatically included in the final build of your application, and you can use them in your application as you would any other file."
        }
        h2 { id: "including-stylesheets",
            Link {
                to: BookRoute::GuidesAssets {
                    section: GuidesAssetsSection::IncludingStylesheets,
                },
                class: "header",
                "Including stylesheets"
            }
        }
        p {
            "You can include stylesheets in your application using the  "
            code { "asset!" }
            " macro. Stylesheets will automatically be minified as they are bundled to speed up load times. For example, you can use the following code to include a stylesheet in your application:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// You can also bundle stylesheets with your application\n</span><span style=\"color:#8c8c8c;\">// Any files that end with .css will be minified and bundled with your application even if you don&#39;t explicitly include them in your &lt;head&gt;\n</span><span style=\"font-style:italic;color:#66d9ef;\">const </span><span style=\"color:#f92672;\">_</span><span style=\"color:#f8f8f2;\">: Asset </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">asset!(</span><span style=\"color:#ffee99;\">&quot;/tailwind.css&quot;</span><span style=\"color:#f8f8f2;\">);</span></pre>\n",
            name: "assets.rs".to_string(),
        }
        blockquote {
            p {
                "The "
                Link {
                    to: BookRoute::CookbookTailwind {
                        section: CookbookTailwindSection::Empty,
                    },
                    "tailwind guide"
                }
                " has more information on how to use tailwind with dioxus."
            }
        }
        h2 { id: "conclusion",
            Link {
                to: BookRoute::GuidesAssets {
                    section: GuidesAssetsSection::Conclusion,
                },
                class: "header",
                "Conclusion"
            }
        }
        p {
            "Dioxus provides first class support for assets, and makes it easy to include them in your application. You can include images, arbitrary files, and stylesheets in your application, and dioxus will automatically optimize them for production. This makes it easy to include assets in your application and ensure that they are optimized for production."
        }
        p {
            "You can read more about assets and all the options available to optimize your assets in the "
            Link { to: "https://docs.rs/manganis/0.6.0/manganis", "manganis documentation" }
            "."
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuidesWebIndexSection {
    #[default]
    Empty,
    Web,
    Support,
    RunningJavascript,
    CustomizingIndexTemplate,
}
impl std::str::FromStr for GuidesWebIndexSection {
    type Err = GuidesWebIndexSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "web" => Ok(Self::Web),
            "support" => Ok(Self::Support),
            "running-javascript" => Ok(Self::RunningJavascript),
            "customizing-index-template" => Ok(Self::CustomizingIndexTemplate),
            _ => Err(GuidesWebIndexSectionParseError),
        }
    }
}
impl std::fmt::Display for GuidesWebIndexSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Web => f.write_str("web"),
            Self::Support => f.write_str("support"),
            Self::RunningJavascript => f.write_str("running-javascript"),
            Self::CustomizingIndexTemplate => f.write_str("customizing-index-template"),
        }
    }
}
#[derive(Debug)]
pub struct GuidesWebIndexSectionParseError;
impl std::fmt::Display for GuidesWebIndexSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuidesWebIndexSectionweb, support, running-javascript, customizing-index-template",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuidesWebIndexSectionParseError {}
#[component(no_case_check)]
pub fn GuidesWebIndex(section: GuidesWebIndexSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "web",
            Link {
                to: BookRoute::GuidesWebIndex {
                    section: GuidesWebIndexSection::Web,
                },
                class: "header",
                "Web"
            }
        }
        p {
            "To run on the Web, your app must be compiled to WebAssembly and depend on the  "
            code { "dioxus" }
            " and  "
            code { "dioxus-web" }
            " crates."
        }
        p {
            "A build of Dioxus for the web will be roughly equivalent to the size of a React build (70kb vs 65kb) but it will load significantly faster because "
            Link { to: "https://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler/",
                "WebAssembly can be compiled as it is streamed"
            }
            "."
        }
        p { "Examples:" }
        ul {
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/blob/main/examples/todomvc.rs",
                    "TodoMVC"
                }
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/examples/tailwind",
                    "Tailwind App"
                }
            }
        }
        p {
            Link { to: "https://github.com/DioxusLabs/dioxus/blob/main/examples/todomvc.rs",
                img {
                    src: "https://github.com/DioxusLabs/example-projects/raw/master/todomvc/example.png",
                    alt: "TodoMVC example",
                    title: "",
                }
            }
        }
        blockquote {
            p {
                "Note: Because of the limitations of Wasm, "
                Link { to: "https://rustwasm.github.io/docs/book/reference/which-crates-work-with-wasm.html",
                    "not every crate will work"
                }
                " with your web apps, so you'll need to make sure that your crates work without native system calls (timers, IO, etc)."
            }
        }
        h2 { id: "support",
            Link {
                to: BookRoute::GuidesWebIndex {
                    section: GuidesWebIndexSection::Support,
                },
                class: "header",
                "Support"
            }
        }
        p { "The Web is the best-supported target platform for Dioxus." }
        ul {
            li {
                "Because your app will be compiled to WASM you have access to browser APIs through "
                Link { to: "https://rustwasm.github.io/docs/wasm-bindgen/introduction.html",
                    "wasm-bindgen"
                }
                "."
            }
            li {
                "Dioxus provides hydration to resume apps that are rendered on the server. See the "
                Link {
                    to: BookRoute::GuidesFullstackIndex {
                        section: GuidesFullstackIndexSection::Empty,
                    },
                    "fullstack"
                }
                " reference for more information."
            }
        }
        h2 { id: "running-javascript",
            Link {
                to: BookRoute::GuidesWebIndex {
                    section: GuidesWebIndexSection::RunningJavascript,
                },
                class: "header",
                "Running Javascript"
            }
        }
        p {
            "Dioxus provides some ergonomic wrappers over the browser API, but in some cases you may need to access parts of the browser API Dioxus does not expose."
        }
        p {
            "For these cases, Dioxus web exposes the use_eval hook that allows you to run raw Javascript in the webview:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">main</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">launch</span><span style=\"color:#f8f8f2;\">(app);\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">app</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> future </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_resource</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">move ||</span><span style=\"color:#f8f8f2;\"> async </span><span style=\"color:#f92672;\">move </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// You can create as many eval instances as you want\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> eval </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">document::eval(\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"font-style:italic;color:#66d9ef;\">r</span><span style=\"color:#ffee99;\">#&quot;\n</span><span style=\"color:#ffee99;\">            // You can send messages from JavaScript to Rust with the dioxus.send function\n</span><span style=\"color:#ffee99;\">            dioxus.send(&quot;Hi from JS!&quot;);\n</span><span style=\"color:#ffee99;\">            // You can receive messages from Rust to JavaScript with the dioxus.recv function\n</span><span style=\"color:#ffee99;\">            let msg = await dioxus.recv();\n</span><span style=\"color:#ffee99;\">            console.log(msg);\n</span><span style=\"color:#ffee99;\">            &quot;#</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">        );\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// You can send messages to JavaScript with the send method\n</span><span style=\"color:#f8f8f2;\">        eval.</span><span style=\"color:#66d9ef;\">send</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;Hi from Rust!&quot;</span><span style=\"color:#f8f8f2;\">).</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// You can receive any message from JavaScript with the recv method\n</span><span style=\"color:#f8f8f2;\">        eval.recv::&lt;String&gt;().await.</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">    }});\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">match</span><span style=\"color:#f8f8f2;\"> future.</span><span style=\"color:#66d9ef;\">read_unchecked</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#66d9ef;\">as_ref</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">Some</span><span style=\"color:#f8f8f2;\">(v) </span><span style=\"color:#f92672;\">=&gt; </span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">            p {{ </span><span style=\"color:#ffee99;\">&quot;{{v}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }},\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">_ =&gt; </span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">            p {{ </span><span style=\"color:#ffee99;\">&quot;hello&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }},\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "eval.rs".to_string(),
        }
        p {
            "If you are targeting web, but don't plan on targeting any other Dioxus renderer you can also use the generated wrappers in the "
            Link { to: "https://rustwasm.github.io/wasm-bindgen/web-sys/index.html",
                "web-sys"
            }
            " and "
            Link { to: "https://gloo-rs.web.app/", "gloo" }
            " crates."
        }
        h2 { id: "customizing-index-template",
            Link {
                to: BookRoute::GuidesWebIndex {
                    section: GuidesWebIndexSection::CustomizingIndexTemplate,
                },
                class: "header",
                "Customizing Index Template"
            }
        }
        p {
            "Dioxus supports providing custom index.html templates. The index.html must include a  "
            code { "div" }
            " with the id  "
            code { "main" }
            " to be used. Hot Reload is still supported. An example"
            " "
            "is provided in the "
            Link { to: "https://github.com/DioxusLabs/dioxus/blob/main/examples/PWA-example/index.html",
                "PWA-Example"
            }
            "."
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuidesDesktopIndexSection {
    #[default]
    Empty,
    Desktop,
    Examples,
    RunningJavascript,
    CustomAssets,
    IntegratingWithWry,
}
impl std::str::FromStr for GuidesDesktopIndexSection {
    type Err = GuidesDesktopIndexSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "desktop" => Ok(Self::Desktop),
            "examples" => Ok(Self::Examples),
            "running-javascript" => Ok(Self::RunningJavascript),
            "custom-assets" => Ok(Self::CustomAssets),
            "integrating-with-wry" => Ok(Self::IntegratingWithWry),
            _ => Err(GuidesDesktopIndexSectionParseError),
        }
    }
}
impl std::fmt::Display for GuidesDesktopIndexSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Desktop => f.write_str("desktop"),
            Self::Examples => f.write_str("examples"),
            Self::RunningJavascript => f.write_str("running-javascript"),
            Self::CustomAssets => f.write_str("custom-assets"),
            Self::IntegratingWithWry => f.write_str("integrating-with-wry"),
        }
    }
}
#[derive(Debug)]
pub struct GuidesDesktopIndexSectionParseError;
impl std::fmt::Display for GuidesDesktopIndexSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuidesDesktopIndexSectiondesktop, examples, running-javascript, custom-assets, integrating-with-wry",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuidesDesktopIndexSectionParseError {}
#[component(no_case_check)]
pub fn GuidesDesktopIndex(section: GuidesDesktopIndexSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "desktop",
            Link {
                to: BookRoute::GuidesDesktopIndex {
                    section: GuidesDesktopIndexSection::Desktop,
                },
                class: "header",
                "Desktop"
            }
        }
        p { "This guide will cover concepts specific to the Dioxus desktop renderer." }
        p {
            "Apps built with Dioxus desktop use the system WebView to render the page. This makes the final size of application much smaller than other WebView renderers (typically under 5MB)."
        }
        p {
            "Although desktop apps are rendered in a WebView, your Rust code runs natively. This means that browser APIs are "
            em { "not" }
            " available, so rendering WebGL, Canvas, etc is not as easy as the Web. However, native system APIs "
            em { "are" }
            " accessible, so streaming, WebSockets, filesystem, etc are all easily accessible though system APIs."
        }
        p {
            "Dioxus desktop is built on top of "
            Link { to: "https://github.com/tauri-apps/wry", "wry" }
            ", a Rust library for creating desktop applications with a WebView."
        }
        blockquote {
            p {
                "In the future, we plan to move to a custom web renderer-based DOM renderer with WGPU integrations ("
                Link { to: "https://github.com/DioxusLabs/blitz", "Blitz" }
                ")."
            }
        }
        h2 { id: "examples",
            Link {
                to: BookRoute::GuidesDesktopIndex {
                    section: GuidesDesktopIndexSection::Examples,
                },
                class: "header",
                "Examples"
            }
        }
        ul {
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/example-projects/file-explorer",
                    "File Explorer"
                }
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/examples/tailwind",
                    "Tailwind App"
                }
            }
        }
        p {
            Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/examples/tailwind",
                img {
                    src: asset!(
                        "/assets/static/tailwind_desktop_app.png", ImageAssetOptions::new().with_avif()
                    ),
                    alt: "Tailwind App screenshot",
                    title: "",
                }
            }
        }
        h2 { id: "running-javascript",
            Link {
                to: BookRoute::GuidesDesktopIndex {
                    section: GuidesDesktopIndexSection::RunningJavascript,
                },
                class: "header",
                "Running Javascript"
            }
        }
        p {
            "Dioxus provides some ergonomic wrappers over the browser API, but in some cases you may need to access parts of the browser API Dioxus does not expose."
        }
        p {
            "For these cases, Dioxus desktop exposes the use_eval hook that allows you to run raw Javascript in the webview:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">main</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">launch</span><span style=\"color:#f8f8f2;\">(app);\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">app</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> future </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_resource</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">move ||</span><span style=\"color:#f8f8f2;\"> async </span><span style=\"color:#f92672;\">move </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// You can create as many eval instances as you want\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> eval </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">document::eval(\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"font-style:italic;color:#66d9ef;\">r</span><span style=\"color:#ffee99;\">#&quot;\n</span><span style=\"color:#ffee99;\">            // You can send messages from JavaScript to Rust with the dioxus.send function\n</span><span style=\"color:#ffee99;\">            dioxus.send(&quot;Hi from JS!&quot;);\n</span><span style=\"color:#ffee99;\">            // You can receive messages from Rust to JavaScript with the dioxus.recv function\n</span><span style=\"color:#ffee99;\">            let msg = await dioxus.recv();\n</span><span style=\"color:#ffee99;\">            console.log(msg);\n</span><span style=\"color:#ffee99;\">            &quot;#</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">        );\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// You can send messages to JavaScript with the send method\n</span><span style=\"color:#f8f8f2;\">        eval.</span><span style=\"color:#66d9ef;\">send</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;Hi from Rust!&quot;</span><span style=\"color:#f8f8f2;\">).</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// You can receive any message from JavaScript with the recv method\n</span><span style=\"color:#f8f8f2;\">        eval.recv::&lt;String&gt;().await.</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">    }});\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">match</span><span style=\"color:#f8f8f2;\"> future.</span><span style=\"color:#66d9ef;\">read_unchecked</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#66d9ef;\">as_ref</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">Some</span><span style=\"color:#f8f8f2;\">(v) </span><span style=\"color:#f92672;\">=&gt; </span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">            p {{ </span><span style=\"color:#ffee99;\">&quot;{{v}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }},\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">_ =&gt; </span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">            p {{ </span><span style=\"color:#ffee99;\">&quot;hello&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }},\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "eval.rs".to_string(),
        }
        h2 { id: "custom-assets",
            Link {
                to: BookRoute::GuidesDesktopIndex {
                    section: GuidesDesktopIndexSection::CustomAssets,
                },
                class: "header",
                "Custom Assets"
            }
        }
        p { "You can link to local assets in dioxus desktop instead of using a url:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">main</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">launch</span><span style=\"color:#f8f8f2;\">(app);\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">app</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{\n</span><span style=\"color:#f8f8f2;\">            img {{ src: asset!(</span><span style=\"color:#ffee99;\">&quot;/assets/static/scanner.png&quot;</span><span style=\"color:#f8f8f2;\">) }} \n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "custom_assets.rs".to_string(),
        }
        p {
            "You can read more about assets in the "
            Link {
                to: BookRoute::GuidesAssets {
                    section: GuidesAssetsSection::Empty,
                },
                "assets"
            }
            " reference."
        }
        h2 { id: "integrating-with-wry",
            Link {
                to: BookRoute::GuidesDesktopIndex {
                    section: GuidesDesktopIndexSection::IntegratingWithWry,
                },
                class: "header",
                "Integrating with Wry"
            }
        }
        p {
            "In cases where you need more low level control over your window, you can use wry APIs exposed through the "
            Link { to: "https://docs.rs/dioxus-desktop/0.6.0/dioxus_desktop/struct.Config.html",
                "Desktop Config"
            }
            " and the "
            Link { to: "https://docs.rs/dioxus-desktop/0.6.0/dioxus_desktop/fn.use_window.html",
                "use_window hook"
            }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuidesMobileIndexSection {
    #[default]
    Empty,
    MobileApp,
    Support,
    GettingSetUp,
    Android,
    Ios,
    RunningYourApp,
}
impl std::str::FromStr for GuidesMobileIndexSection {
    type Err = GuidesMobileIndexSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "mobile-app" => Ok(Self::MobileApp),
            "support" => Ok(Self::Support),
            "getting-set-up" => Ok(Self::GettingSetUp),
            "android" => Ok(Self::Android),
            "ios" => Ok(Self::Ios),
            "running-your-app" => Ok(Self::RunningYourApp),
            _ => Err(GuidesMobileIndexSectionParseError),
        }
    }
}
impl std::fmt::Display for GuidesMobileIndexSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::MobileApp => f.write_str("mobile-app"),
            Self::Support => f.write_str("support"),
            Self::GettingSetUp => f.write_str("getting-set-up"),
            Self::Android => f.write_str("android"),
            Self::Ios => f.write_str("ios"),
            Self::RunningYourApp => f.write_str("running-your-app"),
        }
    }
}
#[derive(Debug)]
pub struct GuidesMobileIndexSectionParseError;
impl std::fmt::Display for GuidesMobileIndexSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuidesMobileIndexSectionmobile-app, support, getting-set-up, android, ios, running-your-app",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuidesMobileIndexSectionParseError {}
#[component(no_case_check)]
pub fn GuidesMobileIndex(section: GuidesMobileIndexSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "mobile-app",
            Link {
                to: BookRoute::GuidesMobileIndex {
                    section: GuidesMobileIndexSection::MobileApp,
                },
                class: "header",
                "Mobile App"
            }
        }
        p { "Build a mobile app with Dioxus!" }
        h2 { id: "support",
            Link {
                to: BookRoute::GuidesMobileIndex {
                    section: GuidesMobileIndexSection::Support,
                },
                class: "header",
                "Support"
            }
        }
        p {
            "The Rust ecosystem for mobile continues to mature, with Dioxus offering strong support for mobile applications. Mobile is a first-class target for Dioxus apps, with a robust WebView implementation that supports CSS animations and transparency effects."
        }
        p {
            "Mobile apps are rendered with either the platform's WebView or experimentally with WGPU. While native Android animations and widgets aren't currently supported, CSS-based animations and styling provide a powerful alternative."
        }
        p {
            "Mobile support is well-suited for most application types, from business tools to consumer apps, making it an excellent choice for teams looking to build cross-platform applications with a single codebase."
        }
        h2 { id: "getting-set-up",
            Link {
                to: BookRoute::GuidesMobileIndex {
                    section: GuidesMobileIndexSection::GettingSetUp,
                },
                class: "header",
                "Getting Set up"
            }
        }
        h2 { id: "android",
            Link {
                to: BookRoute::GuidesMobileIndex {
                    section: GuidesMobileIndexSection::Android,
                },
                class: "header",
                "Android"
            }
        }
        p {
            "Android devices run a different executable architecture than desktop and web. We need to install these toolchains to build Dioxus apps for Android."
        }
        p { "First, install the Rust Android targets:" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rustup target add aarch64</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">linux</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">android armv7</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">linux</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">androideabi i686</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">linux</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">android x86_64</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">linux</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">android</span></pre>\n" }
        p {
            "To develop on Android, you will need to "
            Link { to: "https://developer.android.com/studio", "install Android Studio" }
            "."
        }
        p { "Once you have installed Android Studio, you will need to install the Android SDK and NDK:" }
        ol {
            li { "Create a blank Android project" }
            li {
                "Select "
                code { "Tools > SDK manager" }
            }
            li {
                "Navigate to the "
                code { "SDK tools" }
                " window:"
            }
        }
        p {
            img {
                src: asset!(
                    "/assets/static/android_ndk_install.png", ImageAssetOptions::new().with_avif()
                ),
                alt: "NDK install window",
                title: "",
            }
        }
        p { "Then select:" }
        ul {
            li { "The SDK" }
            li { "The SDK Command line tools" }
            li { "The NDK (side by side)" }
            li { "CMAKE" }
        }
        ol {
            li {
                "Select "
                code { "apply" }
                " and follow the prompts"
            }
        }
        blockquote {
            p {
                "More details that could be useful for debugging any errors you encounter are available "
                Link { to: "https://developer.android.com/studio/intro/update#sdk-manager",
                    "in the official android docs"
                }
            }
        }
        p { "Next set the Java, Android, NDK, and PATH variables:" }
        p { "Mac:" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">export </span><span style=\"color:#ff80f4;\">JAVA_HOME</span><span style=\"color:#f92672;\">=</span><span style=\"color:#ffee99;\">&quot;/Applications/Android Studio.app/Contents/jbr/Contents/Home&quot;\n</span><span style=\"color:#f8f8f2;\">export </span><span style=\"color:#ff80f4;\">ANDROID_HOME</span><span style=\"color:#f92672;\">=</span><span style=\"color:#ffee99;\">&quot;$HOME/Library/Android/sdk&quot;\n</span><span style=\"color:#f8f8f2;\">export </span><span style=\"color:#ff80f4;\">NDK_HOME</span><span style=\"color:#f92672;\">=</span><span style=\"color:#ffee99;\">&quot;$ANDROID_HOME/ndk/25.2.9519653&quot;\n</span><span style=\"color:#f8f8f2;\">export </span><span style=\"color:#ff80f4;\">PATH</span><span style=\"color:#f92672;\">=</span><span style=\"color:#ffee99;\">&quot;$PATH:$ANDROID_HOME/emulator&quot;</span></pre>\n" }
        p { "Windows:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[System.Environment]::SetEnvironmentVariable(</span><span style=\"color:#ffee99;\">&quot;JAVA_HOME&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;C:\\Program Files\\Android\\Android Studio\\jbr&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;User&quot;</span><span style=\"color:#f8f8f2;\">)\n</span><span style=\"color:#f8f8f2;\">[System.Environment]::SetEnvironmentVariable(</span><span style=\"color:#ffee99;\">&quot;ANDROID_HOME&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;$env:LocalAppData\\Android\\Sdk&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;User&quot;</span><span style=\"color:#f8f8f2;\">)\n</span><span style=\"color:#f8f8f2;\">[System.Environment]::SetEnvironmentVariable(</span><span style=\"color:#ffee99;\">&quot;NDK_HOME&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;$env:LocalAppData\\Android\\Sdk</span><span style=\"color:#ff80f4;\">\\n</span><span style=\"color:#ffee99;\">dk\\25.2.9519653&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;User&quot;</span><span style=\"color:#f8f8f2;\">)</span></pre>\n",
        }
        blockquote {
            p { "The NDK version in the paths should match the version you installed in the last step" }
        }
        p {
            "We manually set the PATH variable to include the Android emulator since some distributions of Android Studio include the emulator in the wrong location."
        }
        h2 { id: "ios",
            Link {
                to: BookRoute::GuidesMobileIndex {
                    section: GuidesMobileIndexSection::Ios,
                },
                class: "header",
                "IOS"
            }
        }
        p {
            "To develop on IOS, you will need to "
            Link { to: "https://apps.apple.com/us/app/xcode/id497799835", "install XCode" }
            ". Also make sure to install the iOS targets"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rustup target add aarch64</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">apple</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">ios aarch64</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">apple</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">ios</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">sim</span></pre>\n" }
        blockquote {
            p {
                "If you are using M1, you will have to run  "
                code { "cargo build --target x86_64-apple-ios" }
                " instead of  "
                code { "cargo apple build" }
                " if you want to run in simulator."
            }
        }
        p { "You will also need to install the iOS SDK and the Xcode command line tools." }
        h2 { id: "running-your-app",
            Link {
                to: BookRoute::GuidesMobileIndex {
                    section: GuidesMobileIndexSection::RunningYourApp,
                },
                class: "header",
                "Running your app"
            }
        }
        p {
            "Starting with Dioxus 0.6,  "
            code { "dx" }
            " ships with built-in support for mobile."
        }
        p { "Simply create a new Dioxus project:" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">dx new my</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">app</span></pre>\n" }
        p {
            "Make sure to launch the relevant mobile simulator. For Android, you can use the Android Studio emulator, or the Android Emulator in the terminal. Make sure to adjust the device name depending on which emulator you installed."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">emulator </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">avd Pixel_6_API_34  </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">netdelay none </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">netspeed full</span></pre>\n" }
        p { "For iOS, you can use the iOS simulator. You can launch it with:" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">open </span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">Applications</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">Xcode.app</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">Contents</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">Developer</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">Applications</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">Simulator.app\n</span><span style=\"color:#f8f8f2;\">xcrun simctl boot </span><span style=\"color:#ffee99;\">&quot;iPhone 15 Pro Max&quot;</span></pre>\n" }
        p { "And then run the app with:" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">cd my</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">app\n</span><span style=\"color:#f8f8f2;\">dx serve</span></pre>\n" }
        p { "This will start the app in development mode." }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuidesMobileApisSection {
    #[default]
    Empty,
    Mobile,
    RunningJavascript,
    CustomAssets,
    IntegratingWithWry,
}
impl std::str::FromStr for GuidesMobileApisSection {
    type Err = GuidesMobileApisSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "mobile" => Ok(Self::Mobile),
            "running-javascript" => Ok(Self::RunningJavascript),
            "custom-assets" => Ok(Self::CustomAssets),
            "integrating-with-wry" => Ok(Self::IntegratingWithWry),
            _ => Err(GuidesMobileApisSectionParseError),
        }
    }
}
impl std::fmt::Display for GuidesMobileApisSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Mobile => f.write_str("mobile"),
            Self::RunningJavascript => f.write_str("running-javascript"),
            Self::CustomAssets => f.write_str("custom-assets"),
            Self::IntegratingWithWry => f.write_str("integrating-with-wry"),
        }
    }
}
#[derive(Debug)]
pub struct GuidesMobileApisSectionParseError;
impl std::fmt::Display for GuidesMobileApisSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuidesMobileApisSectionmobile, running-javascript, custom-assets, integrating-with-wry",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuidesMobileApisSectionParseError {}
#[component(no_case_check)]
pub fn GuidesMobileApis(section: GuidesMobileApisSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "mobile",
            Link {
                to: BookRoute::GuidesMobileApis {
                    section: GuidesMobileApisSection::Mobile,
                },
                class: "header",
                "Mobile"
            }
        }
        p { "This guide will cover concepts specific to the Dioxus mobile renderer." }
        h2 { id: "running-javascript",
            Link {
                to: BookRoute::GuidesMobileApis {
                    section: GuidesMobileApisSection::RunningJavascript,
                },
                class: "header",
                "Running Javascript"
            }
        }
        p {
            "Dioxus provides some ergonomic wrappers over the browser API, but in some cases you may need to access parts of the browser API Dioxus does not expose."
        }
        p {
            "For these cases, Dioxus desktop exposes the use_eval hook that allows you to run raw Javascript in the webview:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">main</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">launch</span><span style=\"color:#f8f8f2;\">(app);\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">app</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> future </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_resource</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">move ||</span><span style=\"color:#f8f8f2;\"> async </span><span style=\"color:#f92672;\">move </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// You can create as many eval instances as you want\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> eval </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">document::eval(\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"font-style:italic;color:#66d9ef;\">r</span><span style=\"color:#ffee99;\">#&quot;\n</span><span style=\"color:#ffee99;\">            // You can send messages from JavaScript to Rust with the dioxus.send function\n</span><span style=\"color:#ffee99;\">            dioxus.send(&quot;Hi from JS!&quot;);\n</span><span style=\"color:#ffee99;\">            // You can receive messages from Rust to JavaScript with the dioxus.recv function\n</span><span style=\"color:#ffee99;\">            let msg = await dioxus.recv();\n</span><span style=\"color:#ffee99;\">            console.log(msg);\n</span><span style=\"color:#ffee99;\">            &quot;#</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">        );\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// You can send messages to JavaScript with the send method\n</span><span style=\"color:#f8f8f2;\">        eval.</span><span style=\"color:#66d9ef;\">send</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;Hi from Rust!&quot;</span><span style=\"color:#f8f8f2;\">).</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// You can receive any message from JavaScript with the recv method\n</span><span style=\"color:#f8f8f2;\">        eval.recv::&lt;String&gt;().await.</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">    }});\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">match</span><span style=\"color:#f8f8f2;\"> future.</span><span style=\"color:#66d9ef;\">read_unchecked</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#66d9ef;\">as_ref</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">Some</span><span style=\"color:#f8f8f2;\">(v) </span><span style=\"color:#f92672;\">=&gt; </span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">            p {{ </span><span style=\"color:#ffee99;\">&quot;{{v}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }},\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">_ =&gt; </span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">            p {{ </span><span style=\"color:#ffee99;\">&quot;hello&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }},\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "eval.rs".to_string(),
        }
        h2 { id: "custom-assets",
            Link {
                to: BookRoute::GuidesMobileApis {
                    section: GuidesMobileApisSection::CustomAssets,
                },
                class: "header",
                "Custom Assets"
            }
        }
        p { "You can link to local assets in dioxus mobile instead of using a url:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">main</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">launch</span><span style=\"color:#f8f8f2;\">(app);\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">app</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{\n</span><span style=\"color:#f8f8f2;\">            img {{ src: asset!(</span><span style=\"color:#ffee99;\">&quot;/assets/static/scanner.png&quot;</span><span style=\"color:#f8f8f2;\">) }} \n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "custom_assets.rs".to_string(),
        }
        h2 { id: "integrating-with-wry",
            Link {
                to: BookRoute::GuidesMobileApis {
                    section: GuidesMobileApisSection::IntegratingWithWry,
                },
                class: "header",
                "Integrating with Wry"
            }
        }
        p {
            "In cases where you need more low level control over your window, you can use wry APIs exposed through the "
            Link { to: "https://docs.rs/dioxus-desktop/0.6.0/dioxus_desktop/type.DesktopContext.html",
                "Desktop Config"
            }
            " and the "
            Link { to: "https://docs.rs/dioxus-desktop/0.6.0/dioxus_desktop/fn.use_window.html",
                "use_window hook"
            }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuidesSsrSection {
    #[default]
    Empty,
    ServerSideRendering,
    Setup,
    MultithreadedSupport,
}
impl std::str::FromStr for GuidesSsrSection {
    type Err = GuidesSsrSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "server-side-rendering" => Ok(Self::ServerSideRendering),
            "setup" => Ok(Self::Setup),
            "multithreaded-support" => Ok(Self::MultithreadedSupport),
            _ => Err(GuidesSsrSectionParseError),
        }
    }
}
impl std::fmt::Display for GuidesSsrSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::ServerSideRendering => f.write_str("server-side-rendering"),
            Self::Setup => f.write_str("setup"),
            Self::MultithreadedSupport => f.write_str("multithreaded-support"),
        }
    }
}
#[derive(Debug)]
pub struct GuidesSsrSectionParseError;
impl std::fmt::Display for GuidesSsrSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuidesSsrSectionserver-side-rendering, setup, multithreaded-support",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuidesSsrSectionParseError {}
#[component(no_case_check)]
pub fn GuidesSsr(section: GuidesSsrSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "server-side-rendering",
            Link {
                to: BookRoute::GuidesSsr {
                    section: GuidesSsrSection::ServerSideRendering,
                },
                class: "header",
                "Server-Side Rendering"
            }
        }
        p {
            "For lower-level control over the rendering process, you can use the  "
            code { "dioxus-ssr" }
            " crate directly. This can be useful when integrating with a web framework that  "
            code { "dioxus-fullstack" }
            " does not support, or pre-rendering pages."
        }
        h2 { id: "setup",
            Link {
                to: BookRoute::GuidesSsr {
                    section: GuidesSsrSection::Setup,
                },
                class: "header",
                "Setup"
            }
        }
        p {
            "For this guide, we're going to show how to use Dioxus SSR with "
            Link { to: "https://docs.rs/axum/latest/axum/", "Axum" }
            "."
        }
        p { "Make sure you have Rust and Cargo installed, and then create a new project:" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">cargo new </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">bin demo\n</span><span style=\"color:#f8f8f2;\">cd demo</span></pre>\n" }
        p { "Add Dioxus and the ssr renderer as dependencies:" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">cargo add dioxus\n</span><span style=\"color:#f8f8f2;\">cargo add dioxus</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">ssr</span></pre>\n" }
        p {
            "Next, add all the Axum dependencies. This will be different if you're using a different Web Framework"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">cargo add tokio </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">features full\n</span><span style=\"color:#f8f8f2;\">cargo add axum</span></pre>\n" }
        p { "Your dependencies should look roughly like this:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[dependencies]\n</span><span style=\"color:#f8f8f2;\">axum </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;0.7&quot;\n</span><span style=\"color:#f8f8f2;\">dioxus </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">{{ version </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;*&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">dioxus</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">ssr </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">{{ version </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;*&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">tokio </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">{{ version </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;1.15.0&quot;</span><span style=\"color:#f8f8f2;\">, features </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;full&quot;</span><span style=\"color:#f8f8f2;\">] }}</span></pre>\n",
        }
        p { "Now, set up your Axum app to respond on an endpoint." }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">axum::{{response::Html, routing::get, Router}};\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[tokio::main]\n</span><span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">main</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> listener </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">tokio::net::TcpListener::bind(</span><span style=\"color:#ffee99;\">&quot;127.0.0.1:3000&quot;</span><span style=\"color:#f8f8f2;\">)\n</span><span style=\"color:#f8f8f2;\">        .await\n</span><span style=\"color:#f8f8f2;\">        .</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    println!(</span><span style=\"color:#ffee99;\">&quot;listening on http://127.0.0.1:3000&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    axum::serve(\n</span><span style=\"color:#f8f8f2;\">        listener,\n</span><span style=\"color:#f8f8f2;\">        Router::new()\n</span><span style=\"color:#f8f8f2;\">            .</span><span style=\"color:#66d9ef;\">route</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;/&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#66d9ef;\">get</span><span style=\"color:#f8f8f2;\">(app_endpoint))\n</span><span style=\"color:#f8f8f2;\">            .</span><span style=\"color:#66d9ef;\">into_make_service</span><span style=\"color:#f8f8f2;\">(),\n</span><span style=\"color:#f8f8f2;\">    )\n</span><span style=\"color:#f8f8f2;\">    .await\n</span><span style=\"color:#f8f8f2;\">    .</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "ssr.rs".to_string(),
        }
        p {
            "And then add our endpoint. We can either render  "
            code { "rsx!" }
            " directly:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">app_endpoint</span><span style=\"color:#f8f8f2;\">() -&gt; Html&lt;String&gt; {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// render the rsx! macro to HTML\n</span><span style=\"color:#f8f8f2;\">    Html(dioxus_ssr::render_element(rsx! {{ div {{ </span><span style=\"color:#ffee99;\">&quot;hello world!&quot; </span><span style=\"color:#f8f8f2;\">}} }}))\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "ssr.rs".to_string(),
        }
        p { "Or we can render VirtualDoms." }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">app_endpoint</span><span style=\"color:#f8f8f2;\">() -&gt; Html&lt;String&gt; {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// create a component that renders a div with the text &quot;hello world&quot;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">app</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">        rsx! {{ div {{ </span><span style=\"color:#ffee99;\">&quot;hello world&quot; </span><span style=\"color:#f8f8f2;\">}} }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// create a VirtualDom with the app component\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> app </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">VirtualDom::new(app);\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// rebuild the VirtualDom before rendering\n</span><span style=\"color:#f8f8f2;\">    app.</span><span style=\"color:#66d9ef;\">rebuild_in_place</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// render the VirtualDom to HTML\n</span><span style=\"color:#f8f8f2;\">    Html(dioxus_ssr::render(</span><span style=\"color:#f92672;\">&amp;</span><span style=\"color:#f8f8f2;\">app))\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "ssr.rs".to_string(),
        }
        p {
            "Finally, you can run it using  "
            code { "cargo run" }
            " rather than  "
            code { "dx serve" }
            "."
        }
        h2 { id: "multithreaded-support",
            Link {
                to: BookRoute::GuidesSsr {
                    section: GuidesSsrSection::MultithreadedSupport,
                },
                class: "header",
                "Multithreaded Support"
            }
        }
        p {
            "The Dioxus VirtualDom, sadly, is not currently  "
            code { "Send" }
            ". Internally, we use quite a bit of interior mutability which is not thread-safe."
            " "
            "When working with web frameworks that require  "
            code { "Send" }
            ", it is possible to render a VirtualDom immediately to a String – but you cannot hold the VirtualDom across an await point. For retained-state SSR (essentially LiveView), you'll need to spawn a VirtualDom on its own thread and communicate with it via channels or create a pool of VirtualDoms."
            " "
            "You might notice that you cannot hold the VirtualDom across an await point. Because Dioxus is currently not ThreadSafe, it "
            em { "must" }
            " remain on the thread it started. We are working on loosening this requirement."
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuidesFullstackIndexSection {
    #[default]
    Empty,
    FullstackDevelopment,
}
impl std::str::FromStr for GuidesFullstackIndexSection {
    type Err = GuidesFullstackIndexSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "fullstack-development" => Ok(Self::FullstackDevelopment),
            _ => Err(GuidesFullstackIndexSectionParseError),
        }
    }
}
impl std::fmt::Display for GuidesFullstackIndexSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::FullstackDevelopment => f.write_str("fullstack-development"),
        }
    }
}
#[derive(Debug)]
pub struct GuidesFullstackIndexSectionParseError;
impl std::fmt::Display for GuidesFullstackIndexSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuidesFullstackIndexSectionfullstack-development",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuidesFullstackIndexSectionParseError {}
#[component(no_case_check)]
pub fn GuidesFullstackIndex(section: GuidesFullstackIndexSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "fullstack-development",
            Link {
                to: BookRoute::GuidesFullstackIndex {
                    section: GuidesFullstackIndexSection::FullstackDevelopment,
                },
                class: "header",
                "Fullstack development"
            }
        }
        p { "Dioxus Fullstack contains helpers for:" }
        ul {
            li { "Incremental, static, and server side rendering" }
            li { "Hydrating your application on the Client" }
            li { "Communicating between a server and a client" }
        }
        p {
            "This guide will teach you everything you need to know about how to use the utilities in Dioxus fullstack to create amazing fullstack applications."
        }
        blockquote {
            p {
                "In addition to this guide, you can find more examples of full-stack apps and information about how to integrate with other frameworks and desktop renderers in the "
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/fullstack/examples",
                    "dioxus-fullstack examples directory"
                }
                "."
            }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuidesFullstackManagingDependenciesSection {
    #[default]
    Empty,
    ManagingFullstackDependencies,
    ClientAndServerFeatureFlags,
    AddingServerOnlyDependencies,
    AddingClientOnlyDependencies,
    ManagingBinarySpecificImports,
}
impl std::str::FromStr for GuidesFullstackManagingDependenciesSection {
    type Err = GuidesFullstackManagingDependenciesSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "managing-fullstack-dependencies" => Ok(Self::ManagingFullstackDependencies),
            "client-and-server-feature-flags" => Ok(Self::ClientAndServerFeatureFlags),
            "adding-server-only-dependencies" => Ok(Self::AddingServerOnlyDependencies),
            "adding-client-only-dependencies" => Ok(Self::AddingClientOnlyDependencies),
            "managing-binary-specific-imports" => Ok(Self::ManagingBinarySpecificImports),
            _ => Err(GuidesFullstackManagingDependenciesSectionParseError),
        }
    }
}
impl std::fmt::Display for GuidesFullstackManagingDependenciesSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::ManagingFullstackDependencies => f.write_str("managing-fullstack-dependencies"),
            Self::ClientAndServerFeatureFlags => f.write_str("client-and-server-feature-flags"),
            Self::AddingServerOnlyDependencies => f.write_str("adding-server-only-dependencies"),
            Self::AddingClientOnlyDependencies => f.write_str("adding-client-only-dependencies"),
            Self::ManagingBinarySpecificImports => f.write_str("managing-binary-specific-imports"),
        }
    }
}
#[derive(Debug)]
pub struct GuidesFullstackManagingDependenciesSectionParseError;
impl std::fmt::Display for GuidesFullstackManagingDependenciesSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuidesFullstackManagingDependenciesSectionmanaging-fullstack-dependencies, client-and-server-feature-flags, adding-server-only-dependencies, adding-client-only-dependencies, managing-binary-specific-imports",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuidesFullstackManagingDependenciesSectionParseError {}
#[component(no_case_check)]
pub fn GuidesFullstackManagingDependencies(
    section: GuidesFullstackManagingDependenciesSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "managing-fullstack-dependencies",
            Link {
                to: BookRoute::GuidesFullstackManagingDependencies {
                    section: GuidesFullstackManagingDependenciesSection::ManagingFullstackDependencies,
                },
                class: "header",
                "Managing Fullstack Dependencies"
            }
        }
        p { "Fullstack applications build to at least two different binaries:" }
        ul {
            li { "The client application that runs the desktop, mobile, or web application" }
            li { "The server that renders the initial HTML and runs server functions" }
        }
        p {
            "Those binaries tend to have different dependencies and those dependencies often are only compatible with a specific target platform. This guide will cover how fullstack manages each binary's dependencies and how to add dependencies that are only compatible with one binary/target."
        }
        h2 { id: "client-and-server-feature-flags",
            Link {
                to: BookRoute::GuidesFullstackManagingDependencies {
                    section: GuidesFullstackManagingDependenciesSection::ClientAndServerFeatureFlags,
                },
                class: "header",
                "Client and Server Feature Flags"
            }
        }
        p {
            "Dioxus uses feature flags to differentiate between the different binaries a single library can produce. Each target binary should have a feature flag in your  "
            code { "Cargo.toml" }
            " file that enables the corresponding feature in dioxus. For example, if you are targeting  "
            code { "web" }
            " and  "
            code { "desktop" }
            " with a fullstack server, you would add the following to your  "
            code { "Cargo.toml" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[dependencies]\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> Don</span><span style=\"color:#f92672;\">&#39;t</span><span style=\"color:#f8f8f2;\"> include any renderer features </span><span style=\"color:#f92672;\">in</span><span style=\"color:#f8f8f2;\"> your dioxus dependency directly. They will be added </span><span style=\"color:#f92672;\">in</span><span style=\"color:#f8f8f2;\"> feature flags.\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> The fullstack feature enables the bindings between the server and client without enabling a specific binary target.\n</span><span style=\"color:#f8f8f2;\">dioxus </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">{{ version </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;0.6&quot;</span><span style=\"color:#f8f8f2;\">, features </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;fullstack&quot;</span><span style=\"color:#f8f8f2;\">] }}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">[features]\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> The web feature enables the web renderer. Dioxus will automatically enable the feature you define that activates `dioxus</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">web` when building the client </span><span style=\"color:#ff80f4;\">WASM</span><span style=\"color:#f8f8f2;\"> bundle.\n</span><span style=\"color:#f8f8f2;\">web </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;dioxus/web&quot;</span><span style=\"color:#f8f8f2;\">]\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> The desktop feature enables the desktop renderer. Dioxus will automatically enable the feature you define that activates `dioxus</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">desktop` when building the client native bundle.\n</span><span style=\"color:#f8f8f2;\">desktop </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;dioxus/desktop&quot;</span><span style=\"color:#f8f8f2;\">]\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> The server feature enables server functions and server</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">side rendering. Dioxus will automatically enable the feature you define that activates `dioxus</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">server` when building the server binary.\n</span><span style=\"color:#f8f8f2;\">server </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;dioxus/server&quot;</span><span style=\"color:#f8f8f2;\">]</span></pre>\n",
        }
        p {
            "Feature flags like these for the client and server are automatically generated by the CLI when you run  "
            code { "dx new" }
            " with fullstack enabled. If you are creating a project from scratch, you will need to add the feature flags manually."
        }
        blockquote {
            p {
                "If you are not familiar with features in rust, you can read more about feature flags in the "
                Link { to: "https://doc.rust-lang.org/cargo/reference/features.html",
                    "cargo reference"
                }
                "."
            }
        }
        h2 { id: "adding-server-only-dependencies",
            Link {
                to: BookRoute::GuidesFullstackManagingDependencies {
                    section: GuidesFullstackManagingDependenciesSection::AddingServerOnlyDependencies,
                },
                class: "header",
                "Adding Server Only Dependencies"
            }
        }
        p {
            "Many dependencies like "
            Link { to: "https://docs.rs/tokio/latest/tokio/index.html",
                code { "tokio" }
            }
            " and "
            Link { to: "https://docs.rs/axum/latest/axum/index.html",
                code { "axum" }
            }
            " are only compatible with the server. If these dependencies are enabled when building a WASM bundle for the browser client, you will get a compilation error. For example, if we want to interact with the filesystem in a server function, we might want to add "
            code { "tokio" }
            ". "
            code { "tokio" }
            " has utilities for working with async IO like "
            Link { to: "https://docs.rs/tokio/latest/tokio/fs/struct.File.html",
                code { "tokio::fs::File" }
            }
            ". Let's try it as a dependency to our fullstack project:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[dependencies]\n</span><span style=\"color:#f92672;\"># ...\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> ❌ If tokio is added </span><span style=\"color:#f92672;\">as</span><span style=\"color:#f8f8f2;\"> a required dependency, it will be included </span><span style=\"color:#f92672;\">in</span><span style=\"color:#f8f8f2;\"> both the server\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> and the web bundle. The web bundle will fail to build because tokio is not\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> compatible with wasm\n</span><span style=\"color:#f8f8f2;\">tokio </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">{{ version </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;1&quot;</span><span style=\"color:#f8f8f2;\">, features </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;full&quot;</span><span style=\"color:#f8f8f2;\">] }}</span></pre>\n",
        }
        p {
            "If we try to compile with tokio as a required dependency, we will get a compilation error like this:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">error[</span><span style=\"color:#ff80f4;\">E0432</span><span style=\"color:#f8f8f2;\">]: unresolved import `</span><span style=\"color:#f92672;\">crate</span><span style=\"color:#f8f8f2;\">::sys::IoSourceState`\n</span><span style=\"color:#f8f8f2;\">  </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">-&gt; </span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">Users</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">user</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">.cargo</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">registry</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">src</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">index.crates.io</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">6f17d22bba15001f</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">mio</span><span style=\"color:#f92672;\">-</span><span style=\"color:#ff80f4;\">1.0</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#ff80f4;\">2</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">src   </span><span style=\"color:#f92672;\">|</span><span style=\"color:#f8f8f2;\">source.rs:</span><span style=\"color:#ff80f4;\">14</span><span style=\"color:#f8f8f2;\">:</span><span style=\"color:#ff80f4;\">5\n</span><span style=\"color:#ff80f4;\">14 </span><span style=\"color:#f92672;\">| use crate</span><span style=\"color:#f8f8f2;\">::sys::IoSourceState;\n</span><span style=\"color:#f8f8f2;\">   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ no `IoSourceState` in `sys`\n</span><span style=\"color:#f92672;\">...</span></pre>\n",
        }
        p {
            "Since we added  "
            code { "tokio" }
            " as a dependency for all three binaries, cargo tries to compile it for each target. This fails because  "
            code { "tokio" }
            " is not compatible with the  "
            code { "wasm32-unknown-unknown" }
            " target."
        }
        p {
            "To fix the issue, we can "
            strong { "make the dependency optional and only enable it in the server feature" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[dependencies]\n</span><span style=\"color:#f92672;\"># ...\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> ✅ Since the tokio dependency is optional, it is not included </span><span style=\"color:#f92672;\">in</span><span style=\"color:#f8f8f2;\"> the web and desktop\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> bundles.\n</span><span style=\"color:#f8f8f2;\">tokio </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">{{ version </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;1&quot;</span><span style=\"color:#f8f8f2;\">, features </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;full&quot;</span><span style=\"color:#f8f8f2;\">], optional </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">true </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">[features]\n</span><span style=\"color:#f92672;\"># ...\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> ✅ Since the tokio dependency is enabled </span><span style=\"color:#f92672;\">in</span><span style=\"color:#f8f8f2;\"> the server feature, it is included </span><span style=\"color:#f92672;\">in\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> the server binary.\n</span><span style=\"color:#f8f8f2;\">server </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;dioxus/server&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;dep:tokio&quot;</span><span style=\"color:#f8f8f2;\">]</span></pre>\n",
        }
        p {
            "Now when we build with  "
            code { "dx serve" }
            ", the project compiles successfully."
        }
        h2 { id: "adding-client-only-dependencies",
            Link {
                to: BookRoute::GuidesFullstackManagingDependencies {
                    section: GuidesFullstackManagingDependenciesSection::AddingClientOnlyDependencies,
                },
                class: "header",
                "Adding Client Only Dependencies"
            }
        }
        p {
            "Many dependencies like "
            Link { to: "https://docs.rs/wasm-bindgen/latest/wasm_bindgen/index.html",
                code { "wasm-bindgen" }
            }
            " and "
            Link { to: "https://docs.rs/web-sys/latest/web_sys/index.html",
                code { "web-sys" }
            }
            " are only compatible with the client. Unlike server-only dependencies, these dependencies can generally compile on native targets, but they will panic when used outside of the browser."
        }
        p {
            "You can cut down on build times for your server and native binaries by only including web dependencies in the browser client binary."
        }
        p { "Instead of adding web only dependencies every binary in your project like this:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[dependencies]\n</span><span style=\"color:#f92672;\"># ...\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> ❌ If web</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">sys is added </span><span style=\"color:#f92672;\">as</span><span style=\"color:#f8f8f2;\"> a required dependency, it will be included </span><span style=\"color:#f92672;\">in</span><span style=\"color:#f8f8f2;\"> the server,\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> native, and the web bundle which makes build times longer.\n</span><span style=\"color:#f8f8f2;\">web</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">sys </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">{{ version </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;0.3.60&quot;</span><span style=\"color:#f8f8f2;\">, features </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;console&quot;</span><span style=\"color:#f8f8f2;\">] }}</span></pre>\n",
        }
        p {
            "You can make the dependency optional and only enable it in the  "
            code { "web" }
            " feature in your  "
            code { "Cargo.toml" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[dependencies]\n</span><span style=\"color:#f92672;\"># ...\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> ✅ Since the web</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">sys dependency is optional, it is not included </span><span style=\"color:#f92672;\">in</span><span style=\"color:#f8f8f2;\"> the server and\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> native bundles.\n</span><span style=\"color:#f8f8f2;\">web</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">sys </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">{{ version </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;0.3.60&quot;</span><span style=\"color:#f8f8f2;\">, features </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;console&quot;</span><span style=\"color:#f8f8f2;\">], optional </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">true </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">[features]\n</span><span style=\"color:#f92672;\"># ...\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> ✅ Since the web</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">sys dependency is enabled </span><span style=\"color:#f92672;\">in</span><span style=\"color:#f8f8f2;\"> the web feature, it is included </span><span style=\"color:#f92672;\">in\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> the web bundle.\n</span><span style=\"color:#f8f8f2;\">web </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;dioxus/web&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;dep:web-sys&quot;</span><span style=\"color:#f8f8f2;\">]</span></pre>\n",
        }
        h2 { id: "managing-binary-specific-imports",
            Link {
                to: BookRoute::GuidesFullstackManagingDependencies {
                    section: GuidesFullstackManagingDependenciesSection::ManagingBinarySpecificImports,
                },
                class: "header",
                "Managing Binary Specific Imports"
            }
        }
        p {
            "Once you have set up binary specific dependencies, you need to adjust any of your imports to only import the dependencies when building for the binary that includes those dependencies."
        }
        p {
            "For example, if  "
            code { "tokio" }
            " is only enabled in the server feature, you will need to import it like this:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// Since the tokio dependency is only enabled in the server feature,\n</span><span style=\"color:#8c8c8c;\">// we need to only import it when the server feature is enabled.\n</span><span style=\"color:#f8f8f2;\">#[cfg(feature </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;server&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">tokio::fs::File;\n</span><span style=\"color:#f8f8f2;\">#[cfg(feature </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;server&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">tokio::io::AsyncReadExt;</span></pre>\n",
            name: "server_tokio_import.rs".to_string(),
        }
        p { "You also need to only compile any usage of the dependency when the feature is enabled:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// Since the tokio dependency is only enabled in the server feature,\n</span><span style=\"color:#8c8c8c;\">// we need to only compile any usage of the dependency when the server feature is enabled.\n</span><span style=\"color:#f8f8f2;\">#[cfg(feature </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;server&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">read_file</span><span style=\"color:#f8f8f2;\">() -&gt; Result&lt;String, std::io::Error&gt; {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> file </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">File::open(</span><span style=\"color:#ffee99;\">&quot;path/to/file&quot;</span><span style=\"color:#f8f8f2;\">).await</span><span style=\"color:#f92672;\">?</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> contents </span><span style=\"color:#f92672;\">= </span><span style=\"font-style:italic;color:#66d9ef;\">String</span><span style=\"color:#f8f8f2;\">::new();\n</span><span style=\"color:#f8f8f2;\">    file.</span><span style=\"color:#66d9ef;\">read_to_string</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">&amp;mut</span><span style=\"color:#f8f8f2;\"> contents).await</span><span style=\"color:#f92672;\">?</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">Ok</span><span style=\"color:#f8f8f2;\">(contents)\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// The bodies of server functions automatically only compile when the server feature is enabled.\n</span><span style=\"color:#f8f8f2;\">#[server]\n</span><span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">get_file_contents</span><span style=\"color:#f8f8f2;\">() -&gt; Result&lt;String, ServerFnError&gt; {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> file </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">File::open(</span><span style=\"color:#ffee99;\">&quot;path/to/file&quot;</span><span style=\"color:#f8f8f2;\">).await</span><span style=\"color:#f92672;\">?</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> contents </span><span style=\"color:#f92672;\">= </span><span style=\"font-style:italic;color:#66d9ef;\">String</span><span style=\"color:#f8f8f2;\">::new();\n</span><span style=\"color:#f8f8f2;\">    file.</span><span style=\"color:#66d9ef;\">read_to_string</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">&amp;mut</span><span style=\"color:#f8f8f2;\"> contents).await</span><span style=\"color:#f92672;\">?</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">Ok</span><span style=\"color:#f8f8f2;\">(contents)\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "server_tokio_import.rs".to_string(),
        }
        p {
            "It may be more convenient to group server or client specific code into a module that is only compiled when the feature is enabled:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// Instead of configuring each item that is only used in the server, you can group\n</span><span style=\"color:#8c8c8c;\">// them into a module that is only compiled when the server feature is enabled.\n</span><span style=\"color:#f8f8f2;\">#[cfg(feature </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;server&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">mod </span><span style=\"color:#f8f8f2;\">tokio_utilities {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">std::path::PathBuf;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">tokio::fs::File;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">tokio::io::AsyncReadExt;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\"> async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">read_file</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">path</span><span style=\"color:#f8f8f2;\">: PathBuf) -&gt; Result&lt;String, std::io::Error&gt; {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> file </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">File::open(path).await</span><span style=\"color:#f92672;\">?</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> contents </span><span style=\"color:#f92672;\">= </span><span style=\"font-style:italic;color:#66d9ef;\">String</span><span style=\"color:#f8f8f2;\">::new();\n</span><span style=\"color:#f8f8f2;\">        file.</span><span style=\"color:#66d9ef;\">read_to_string</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">&amp;mut</span><span style=\"color:#f8f8f2;\"> contents).await</span><span style=\"color:#f92672;\">?</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">Ok</span><span style=\"color:#f8f8f2;\">(contents)\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// Then you can define your server functions using shared utilities you defined for\n</span><span style=\"color:#8c8c8c;\">// server only code.\n</span><span style=\"color:#f8f8f2;\">#[server]\n</span><span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">get_file_contents</span><span style=\"color:#f8f8f2;\">() -&gt; Result&lt;String, ServerFnError&gt; {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> file </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">tokio_utilities::read_file(PathBuf::from(</span><span style=\"color:#ffee99;\">&quot;path/to/file&quot;</span><span style=\"color:#f8f8f2;\">)).await</span><span style=\"color:#f92672;\">?</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">Ok</span><span style=\"color:#f8f8f2;\">(file)\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[server]\n</span><span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">get_other_file_contents</span><span style=\"color:#f8f8f2;\">() -&gt; Result&lt;String, ServerFnError&gt; {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> file </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">tokio_utilities::read_file(PathBuf::from(</span><span style=\"color:#ffee99;\">&quot;path/to/other/file&quot;</span><span style=\"color:#f8f8f2;\">)).await</span><span style=\"color:#f92672;\">?</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">Ok</span><span style=\"color:#f8f8f2;\">(file)\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "server_tokio_import.rs".to_string(),
        }
        blockquote {
            p {
                "The "
                Link { to: "https://doc.rust-lang.org/reference/conditional-compilation.html",
                    "rust reference"
                }
                " has more information about conditional compilation in rust."
            }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuidesFullstackServerFunctionsSection {
    #[default]
    Empty,
    CommunicatingWithTheServer,
    CachedDataFetching,
    RunningTheClientWithDioxusDesktop,
    ClientCode,
    ServerCode,
}
impl std::str::FromStr for GuidesFullstackServerFunctionsSection {
    type Err = GuidesFullstackServerFunctionsSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "communicating-with-the-server" => Ok(Self::CommunicatingWithTheServer),
            "cached-data-fetching" => Ok(Self::CachedDataFetching),
            "running-the-client-with-dioxus-desktop" => Ok(Self::RunningTheClientWithDioxusDesktop),
            "client-code" => Ok(Self::ClientCode),
            "server-code" => Ok(Self::ServerCode),
            _ => Err(GuidesFullstackServerFunctionsSectionParseError),
        }
    }
}
impl std::fmt::Display for GuidesFullstackServerFunctionsSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::CommunicatingWithTheServer => f.write_str("communicating-with-the-server"),
            Self::CachedDataFetching => f.write_str("cached-data-fetching"),
            Self::RunningTheClientWithDioxusDesktop => {
                f.write_str("running-the-client-with-dioxus-desktop")
            }
            Self::ClientCode => f.write_str("client-code"),
            Self::ServerCode => f.write_str("server-code"),
        }
    }
}
#[derive(Debug)]
pub struct GuidesFullstackServerFunctionsSectionParseError;
impl std::fmt::Display for GuidesFullstackServerFunctionsSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuidesFullstackServerFunctionsSectioncommunicating-with-the-server, cached-data-fetching, running-the-client-with-dioxus-desktop, client-code, server-code",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuidesFullstackServerFunctionsSectionParseError {}
#[component(no_case_check)]
pub fn GuidesFullstackServerFunctions(
    section: GuidesFullstackServerFunctionsSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "communicating-with-the-server",
            Link {
                to: BookRoute::GuidesFullstackServerFunctions {
                    section: GuidesFullstackServerFunctionsSection::CommunicatingWithTheServer,
                },
                class: "header",
                "Communicating with the server"
            }
        }
        p {
            code { "dioxus-fullstack" }
            " provides server functions that allow you to call an automatically generated API on the server from the client as if it were a local function."
        }
        p {
            "To make a server function, simply add the  "
            code { "#[server(YourUniqueType)]" }
            " attribute to a function. The function must:"
        }
        ul {
            li { "Be an async function" }
            li {
                "Have arguments and a return type that both implement serialize and deserialize (with "
                Link { to: "https://serde.rs/", "serde" }
                ")."
            }
            li {
                "Return a "
                code { "Result" }
                " with an error type of ServerFnError"
            }
        }
        blockquote {
            p {
                "If you are targeting WASM on the server with WASI, you must call  "
                code { "register" }
                " on the type you passed into the server macro in your main function before starting your server to tell Dioxus about the server function. For all other targets, the server function will be registered automatically."
            }
        }
        p {
            "Let's continue building on the app we made in the "
            Link {
                to: BookRoute::GettingStartedIndex {
                    section: GettingStartedIndexSection::Empty,
                },
                "getting started"
            }
            " guide. We will add a server function to our app that allows us to double the count on the server."
        }
        p { "First, add serde as a dependency:" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">cargo add serde</span></pre>\n" }
        p {
            "Next, add the server function to your  "
            code { "main.rs" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#![allow(non_snake_case)]\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">main</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">launch</span><span style=\"color:#f8f8f2;\">(App)\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        h1 {{ </span><span style=\"color:#ffee99;\">&quot;High-Five counter: {{count}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        button {{ onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">+= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;Up high!&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        button {{ onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">-= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;Down low!&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        button {{\n</span><span style=\"color:#f8f8f2;\">            onclick: </span><span style=\"color:#f92672;\">move |_| </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">                async </span><span style=\"color:#f92672;\">move </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">                    </span><span style=\"color:#f92672;\">if </span><span style=\"font-style:italic;color:#66d9ef;\">let Ok</span><span style=\"color:#f8f8f2;\">(new_count) </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">double_server</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#66d9ef;\">count</span><span style=\"color:#f8f8f2;\">()).await {{\n</span><span style=\"color:#f8f8f2;\">                        count.</span><span style=\"color:#66d9ef;\">set</span><span style=\"color:#f8f8f2;\">(new_count);\n</span><span style=\"color:#f8f8f2;\">                    }}\n</span><span style=\"color:#f8f8f2;\">                }}\n</span><span style=\"color:#f8f8f2;\">            }},\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;Double&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[server]\n</span><span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">double_server</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">number</span><span style=\"color:#f8f8f2;\">: </span><span style=\"font-style:italic;color:#66d9ef;\">i32</span><span style=\"color:#f8f8f2;\">) -&gt; Result&lt;</span><span style=\"font-style:italic;color:#66d9ef;\">i32</span><span style=\"color:#f8f8f2;\">, ServerFnError&gt; {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Perform some expensive computation or access a database on the server\n</span><span style=\"color:#f8f8f2;\">    tokio::time::sleep(std::time::Duration::from_secs(</span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">)).await;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> result </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> number </span><span style=\"color:#f92672;\">* </span><span style=\"color:#ff80f4;\">2</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">    println!(</span><span style=\"color:#ffee99;\">&quot;server calculated </span><span style=\"color:#ff80f4;\">{{result}}</span><span style=\"color:#ffee99;\">&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">Ok</span><span style=\"color:#f8f8f2;\">(result)\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "server_function.rs".to_string(),
        }
        p {
            "Now, build your client-side bundle with  "
            code { "dx build --features web" }
            " and run your server with  "
            code { "cargo run --features ssr" }
            ". You should see a new button that multiplies the count by 2."
        }
        h2 { id: "cached-data-fetching",
            Link {
                to: BookRoute::GuidesFullstackServerFunctions {
                    section: GuidesFullstackServerFunctionsSection::CachedDataFetching,
                },
                class: "header",
                "Cached data fetching"
            }
        }
        p { "One common use case for server functions is fetching data from the server:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#![allow(non_snake_case, unused)]\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">main</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">launch</span><span style=\"color:#f8f8f2;\">(app)\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">app</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_resource</span><span style=\"color:#f8f8f2;\">(get_server_data);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{</span><span style=\"color:#ffee99;\">&quot;server data is {{count.value():?}}&quot;</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[server]\n</span><span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">get_server_data</span><span style=\"color:#f8f8f2;\">() -&gt; Result&lt;String, ServerFnError&gt; {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Access a database\n</span><span style=\"color:#f8f8f2;\">    tokio::time::sleep(std::time::Duration::from_millis(</span><span style=\"color:#ff80f4;\">100</span><span style=\"color:#f8f8f2;\">)).await;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">Ok</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;Hello from the server!&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">())\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "server_data_fetch.rs".to_string(),
        }
        p {
            "If you navigate to the site above, you will first see  "
            code { "server data is None" }
            ", then after the  "
            code { "WASM" }
            " has loaded and the request to the server has finished, you will see  "
            code { "server data is Some(Ok(\"Hello from the server!\"))" }
            "."
        }
        p {
            "This approach works, but it can be slow. Instead of waiting for the client to load and send a request to the server, what if we could get all of the data we needed for the page on the server and send it down to the client with the initial HTML page?"
        }
        p {
            "This is exactly what the  "
            code { "use_server_future" }
            " hook allows us to do!  "
            code { "use_server_future" }
            " is similar to the  "
            code { "use_resource" }
            " hook, but it allows you to wait for a future on the server and send the result of the future down to the client."
        }
        p {
            "Let's change our data fetching to use  "
            code { "use_server_future" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#![allow(non_snake_case, unused)]\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">main</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">launch</span><span style=\"color:#f8f8f2;\">(app);\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">app</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_server_future</span><span style=\"color:#f8f8f2;\">(get_server_data)</span><span style=\"color:#f92672;\">?</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{</span><span style=\"color:#ffee99;\">&quot;server data is {{count.value():?}}&quot;</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[server]\n</span><span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">get_server_data</span><span style=\"color:#f8f8f2;\">() -&gt; Result&lt;String, ServerFnError&gt; {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Access a database\n</span><span style=\"color:#f8f8f2;\">    tokio::time::sleep(std::time::Duration::from_millis(</span><span style=\"color:#ff80f4;\">100</span><span style=\"color:#f8f8f2;\">)).await;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">Ok</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;Hello from the server!&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">())\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "server_data_prefetch.rs".to_string(),
        }
        blockquote {
            p {
                "Notice the  "
                code { "?" }
                " after  "
                code { "use_server_future" }
                ". This is what tells Dioxus fullstack to wait for the future to resolve before continuing rendering. If you want to not wait for a specific future, you can just remove the ? and deal with the  "
                code { "Option" }
                " manually."
            }
        }
        p {
            "Now when you load the page, you should see  "
            code { "server data is Ok(\"Hello from the server!\")" }
            ". No need to wait for the  "
            code { "WASM" }
            " to load or wait for the request to finish!"
        }
        SandBoxFrame { url: "https://codesandbox.io/p/sandbox/dioxus-fullstack-server-future-qwpp4p?file=/src/main.rs:3,24" }
        h2 { id: "running-the-client-with-dioxus-desktop",
            Link {
                to: BookRoute::GuidesFullstackServerFunctions {
                    section: GuidesFullstackServerFunctionsSection::RunningTheClientWithDioxusDesktop,
                },
                class: "header",
                "Running the client with dioxus-desktop"
            }
        }
        p {
            "The project presented so far makes a web browser interact with the server, but it is also possible to make a desktop program interact with the server in a similar fashion. (The full example code is available in the "
            Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/fullstack/examples/axum-desktop",
                "Dioxus repo"
            }
            ")"
        }
        p {
            "First, we need to make two binary targets, one for the desktop program (the  "
            code { "client.rs" }
            " file), one for the server (the  "
            code { "server.rs" }
            " file). The client app and the server functions are written in a shared  "
            code { "lib.rs" }
            " file."
        }
        p {
            "The desktop and server targets have slightly different build configuration to enable additional dependencies or features. "
            "The Cargo.toml in the full example has more information, but the main points are:"
        }
        ul {
            li {
                "the client.rs has to be run with the "
                code { "desktop" }
                " feature, so that the optional "
                code { "dioxus-desktop" }
                " dependency is included"
            }
            li {
                "the server.rs has to be run with the "
                code { "ssr" }
                " features; this will generate the server part of the server functions and will run our backend server."
            }
        }
        p { "Once you create your project, you can run the server executable with:" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">cargo run </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">bin server </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">features ssr</span></pre>\n" }
        p { "and the client desktop executable with:" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">cargo run </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">bin client </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">features desktop</span></pre>\n" }
        h3 { id: "client-code",
            Link {
                to: BookRoute::GuidesFullstackServerFunctions {
                    section: GuidesFullstackServerFunctionsSection::ClientCode,
                },
                class: "header",
                "Client code"
            }
        }
        p {
            "The client file is pretty straightforward. You only need to set the server url in the client code, so it knows where to send the network requests. Then, dioxus_desktop launches the app."
        }
        p {
            "For development, the example project runs the server on  "
            code { "localhost:8080" }
            ". "
            strong { "Before you release remember to update the url to your production url." }
        }
        h3 { id: "server-code",
            Link {
                to: BookRoute::GuidesFullstackServerFunctions {
                    section: GuidesFullstackServerFunctionsSection::ServerCode,
                },
                class: "header",
                "Server code"
            }
        }
        p {
            "In the server code, first you have to set the network address and port where the server will listen to."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> listener </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">tokio::net::TcpListener::bind(</span><span style=\"color:#ffee99;\">&quot;127.0.0.1:3000&quot;</span><span style=\"color:#f8f8f2;\">)\n</span><span style=\"color:#f8f8f2;\">    .await\n</span><span style=\"color:#f8f8f2;\">    .</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">println!(</span><span style=\"color:#ffee99;\">&quot;listening on http://127.0.0.1:3000&quot;</span><span style=\"color:#f8f8f2;\">);</span></pre>\n",
            name: "server_function_desktop_client.rs".to_string(),
        }
        p {
            "Then, you have to register the types declared in the server function macros into the server."
            " "
            "For example, consider this server function:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[server(GetServerData)]\n</span><span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">get_server_data</span><span style=\"color:#f8f8f2;\">() -&gt; Result&lt;String, ServerFnError&gt; {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">Ok</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;Hello from the server!&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">())\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "server_function_desktop_client.rs".to_string(),
        }
        p {
            "The  "
            code { "GetServerData" }
            " type has to be registered in the server, which will add the corresponding route to the server."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n</pre>\n",
            name: "server_function_desktop_client.rs".to_string(),
        }
        p { "Finally, the server is started and it begins responding to requests." }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuidesFullstackExtractorsSection {
    #[default]
    Empty,
    Extractors,
}
impl std::str::FromStr for GuidesFullstackExtractorsSection {
    type Err = GuidesFullstackExtractorsSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "extractors" => Ok(Self::Extractors),
            _ => Err(GuidesFullstackExtractorsSectionParseError),
        }
    }
}
impl std::fmt::Display for GuidesFullstackExtractorsSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Extractors => f.write_str("extractors"),
        }
    }
}
#[derive(Debug)]
pub struct GuidesFullstackExtractorsSectionParseError;
impl std::fmt::Display for GuidesFullstackExtractorsSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuidesFullstackExtractorsSectionextractors",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuidesFullstackExtractorsSectionParseError {}
#[component(no_case_check)]
pub fn GuidesFullstackExtractors(
    section: GuidesFullstackExtractorsSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "extractors",
            Link {
                to: BookRoute::GuidesFullstackExtractors {
                    section: GuidesFullstackExtractorsSection::Extractors,
                },
                class: "header",
                "Extractors"
            }
        }
        p {
            "Server functions are an ergonomic way to call a function on the server. Server function work by registering an endpoint on the server and using requests on the client. Most of the time, you shouldn't need to worry about how server functions operate, but there are some times when you need to get some value from the request other than the data passed in the server function."
        }
        p {
            "For example, requests contain information about the user's browser (called the "
            Link { to: "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent",
                "user agent"
            }
            "). We can use an extractor to retrieve that information."
        }
        p {
            "You can use the  "
            code { "extract" }
            " method within a server function to extract something from the request. You can extract any type that implements  "
            code { "FromServerContext" }
            " (or when axum is enabled, you can use axum extractors directly):"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// #[server]\n</span><span style=\"color:#8c8c8c;\">// pub async fn log_headers() -&gt; Result&lt;(), ServerFnError&gt; {{\n</span><span style=\"color:#8c8c8c;\">//     let headers: http::HeaderMap = extract().await?;\n</span><span style=\"color:#8c8c8c;\">//     log::info!(&quot;{{:?}}&quot;, headers[http::header::USER_AGENT]);\n</span><span style=\"color:#8c8c8c;\">//     Ok(())\n</span><span style=\"color:#8c8c8c;\">// }}</span></pre>\n",
            name: "server_function_extract.rs".to_string(),
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuidesFullstackMiddlewareSection {
    #[default]
    Empty,
    Middleware,
}
impl std::str::FromStr for GuidesFullstackMiddlewareSection {
    type Err = GuidesFullstackMiddlewareSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "middleware" => Ok(Self::Middleware),
            _ => Err(GuidesFullstackMiddlewareSectionParseError),
        }
    }
}
impl std::fmt::Display for GuidesFullstackMiddlewareSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Middleware => f.write_str("middleware"),
        }
    }
}
#[derive(Debug)]
pub struct GuidesFullstackMiddlewareSectionParseError;
impl std::fmt::Display for GuidesFullstackMiddlewareSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuidesFullstackMiddlewareSectionmiddleware",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuidesFullstackMiddlewareSectionParseError {}
#[component(no_case_check)]
pub fn GuidesFullstackMiddleware(
    section: GuidesFullstackMiddlewareSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "middleware",
            Link {
                to: BookRoute::GuidesFullstackMiddleware {
                    section: GuidesFullstackMiddlewareSection::Middleware,
                },
                class: "header",
                "Middleware"
            }
        }
        p {
            "Extractors allow you to wrap your server function in some code that changes either the request or the response. Dioxus fullstack integrates with "
            Link { to: "https://docs.rs/tower/latest/tower/index.html", "Tower" }
            " to allow you to wrap your server functions in middleware."
        }
        p {
            "You can use the  "
            code { "#[middleware]" }
            " attribute to add a layer of middleware to your server function. Let's add a timeout middleware to a server function. This middleware will stop running the server function if it reaches a certain timeout:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// #[server]\n</span><span style=\"color:#8c8c8c;\">// // Add a timeout middleware to the server function that will return an error if the function takes longer than 1 second to execute\n</span><span style=\"color:#8c8c8c;\">// #[middleware(tower_http::timeout::TimeoutLayer::new(std::time::Duration::from_secs(1)))]\n</span><span style=\"color:#8c8c8c;\">// pub async fn timeout() -&gt; Result&lt;(), ServerFnError&gt; {{\n</span><span style=\"color:#8c8c8c;\">//     tokio::time::sleep(std::time::Duration::from_secs(2)).await;\n</span><span style=\"color:#8c8c8c;\">//     Ok(())\n</span><span style=\"color:#8c8c8c;\">// }}</span></pre>\n",
            name: "server_function_middleware.rs".to_string(),
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuidesFullstackAuthenticationSection {
    #[default]
    Empty,
    Authentication,
}
impl std::str::FromStr for GuidesFullstackAuthenticationSection {
    type Err = GuidesFullstackAuthenticationSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "authentication" => Ok(Self::Authentication),
            _ => Err(GuidesFullstackAuthenticationSectionParseError),
        }
    }
}
impl std::fmt::Display for GuidesFullstackAuthenticationSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Authentication => f.write_str("authentication"),
        }
    }
}
#[derive(Debug)]
pub struct GuidesFullstackAuthenticationSectionParseError;
impl std::fmt::Display for GuidesFullstackAuthenticationSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of GuidesFullstackAuthenticationSectionauthentication",
        )?;
        Ok(())
    }
}
impl std::error::Error for GuidesFullstackAuthenticationSectionParseError {}
#[component(no_case_check)]
pub fn GuidesFullstackAuthentication(
    section: GuidesFullstackAuthenticationSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "authentication",
            Link {
                to: BookRoute::GuidesFullstackAuthentication {
                    section: GuidesFullstackAuthenticationSection::Authentication,
                },
                class: "header",
                "Authentication"
            }
        }
        p {
            "You can use "
            Link {
                to: BookRoute::GuidesFullstackExtractors {
                    section: GuidesFullstackExtractorsSection::Empty,
                },
                "extractors"
            }
            " to integrate auth with your Fullstack application."
        }
        p {
            "You can create a custom extractors that extracts the auth session from the request. From that auth session, you can check if the user has the required privileges before returning the private data."
        }
        p {
            "A "
            Link { to: "https://github.com/DioxusLabs/dioxus/blob/v0.5/packages/fullstack/examples/axum-auth/src/main.rs",
                "full auth example"
            }
            " with the complete implementation is available in the fullstack examples."
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum GuidesFullstackRoutingSection {
    #[default]
    Empty,
    Routing,
}
impl std::str::FromStr for GuidesFullstackRoutingSection {
    type Err = GuidesFullstackRoutingSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "routing" => Ok(Self::Routing),
            _ => Err(GuidesFullstackRoutingSectionParseError),
        }
    }
}
impl std::fmt::Display for GuidesFullstackRoutingSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Routing => f.write_str("routing"),
        }
    }
}
#[derive(Debug)]
pub struct GuidesFullstackRoutingSectionParseError;
impl std::fmt::Display for GuidesFullstackRoutingSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str("Invalid section name. Expected one of GuidesFullstackRoutingSectionrouting")?;
        Ok(())
    }
}
impl std::error::Error for GuidesFullstackRoutingSectionParseError {}
#[component(no_case_check)]
pub fn GuidesFullstackRouting(section: GuidesFullstackRoutingSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "routing",
            Link {
                to: BookRoute::GuidesFullstackRouting {
                    section: GuidesFullstackRoutingSection::Routing,
                },
                class: "header",
                "Routing"
            }
        }
        p {
            "You can easily integrate your fullstack application with a client side router using Dioxus Router. This allows you to create different scenes in your app and navigate between them. You can read more about the router in the "
            Link {
                to: BookRoute::RouterIndex {
                    section: RouterIndexSection::Empty,
                },
                "router reference"
            }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#![allow(non_snake_case)]\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">axum::Router;\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus_router::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">serde::{{Deserialize, Serialize}};\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">main</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">launch</span><span style=\"color:#f8f8f2;\">(|| rsx! {{ Router::&lt;Route&gt; {{}} }});\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[derive(Clone, Routable, Debug, PartialEq, Serialize, Deserialize)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">Route {{\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    Home {{}},\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/blog/:id&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    Blog {{ id: </span><span style=\"font-style:italic;color:#66d9ef;\">i32 </span><span style=\"color:#f8f8f2;\">}},\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Blog</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">id</span><span style=\"color:#f8f8f2;\">: </span><span style=\"font-style:italic;color:#66d9ef;\">i32</span><span style=\"color:#f8f8f2;\">) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        Link {{ to: Route::Home {{}}, </span><span style=\"color:#ffee99;\">&quot;Go to counter&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        table {{\n</span><span style=\"color:#f8f8f2;\">            tbody {{\n</span><span style=\"color:#f8f8f2;\">                </span><span style=\"color:#f92672;\">for _ in </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f92672;\">..</span><span style=\"color:#f8f8f2;\">id {{\n</span><span style=\"color:#f8f8f2;\">                    tr {{\n</span><span style=\"color:#f8f8f2;\">                        </span><span style=\"color:#f92672;\">for _ in </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f92672;\">..</span><span style=\"color:#f8f8f2;\">id {{\n</span><span style=\"color:#f8f8f2;\">                            td {{ </span><span style=\"color:#ffee99;\">&quot;hello world!&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">                        }}\n</span><span style=\"color:#f8f8f2;\">                    }}\n</span><span style=\"color:#f8f8f2;\">                }}\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Home</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> text </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ffee99;\">&quot;...&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">());\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        Link {{ to: Route::Blog {{ id: </span><span style=\"color:#66d9ef;\">count</span><span style=\"color:#f8f8f2;\">() }}, </span><span style=\"color:#ffee99;\">&quot;Go to blog&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        div {{\n</span><span style=\"color:#f8f8f2;\">            h1 {{ </span><span style=\"color:#ffee99;\">&quot;High-Five counter: {{count}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">            button {{ onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">+= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;Up high!&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">            button {{ onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">-= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;Down low!&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">            button {{\n</span><span style=\"color:#f8f8f2;\">                onclick: </span><span style=\"color:#f92672;\">move |_| </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">                    async </span><span style=\"color:#f92672;\">move </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">                        </span><span style=\"color:#f92672;\">if </span><span style=\"font-style:italic;color:#66d9ef;\">let Ok</span><span style=\"color:#f8f8f2;\">(data) </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">get_server_data</span><span style=\"color:#f8f8f2;\">().await {{\n</span><span style=\"color:#f8f8f2;\">                            println!(</span><span style=\"color:#ffee99;\">&quot;Client received: </span><span style=\"color:#ff80f4;\">{{}}</span><span style=\"color:#ffee99;\">&quot;</span><span style=\"color:#f8f8f2;\">, data);\n</span><span style=\"color:#f8f8f2;\">                            text.</span><span style=\"color:#66d9ef;\">set</span><span style=\"color:#f8f8f2;\">(data.</span><span style=\"color:#66d9ef;\">clone</span><span style=\"color:#f8f8f2;\">());\n</span><span style=\"color:#f8f8f2;\">                            </span><span style=\"color:#66d9ef;\">post_server_data</span><span style=\"color:#f8f8f2;\">(data).await.</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">                        }}\n</span><span style=\"color:#f8f8f2;\">                    }}\n</span><span style=\"color:#f8f8f2;\">                }},\n</span><span style=\"color:#f8f8f2;\">                </span><span style=\"color:#ffee99;\">&quot;Run server function!&quot;\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;Server said: {{text}}&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[server(PostServerData)]\n</span><span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">post_server_data</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">data</span><span style=\"color:#f8f8f2;\">: String) -&gt; Result&lt;(), ServerFnError&gt; {{\n</span><span style=\"color:#f8f8f2;\">    println!(</span><span style=\"color:#ffee99;\">&quot;Server received: </span><span style=\"color:#ff80f4;\">{{}}</span><span style=\"color:#ffee99;\">&quot;</span><span style=\"color:#f8f8f2;\">, data);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">Ok</span><span style=\"color:#f8f8f2;\">(())\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[server(GetServerData)]\n</span><span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">get_server_data</span><span style=\"color:#f8f8f2;\">() -&gt; Result&lt;String, ServerFnError&gt; {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">Ok</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;Hello from the server!&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">())\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "server_router.rs".to_string(),
        }
        SandBoxFrame { url: "https://codesandbox.io/p/sandbox/dioxus-fullstack-router-s75v5q?file=%2Fsrc%2Fmain.rs%3A7%2C1" }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum CookbookPublishingSection {
    #[default]
    Empty,
    Publishing,
    WebPublishingWithGithubPages,
    DesktopCreatingAnInstaller,
    PreparingYourApplicationForBundling,
    AddingAssetsToYourApplication,
    InstallDioxusCli,
    Building,
}
impl std::str::FromStr for CookbookPublishingSection {
    type Err = CookbookPublishingSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "publishing" => Ok(Self::Publishing),
            "web-publishing-with-github-pages" => Ok(Self::WebPublishingWithGithubPages),
            "desktop-creating-an-installer" => Ok(Self::DesktopCreatingAnInstaller),
            "preparing-your-application-for-bundling" => {
                Ok(Self::PreparingYourApplicationForBundling)
            }
            "adding-assets-to-your-application" => Ok(Self::AddingAssetsToYourApplication),
            "install-dioxus-cli" => Ok(Self::InstallDioxusCli),
            "building" => Ok(Self::Building),
            _ => Err(CookbookPublishingSectionParseError),
        }
    }
}
impl std::fmt::Display for CookbookPublishingSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Publishing => f.write_str("publishing"),
            Self::WebPublishingWithGithubPages => f.write_str("web-publishing-with-github-pages"),
            Self::DesktopCreatingAnInstaller => f.write_str("desktop-creating-an-installer"),
            Self::PreparingYourApplicationForBundling => {
                f.write_str("preparing-your-application-for-bundling")
            }
            Self::AddingAssetsToYourApplication => f.write_str("adding-assets-to-your-application"),
            Self::InstallDioxusCli => f.write_str("install-dioxus-cli"),
            Self::Building => f.write_str("building"),
        }
    }
}
#[derive(Debug)]
pub struct CookbookPublishingSectionParseError;
impl std::fmt::Display for CookbookPublishingSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of CookbookPublishingSectionpublishing, web-publishing-with-github-pages, desktop-creating-an-installer, preparing-your-application-for-bundling, adding-assets-to-your-application, install-dioxus-cli, building",
        )?;
        Ok(())
    }
}
impl std::error::Error for CookbookPublishingSectionParseError {}
#[component(no_case_check)]
pub fn CookbookPublishing(section: CookbookPublishingSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "publishing",
            Link {
                to: BookRoute::CookbookPublishing {
                    section: CookbookPublishingSection::Publishing,
                },
                class: "header",
                "Publishing"
            }
        }
        p {
            "After you have build your application, you will need to publish it somewhere. This reference will outline different methods of publishing your desktop or web application."
        }
        h2 { id: "web-publishing-with-github-pages",
            Link {
                to: BookRoute::CookbookPublishing {
                    section: CookbookPublishingSection::WebPublishingWithGithubPages,
                },
                class: "header",
                "Web: Publishing with GitHub Pages"
            }
        }
        p {
            "Edit your  "
            code { "Dioxus.toml" }
            " to point your  "
            code { "out_dir" }
            " to the  "
            code { "docs" }
            " folder and the  "
            code { "base_path" }
            " to the name of your repo:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[application]\n</span><span style=\"color:#f92672;\"># ...\n</span><span style=\"color:#f8f8f2;\">out_dir </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;docs&quot;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">[web.app]\n</span><span style=\"color:#f8f8f2;\">base_path </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;your_repo&quot;</span></pre>\n" }
        p { "Then build your app and publish it to Github:" }
        ul {
            li {
                "Make sure GitHub Pages is set up for your repo to publish any static files in the docs directory"
            }
            li { "Build your app with:" }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">dx build </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">release</span></pre>\n" }
        ul {
            li {
                "Make a copy of your "
                code { "docs/index.html" }
                " file and rename the copy to "
                code { "docs/404.html" }
                " so that your app will work with client-side routing"
            }
            li { "Add and commit with git" }
            li { "Push to GitHub" }
        }
        h2 { id: "desktop-creating-an-installer",
            Link {
                to: BookRoute::CookbookPublishing {
                    section: CookbookPublishingSection::DesktopCreatingAnInstaller,
                },
                class: "header",
                "Desktop: Creating an installer"
            }
        }
        p {
            "Dioxus desktop app uses your operating system's WebView library, so it's portable to be distributed for other platforms."
        }
        p { "In this section, we'll cover how to bundle your app for macOS, Windows, and Linux." }
        h2 { id: "preparing-your-application-for-bundling",
            Link {
                to: BookRoute::CookbookPublishing {
                    section: CookbookPublishingSection::PreparingYourApplicationForBundling,
                },
                class: "header",
                "Preparing your application for bundling"
            }
        }
        p {
            "Depending on your platform, you may need to add some additional code to your  "
            code { "main.rs" }
            " file to make sure your app is ready for bundling. On Windows, you'll need to add the  "
            code { "#![windows_subsystem = \"windows\"]" }
            " attribute to your  "
            code { "main.rs" }
            " file to hide the terminal window that pops up when you run your app. "
            strong { "If you're developing on Windows, only use this when bundling." }
            " It will disable the terminal, so you will not get logs of any kind. You can gate it behind a feature, like so:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> Cargo.toml\n</span><span style=\"color:#f8f8f2;\">[features]\n</span><span style=\"color:#f8f8f2;\">bundle </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[]</span></pre>\n" }
        p {
            "And then your  "
            code { "main.rs" }
            ":"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#![cfg_attr(feature </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;bundle&quot;</span><span style=\"color:#f8f8f2;\">, windows_subsystem </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;windows&quot;</span><span style=\"color:#f8f8f2;\">)]</span></pre>\n" }
        h2 { id: "adding-assets-to-your-application",
            Link {
                to: BookRoute::CookbookPublishing {
                    section: CookbookPublishingSection::AddingAssetsToYourApplication,
                },
                class: "header",
                "Adding assets to your application"
            }
        }
        p {
            "If you want to bundle assets with your application, you can either use them with the  "
            code { "manganis" }
            " crate (covered more in the "
            Link {
                to: BookRoute::GuidesAssets {
                    section: GuidesAssetsSection::Empty,
                },
                "assets"
            }
            " page), or you can include them in your "
            code { "Dioxus.toml" }
            " file:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[bundle]\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> The list of files to include </span><span style=\"color:#f92672;\">in</span><span style=\"color:#f8f8f2;\"> the bundle. These can contain globs.\n</span><span style=\"color:#f8f8f2;\">resources </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;main.css&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;header.svg&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;**/*.png&quot;</span><span style=\"color:#f8f8f2;\">]</span></pre>\n" }
        h2 { id: "install-dioxus-cli",
            Link {
                to: BookRoute::CookbookPublishing {
                    section: CookbookPublishingSection::InstallDioxusCli,
                },
                class: "header",
                "Install dioxus CLI"
            }
        }
        p {
            "The first thing we'll do is install the "
            Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/cli",
                "dioxus-cli"
            }
            ". This extension to cargo will make it very easy to package our app for the various platforms."
        }
        p { "To install, simply run" }
        p {
            code { "cargo install dioxus-cli" }
        }
        h2 { id: "building",
            Link {
                to: BookRoute::CookbookPublishing {
                    section: CookbookPublishingSection::Building,
                },
                class: "header",
                "Building"
            }
        }
        p {
            "To bundle your application you can simply run  "
            code { "dx bundle --release" }
            " (also add  "
            code { "--features bundle" }
            " if you're using that, see the "
            Link {
                to: BookRoute::CookbookPublishing {
                    section: CookbookPublishingSection::PreparingYourApplicationForBundling,
                },
                "this"
            }
            " for more) to produce a final app with all the optimizations and assets builtin."
        }
        p {
            "Once you've ran the command, your app should be accessible in  "
            code { "dist/bundle/" }
            "."
        }
        p { "For example, a macOS app would look like this:" }
        p {
            img {
                src: asset!("/assets/static/publish.png", ImageAssetOptions::new().with_avif()),
                alt: "Published App",
                title: "",
            }
        }
        p {
            "Nice! And it's only 4.8 Mb – extremely lean!! Because Dioxus leverages your platform's native WebView, Dioxus apps are extremely memory efficient and won't waste your battery."
        }
        blockquote {
            p {
                "Note: not all CSS works the same on all platforms. Make sure to view your app's CSS on each platform – or web browser (Firefox, Chrome, Safari) before publishing."
            }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum CookbookAntipatternsSection {
    #[default]
    Empty,
    Antipatterns,
    UnnecessarilyNestedFragments,
    IncorrectIteratorKeys,
    AvoidInteriorMutabilityInProps,
    AvoidUpdatingStateDuringRender,
    AvoidLargeGroupsOfState,
    RunningNonDeterministicCodeInTheBodyOfAComponent,
    OverlyPermissivePartialeqForProps,
}
impl std::str::FromStr for CookbookAntipatternsSection {
    type Err = CookbookAntipatternsSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "antipatterns" => Ok(Self::Antipatterns),
            "unnecessarily-nested-fragments" => Ok(Self::UnnecessarilyNestedFragments),
            "incorrect-iterator-keys" => Ok(Self::IncorrectIteratorKeys),
            "avoid-interior-mutability-in-props" => Ok(Self::AvoidInteriorMutabilityInProps),
            "avoid-updating-state-during-render" => Ok(Self::AvoidUpdatingStateDuringRender),
            "avoid-large-groups-of-state" => Ok(Self::AvoidLargeGroupsOfState),
            "running-non-deterministic-code-in-the-body-of-a-component" => {
                Ok(Self::RunningNonDeterministicCodeInTheBodyOfAComponent)
            }
            "overly-permissive-partialeq-for-props" => Ok(Self::OverlyPermissivePartialeqForProps),
            _ => Err(CookbookAntipatternsSectionParseError),
        }
    }
}
impl std::fmt::Display for CookbookAntipatternsSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Antipatterns => f.write_str("antipatterns"),
            Self::UnnecessarilyNestedFragments => f.write_str("unnecessarily-nested-fragments"),
            Self::IncorrectIteratorKeys => f.write_str("incorrect-iterator-keys"),
            Self::AvoidInteriorMutabilityInProps => {
                f.write_str("avoid-interior-mutability-in-props")
            }
            Self::AvoidUpdatingStateDuringRender => {
                f.write_str("avoid-updating-state-during-render")
            }
            Self::AvoidLargeGroupsOfState => f.write_str("avoid-large-groups-of-state"),
            Self::RunningNonDeterministicCodeInTheBodyOfAComponent => {
                f.write_str("running-non-deterministic-code-in-the-body-of-a-component")
            }
            Self::OverlyPermissivePartialeqForProps => {
                f.write_str("overly-permissive-partialeq-for-props")
            }
        }
    }
}
#[derive(Debug)]
pub struct CookbookAntipatternsSectionParseError;
impl std::fmt::Display for CookbookAntipatternsSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of CookbookAntipatternsSectionantipatterns, unnecessarily-nested-fragments, incorrect-iterator-keys, avoid-interior-mutability-in-props, avoid-updating-state-during-render, avoid-large-groups-of-state, running-non-deterministic-code-in-the-body-of-a-component, overly-permissive-partialeq-for-props",
        )?;
        Ok(())
    }
}
impl std::error::Error for CookbookAntipatternsSectionParseError {}
#[component(no_case_check)]
pub fn CookbookAntipatterns(section: CookbookAntipatternsSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "antipatterns",
            Link {
                to: BookRoute::CookbookAntipatterns {
                    section: CookbookAntipatternsSection::Antipatterns,
                },
                class: "header",
                "Antipatterns"
            }
        }
        p {
            "This example shows what not to do and provides a reason why a given pattern is considered an \"AntiPattern\". Most anti-patterns are considered wrong for performance or code re-usability reasons."
        }
        h2 { id: "unnecessarily-nested-fragments",
            Link {
                to: BookRoute::CookbookAntipatterns {
                    section: CookbookAntipatternsSection::UnnecessarilyNestedFragments,
                },
                class: "header",
                "Unnecessarily Nested Fragments"
            }
        }
        p {
            "Fragments don't mount a physical element to the DOM immediately, so Dioxus must recurse into its children to find a physical DOM node. This process is called \"normalization\". This means that deeply nested fragments make Dioxus perform unnecessary work. Prefer one or two levels of fragments / nested components until presenting a true DOM element."
        }
        p {
            "Only Component and Fragment nodes are susceptible to this issue. Dioxus mitigates this with components by providing an API for registering shared state without the Context Provider pattern."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// ❌ Don&#39;t unnecessarily nest fragments\n</span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">_ = </span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    Fragment {{\n</span><span style=\"color:#f8f8f2;\">        Fragment {{\n</span><span style=\"color:#f8f8f2;\">            Fragment {{\n</span><span style=\"color:#f8f8f2;\">                Fragment {{\n</span><span style=\"color:#f8f8f2;\">                    Fragment {{ div {{ </span><span style=\"color:#ffee99;\">&quot;Finally have a real node!&quot; </span><span style=\"color:#f8f8f2;\">}} }}\n</span><span style=\"color:#f8f8f2;\">                }}\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}};\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// ✅ Render shallow structures\n</span><span style=\"color:#f8f8f2;\">rsx! {{ div {{ </span><span style=\"color:#ffee99;\">&quot;Finally have a real node!&quot; </span><span style=\"color:#f8f8f2;\">}} }}</span></pre>\n",
            name: "anti_patterns.rs".to_string(),
        }
        h2 { id: "incorrect-iterator-keys",
            Link {
                to: BookRoute::CookbookAntipatterns {
                    section: CookbookAntipatternsSection::IncorrectIteratorKeys,
                },
                class: "header",
                "Incorrect Iterator Keys"
            }
        }
        p {
            "As described in the "
            Link {
                to: BookRoute::ReferenceDynamicRendering {
                    section: ReferenceDynamicRenderingSection::TheKeyAttribute,
                },
                "dynamic rendering chapter"
            }
            ", list items must have unique keys that are associated with the same items across renders. This helps Dioxus associate state with the contained components and ensures good diffing performance. Do not omit keys, unless you know that the list will never change."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> data: </span><span style=\"color:#f92672;\">&amp;</span><span style=\"color:#f8f8f2;\">HashMap&lt;</span><span style=\"color:#f92672;\">_</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#f92672;\">_</span><span style=\"color:#f8f8f2;\">&gt; </span><span style=\"color:#f92672;\">= &amp;</span><span style=\"color:#f8f8f2;\">props.data;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// ❌ No keys\n</span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    ul {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">for</span><span style=\"color:#f8f8f2;\"> value </span><span style=\"color:#f92672;\">in</span><span style=\"color:#f8f8f2;\"> data.</span><span style=\"color:#66d9ef;\">values</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">            li {{ </span><span style=\"color:#ffee99;\">&quot;List item: {{value}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}};\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// ❌ Using index as keys\n</span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    ul {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">for </span><span style=\"color:#f8f8f2;\">(index , value) </span><span style=\"color:#f92672;\">in</span><span style=\"color:#f8f8f2;\"> data.</span><span style=\"color:#66d9ef;\">values</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#66d9ef;\">enumerate</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">            li {{ key: </span><span style=\"color:#ffee99;\">&quot;{{index}}&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;List item: {{value}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}};\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// ✅ Using unique IDs as keys:\n</span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    ul {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">for </span><span style=\"color:#f8f8f2;\">(key , value) </span><span style=\"color:#f92672;\">in</span><span style=\"color:#f8f8f2;\"> props.data.</span><span style=\"color:#66d9ef;\">iter</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">            li {{ key: </span><span style=\"color:#ffee99;\">&quot;{{key}}&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;List item: {{value}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "anti_patterns.rs".to_string(),
        }
        h2 { id: "avoid-interior-mutability-in-props",
            Link {
                to: BookRoute::CookbookAntipatterns {
                    section: CookbookAntipatternsSection::AvoidInteriorMutabilityInProps,
                },
                class: "header",
                "Avoid Interior Mutability in Props"
            }
        }
        p {
            "While it is technically acceptable to have a  "
            code { "Mutex" }
            " or a  "
            code { "RwLock" }
            " in the props, they will be difficult to use."
        }
        p {
            "Suppose you have a struct  "
            code { "User" }
            " containing the field  "
            code { "username: String" }
            ". If you pass a  "
            code { "Mutex<User>" }
            " prop to a  "
            code { "UserComponent" }
            " component, that component may wish to write to the  "
            code { "username" }
            " field. However, when it does, the parent component will not be aware of the change, and the component will not re-render which causes the UI to be out of sync with the state. Instead, consider passing down a reactive value like a  "
            code { "Signal" }
            " or immutable data."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// ❌ Mutex/RwLock/RefCell in props\n</span><span style=\"color:#f8f8f2;\">#[derive(Props, Clone)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">AntipatternInteriorMutability {{\n</span><span style=\"color:#f8f8f2;\">    map: Rc&lt;RefCell&lt;HashMap&lt;</span><span style=\"font-style:italic;color:#66d9ef;\">u32</span><span style=\"color:#f8f8f2;\">, String&gt;&gt;&gt;,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">impl </span><span style=\"color:#f8f8f2;\">PartialEq </span><span style=\"color:#f92672;\">for </span><span style=\"color:#f8f8f2;\">AntipatternInteriorMutability {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">eq</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">&amp;</span><span style=\"font-style:italic;color:#fd971f;\">self</span><span style=\"color:#f8f8f2;\">, </span><span style=\"font-style:italic;color:#fd971f;\">other</span><span style=\"color:#f8f8f2;\">: </span><span style=\"color:#f92672;\">&amp;</span><span style=\"font-style:italic;color:#66d9ef;\">Self</span><span style=\"color:#f8f8f2;\">) -&gt; </span><span style=\"font-style:italic;color:#66d9ef;\">bool </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        std::rc::Rc::ptr_eq(</span><span style=\"color:#f92672;\">&amp;</span><span style=\"color:#f8f8f2;\">self.map, </span><span style=\"color:#f92672;\">&amp;</span><span style=\"color:#f8f8f2;\">other.map)\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">AntipatternInteriorMutability</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">map</span><span style=\"color:#f8f8f2;\">: Rc&lt;RefCell&lt;HashMap&lt;</span><span style=\"font-style:italic;color:#66d9ef;\">u32</span><span style=\"color:#f8f8f2;\">, String&gt;&gt;&gt;) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        button {{\n</span><span style=\"color:#f8f8f2;\">            onclick: {{\n</span><span style=\"color:#f8f8f2;\">                </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> map </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> map.</span><span style=\"color:#66d9ef;\">clone</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">                </span><span style=\"color:#f92672;\">move |_| </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">                    </span><span style=\"color:#8c8c8c;\">// Writing to map will not rerun any components\n</span><span style=\"color:#f8f8f2;\">                    map.</span><span style=\"color:#66d9ef;\">borrow_mut</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#66d9ef;\">insert</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;Hello&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">());\n</span><span style=\"color:#f8f8f2;\">                }}\n</span><span style=\"color:#f8f8f2;\">            }},\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;Mutate map&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// Since writing to map will not rerun any components, this will get out of date\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#ffee99;\">&quot;{{map.borrow().get(&amp;0).unwrap()}}&quot;\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// ✅ Use a signal to pass mutable state\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">AntipatternInteriorMutabilitySignal</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">map</span><span style=\"color:#f8f8f2;\">: Signal&lt;HashMap&lt;</span><span style=\"font-style:italic;color:#66d9ef;\">u32</span><span style=\"color:#f8f8f2;\">, String&gt;&gt;) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        button {{\n</span><span style=\"color:#f8f8f2;\">            onclick: </span><span style=\"color:#f92672;\">move |_| </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">                </span><span style=\"color:#8c8c8c;\">// Writing to map will rerun any components that read the map\n</span><span style=\"color:#f8f8f2;\">                map.</span><span style=\"color:#66d9ef;\">write</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#66d9ef;\">insert</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;Hello&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">());\n</span><span style=\"color:#f8f8f2;\">            }},\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;Mutate map&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// Since writing to map will rerun subscribers, this will get updated\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#ffee99;\">&quot;{{map.read().get(&amp;0).unwrap()}}&quot;\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "anti_patterns.rs".to_string(),
        }
        h2 { id: "avoid-updating-state-during-render",
            Link {
                to: BookRoute::CookbookAntipatterns {
                    section: CookbookAntipatternsSection::AvoidUpdatingStateDuringRender,
                },
                class: "header",
                "Avoid Updating State During Render"
            }
        }
        p {
            "Every time you update the state, Dioxus needs to re-render the component – this is inefficient! Consider refactoring your code to avoid this."
        }
        p {
            "Also, if you unconditionally update the state during render, it will be re-rendered in an infinite loop."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// ❌ Updating state in render\n</span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> first_signal </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> second_signal </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// Updating the state during a render can easily lead to infinite loops\n</span><span style=\"color:#f92672;\">if </span><span style=\"color:#66d9ef;\">first_signal</span><span style=\"color:#f8f8f2;\">() </span><span style=\"color:#f92672;\">+ </span><span style=\"color:#ff80f4;\">1 </span><span style=\"color:#f92672;\">!= </span><span style=\"color:#66d9ef;\">second_signal</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    second_signal.</span><span style=\"color:#66d9ef;\">set</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#66d9ef;\">first_signal</span><span style=\"color:#f8f8f2;\">() </span><span style=\"color:#f92672;\">+ </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// ✅ Update state in an effect\n</span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> first_signal </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> second_signal </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// The closure you pass to use_effect will be rerun whenever any of the dependencies change without re-rendering the component\n</span><span style=\"color:#66d9ef;\">use_effect</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">move || </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">if </span><span style=\"color:#66d9ef;\">first_signal</span><span style=\"color:#f8f8f2;\">() </span><span style=\"color:#f92672;\">+ </span><span style=\"color:#ff80f4;\">1 </span><span style=\"color:#f92672;\">!= </span><span style=\"color:#66d9ef;\">second_signal</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">        second_signal.</span><span style=\"color:#66d9ef;\">set</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#66d9ef;\">first_signal</span><span style=\"color:#f8f8f2;\">() </span><span style=\"color:#f92672;\">+ </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}});\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// ✅ Deriving state with use_memo\n</span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> first_signal </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#8c8c8c;\">// Memos are specifically designed for derived state. If your state fits this pattern, use it.\n</span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> second_signal </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_memo</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">move || </span><span style=\"color:#66d9ef;\">first_signal</span><span style=\"color:#f8f8f2;\">() </span><span style=\"color:#f92672;\">+ </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">);</span></pre>\n",
            name: "anti_patterns.rs".to_string(),
        }
        h2 { id: "avoid-large-groups-of-state",
            Link {
                to: BookRoute::CookbookAntipatterns {
                    section: CookbookAntipatternsSection::AvoidLargeGroupsOfState,
                },
                class: "header",
                "Avoid Large Groups of State"
            }
        }
        p {
            "It can be tempting to have a single large state struct that contains all of your application's state. However, this can lead to issues:"
        }
        ul {
            li { "It can be easy to accidentally mutate the state in a way that causes an infinite loop" }
            li { "It can be difficult to reason about when and how the state is updated" }
            li {
                "It can lead to performance issues because many components will need to re-render when the state changes"
            }
        }
        p {
            "Instead, consider breaking your state into smaller, more manageable pieces. This will make it easier to reason about the state, avoid update loops, and improve performance."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">app</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// ❌ Large state struct\n</span><span style=\"color:#f8f8f2;\">    #[derive(Props, Clone, PartialEq)]\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">LargeState {{\n</span><span style=\"color:#f8f8f2;\">        users: Vec&lt;User&gt;,\n</span><span style=\"color:#f8f8f2;\">        logged_in: </span><span style=\"font-style:italic;color:#66d9ef;\">bool</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">        warnings: Vec&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    #[derive(Props, Clone, PartialEq)]\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">User {{\n</span><span style=\"color:#f8f8f2;\">        name: String,\n</span><span style=\"color:#f8f8f2;\">        email: String,\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> all_my_state </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| LargeState {{\n</span><span style=\"color:#f8f8f2;\">        users: vec![User {{\n</span><span style=\"color:#f8f8f2;\">            name: </span><span style=\"color:#ffee99;\">&quot;Alice&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">(),\n</span><span style=\"color:#f8f8f2;\">            email: </span><span style=\"color:#ffee99;\">&quot;alice@example.com&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">(),\n</span><span style=\"color:#f8f8f2;\">        }}],\n</span><span style=\"color:#f8f8f2;\">        logged_in: </span><span style=\"color:#ff80f4;\">true</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">        warnings: vec![],\n</span><span style=\"color:#f8f8f2;\">    }});\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">use_effect</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">move || </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// It is very easy to accidentally read and write to the state object if it contains all your state\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> read </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> all_my_state.</span><span style=\"color:#66d9ef;\">read</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> logged_in </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> read.logged_in;\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">if !</span><span style=\"color:#f8f8f2;\">logged_in {{\n</span><span style=\"color:#f8f8f2;\">            all_my_state\n</span><span style=\"color:#f8f8f2;\">                .</span><span style=\"color:#66d9ef;\">write_unchecked</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">                .warnings\n</span><span style=\"color:#f8f8f2;\">                .</span><span style=\"color:#66d9ef;\">push</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;You are not logged in&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">());\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }});\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// ✅ Use multiple signals to manage state\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> users </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| {{\n</span><span style=\"color:#f8f8f2;\">        vec![User {{\n</span><span style=\"color:#f8f8f2;\">            name: </span><span style=\"color:#ffee99;\">&quot;Alice&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">(),\n</span><span style=\"color:#f8f8f2;\">            email: </span><span style=\"color:#ffee99;\">&quot;alice@example.com&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">(),\n</span><span style=\"color:#f8f8f2;\">        }}]\n</span><span style=\"color:#f8f8f2;\">    }});\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> logged_in </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">true</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> warnings </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| vec![]);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">use_effect</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">move || </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// Now you can read and write to separate signals which will not cause issues\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">if !</span><span style=\"color:#66d9ef;\">logged_in</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">            warnings.</span><span style=\"color:#66d9ef;\">write</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#66d9ef;\">push</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;You are not logged in&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">());\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }});\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// ✅ Use memos to create derived state when larger states are unavoidable\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Notice we didn&#39;t split everything into separate signals. Users still make sense as a vec of data\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> users </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| {{\n</span><span style=\"color:#f8f8f2;\">        vec![User {{\n</span><span style=\"color:#f8f8f2;\">            name: </span><span style=\"color:#ffee99;\">&quot;Alice&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">(),\n</span><span style=\"color:#f8f8f2;\">            email: </span><span style=\"color:#ffee99;\">&quot;alice@example.com&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">(),\n</span><span style=\"color:#f8f8f2;\">        }}]\n</span><span style=\"color:#f8f8f2;\">    }});\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> logged_in </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">true</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> warnings: Signal&lt;Vec&lt;String&gt;&gt; </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| vec![]);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// In child components, you can use the memo to create derived that will only update when a specific part of the state changes\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// This will help you avoid unnecessary re-renders and infinite loops\n</span><span style=\"color:#f8f8f2;\">    #[component]\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">FirstUser</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">users</span><span style=\"color:#f8f8f2;\">: Signal&lt;Vec&lt;User&gt;&gt;) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> first_user </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_memo</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">move ||</span><span style=\"color:#f8f8f2;\"> users.</span><span style=\"color:#66d9ef;\">read</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#66d9ef;\">first</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#66d9ef;\">clone</span><span style=\"color:#f8f8f2;\">());\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        rsx! {{\n</span><span style=\"color:#f8f8f2;\">            div {{\n</span><span style=\"color:#f8f8f2;\">                </span><span style=\"color:#ffee99;\">&quot;First user: {{first_user().name}}&quot;\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        FirstUser {{\n</span><span style=\"color:#f8f8f2;\">            users\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "anti_patterns.rs".to_string(),
        }
        h2 { id: "running-non-deterministic-code-in-the-body-of-a-component",
            Link {
                to: BookRoute::CookbookAntipatterns {
                    section: CookbookAntipatternsSection::RunningNonDeterministicCodeInTheBodyOfAComponent,
                },
                class: "header",
                "Running Non-Deterministic Code in the Body of a Component"
            }
        }
        p {
            "If you have a component that contains non-deterministic code, that code should generally not be run in the body of the component. If it is put in the body of the component, it will be executed every time the component is re-rendered which can lead to performance issues."
        }
        p {
            "Instead, consider moving the non-deterministic code into a hook that only runs when the component is first created or an effect that reruns when dependencies change."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// ❌ Non-deterministic code in the body of a component\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">NonDeterministic</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">name</span><span style=\"color:#f8f8f2;\">: String) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> my_random_id </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">rand::random::&lt;</span><span style=\"font-style:italic;color:#66d9ef;\">u64</span><span style=\"color:#f8f8f2;\">&gt;();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#8c8c8c;\">// Id will change every single time the component is re-rendered\n</span><span style=\"color:#f8f8f2;\">            id: </span><span style=\"color:#ffee99;\">&quot;{{my_random_id}}&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;Hello {{name}}&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// ✅ Use a hook to run non-deterministic code\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">NonDeterministicHook</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">name</span><span style=\"color:#f8f8f2;\">: String) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// If you store the result of the non-deterministic code in a hook, it will stay the same between renders\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> my_random_id </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_hook</span><span style=\"color:#f8f8f2;\">(|| rand::random::&lt;</span><span style=\"font-style:italic;color:#66d9ef;\">u64</span><span style=\"color:#f8f8f2;\">&gt;());\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{\n</span><span style=\"color:#f8f8f2;\">            id: </span><span style=\"color:#ffee99;\">&quot;{{my_random_id}}&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;Hello {{name}}&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "anti_patterns.rs".to_string(),
        }
        h2 { id: "overly-permissive-partialeq-for-props",
            Link {
                to: BookRoute::CookbookAntipatterns {
                    section: CookbookAntipatternsSection::OverlyPermissivePartialeqForProps,
                },
                class: "header",
                "Overly Permissive PartialEq for Props"
            }
        }
        p {
            "You may have noticed that  "
            code { "Props" }
            " requires a  "
            code { "PartialEq" }
            " implementation. That  "
            code { "PartialEq" }
            " is very important for Dioxus to work correctly. It is used to determine if a component should re-render or not when the parent component re-renders."
        }
        p {
            "If you cannot derive  "
            code { "PartialEq" }
            " for your  "
            code { "Props" }
            ", you will need to implement it yourself. If you do implement  "
            code { "PartialEq" }
            ", make sure to return  "
            code { "false" }
            " any time the props change in a way that would cause the UI in the child component to change."
        }
        p {
            "In general, returning  "
            code { "false" }
            " from  "
            code { "PartialEq" }
            " if you aren't sure if the props have changed or not is better than returning  "
            code { "true" }
            ". This will help you avoid out of date UI in your child components."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// ❌ Permissive PartialEq for Props\n</span><span style=\"color:#f8f8f2;\">#[derive(Props, Clone)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">PermissivePartialEqProps {{\n</span><span style=\"color:#f8f8f2;\">    name: String,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// This will cause the component to **never** re-render when the parent component re-renders\n</span><span style=\"font-style:italic;color:#66d9ef;\">impl </span><span style=\"color:#f8f8f2;\">PartialEq </span><span style=\"color:#f92672;\">for </span><span style=\"color:#f8f8f2;\">PermissivePartialEqProps {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">eq</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">&amp;</span><span style=\"font-style:italic;color:#fd971f;\">self</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#f92672;\">_</span><span style=\"color:#f8f8f2;\">: </span><span style=\"color:#f92672;\">&amp;</span><span style=\"font-style:italic;color:#66d9ef;\">Self</span><span style=\"color:#f8f8f2;\">) -&gt; </span><span style=\"font-style:italic;color:#66d9ef;\">bool </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#ff80f4;\">true\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">PermissivePartialEq</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">name</span><span style=\"color:#f8f8f2;\">: PermissivePartialEqProps) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;Hello {{name.name}}&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">PermissivePartialEqParent</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> name </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ffee99;\">&quot;Alice&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">());\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        PermissivePartialEq {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#8c8c8c;\">// The PermissivePartialEq component will not get the updated value of name because the PartialEq implementation says that the props are the same\n</span><span style=\"color:#f8f8f2;\">            name: </span><span style=\"color:#66d9ef;\">name</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// ✅ Derive PartialEq for Props\n</span><span style=\"color:#f8f8f2;\">#[derive(Props, Clone, PartialEq)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">DerivePartialEqProps {{\n</span><span style=\"color:#f8f8f2;\">    name: String,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">DerivePartialEq</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">name</span><span style=\"color:#f8f8f2;\">: DerivePartialEqProps) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;Hello {{name.name}}&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">DerivePartialEqParent</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> name </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ffee99;\">&quot;Alice&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">());\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        DerivePartialEq {{\n</span><span style=\"color:#f8f8f2;\">            name: </span><span style=\"color:#66d9ef;\">name</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// ✅ Return false from PartialEq if you are unsure if the props have changed\n</span><span style=\"color:#f8f8f2;\">#[derive(Debug)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">NonPartialEq;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[derive(Props, Clone)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">RcPartialEqProps {{\n</span><span style=\"color:#f8f8f2;\">    name: Rc&lt;NonPartialEq&gt;,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">impl </span><span style=\"color:#f8f8f2;\">PartialEq </span><span style=\"color:#f92672;\">for </span><span style=\"color:#f8f8f2;\">RcPartialEqProps {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">eq</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">&amp;</span><span style=\"font-style:italic;color:#fd971f;\">self</span><span style=\"color:#f8f8f2;\">, </span><span style=\"font-style:italic;color:#fd971f;\">other</span><span style=\"color:#f8f8f2;\">: </span><span style=\"color:#f92672;\">&amp;</span><span style=\"font-style:italic;color:#66d9ef;\">Self</span><span style=\"color:#f8f8f2;\">) -&gt; </span><span style=\"font-style:italic;color:#66d9ef;\">bool </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// This will almost always return false because the Rc will likely point to a different value\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// Implementing PartialEq for NonPartialEq would be better, but if it is controlled by another library, it may not be possible\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// **Always** return false if you are unsure if the props have changed\n</span><span style=\"color:#f8f8f2;\">        std::rc::Rc::ptr_eq(</span><span style=\"color:#f92672;\">&amp;</span><span style=\"color:#f8f8f2;\">self.name, </span><span style=\"color:#f92672;\">&amp;</span><span style=\"color:#f8f8f2;\">other.name)\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">RcPartialEq</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">name</span><span style=\"color:#f8f8f2;\">: RcPartialEqProps) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;Hello {{name.name:?}}&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">RcPartialEqParent</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> name </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| Rc::new(NonPartialEq));\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        RcPartialEq {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#8c8c8c;\">// Generally, RcPartialEq will rerun even if the value of name hasn&#39;t actually changed because the Rc will point to a different value\n</span><span style=\"color:#f8f8f2;\">            name: </span><span style=\"color:#66d9ef;\">name</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "anti_patterns.rs".to_string(),
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum CookbookErrorHandlingSection {
    #[default]
    Empty,
    ErrorHandling,
    TheSimplestReturningNone,
    EarlyReturnOnResult,
    MatchResults,
    PassingErrorStatesThroughComponents,
    ThrowingErrors,
}
impl std::str::FromStr for CookbookErrorHandlingSection {
    type Err = CookbookErrorHandlingSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "error-handling" => Ok(Self::ErrorHandling),
            "the-simplest--returning-none" => Ok(Self::TheSimplestReturningNone),
            "early-return-on-result" => Ok(Self::EarlyReturnOnResult),
            "match-results" => Ok(Self::MatchResults),
            "passing-error-states-through-components" => {
                Ok(Self::PassingErrorStatesThroughComponents)
            }
            "throwing-errors" => Ok(Self::ThrowingErrors),
            _ => Err(CookbookErrorHandlingSectionParseError),
        }
    }
}
impl std::fmt::Display for CookbookErrorHandlingSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::ErrorHandling => f.write_str("error-handling"),
            Self::TheSimplestReturningNone => f.write_str("the-simplest--returning-none"),
            Self::EarlyReturnOnResult => f.write_str("early-return-on-result"),
            Self::MatchResults => f.write_str("match-results"),
            Self::PassingErrorStatesThroughComponents => {
                f.write_str("passing-error-states-through-components")
            }
            Self::ThrowingErrors => f.write_str("throwing-errors"),
        }
    }
}
#[derive(Debug)]
pub struct CookbookErrorHandlingSectionParseError;
impl std::fmt::Display for CookbookErrorHandlingSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of CookbookErrorHandlingSectionerror-handling, the-simplest--returning-none, early-return-on-result, match-results, passing-error-states-through-components, throwing-errors",
        )?;
        Ok(())
    }
}
impl std::error::Error for CookbookErrorHandlingSectionParseError {}
#[component(no_case_check)]
pub fn CookbookErrorHandling(section: CookbookErrorHandlingSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "error-handling",
            Link {
                to: BookRoute::CookbookErrorHandling {
                    section: CookbookErrorHandlingSection::ErrorHandling,
                },
                class: "header",
                "Error handling"
            }
        }
        p {
            "A selling point of Rust for web development is the reliability of always knowing where errors can occur and being forced to handle them"
        }
        p {
            "However, we haven't talked about error handling at all in this guide! In this chapter, we'll cover some strategies in handling errors to ensure your app never crashes."
        }
        h2 { id: "the-simplest--returning-none",
            Link {
                to: BookRoute::CookbookErrorHandling {
                    section: CookbookErrorHandlingSection::TheSimplestReturningNone,
                },
                class: "header",
                "The simplest – returning None"
            }
        }
        p {
            "Astute observers might have noticed that  "
            code { "Element" }
            " is actually a type alias for  "
            code { "Option<VNode>" }
            ". You don't need to know what a  "
            code { "VNode" }
            " is, but it's important to recognize that we could actually return nothing at all:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{  }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "error_handling.rs".to_string(),
        }
        p {
            "This lets us add in some syntactic sugar for operations we think "
            em { "shouldn't" }
            " fail, but we're still not confident enough to \"unwrap\" on."
        }
        blockquote {
            p {
                "The nature of  "
                code { "Option<VNode>" }
                " might change in the future as the  "
                code { "try" }
                " trait gets upgraded."
            }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// immediately return &quot;None&quot;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> name </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_hook</span><span style=\"color:#f8f8f2;\">(|| dioxus::Result::Ok(</span><span style=\"color:#ffee99;\">&quot;hi&quot;</span><span style=\"color:#f8f8f2;\">))</span><span style=\"color:#f92672;\">?</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    todo!()\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "error_handling.rs".to_string(),
        }
        h2 { id: "early-return-on-result",
            Link {
                to: BookRoute::CookbookErrorHandling {
                    section: CookbookErrorHandlingSection::EarlyReturnOnResult,
                },
                class: "header",
                "Early return on result"
            }
        }
        p {
            "Because Rust can't accept both Options and Results with the existing try infrastructure, you'll need to manually handle Results. This can be done by converting them into Options or by explicitly handling them. If you choose to convert your Result into an Option and bubble it with a  "
            code { "?" }
            ", keep in mind that if you do hit an error you will lose error information and nothing will be rendered for that component."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Convert Result to Option\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> name: </span><span style=\"font-style:italic;color:#66d9ef;\">i32 </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_hook</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ffee99;\">&quot;1.234&quot;</span><span style=\"color:#f8f8f2;\">).</span><span style=\"color:#66d9ef;\">parse</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#66d9ef;\">context</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;Failed to parse&quot;</span><span style=\"color:#f8f8f2;\">)</span><span style=\"color:#f92672;\">?</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Early return\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_hook</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ffee99;\">&quot;1.234&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> val: </span><span style=\"font-style:italic;color:#66d9ef;\">i32 </span><span style=\"color:#f92672;\">= match</span><span style=\"color:#f8f8f2;\"> count.</span><span style=\"color:#66d9ef;\">parse</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">Ok</span><span style=\"color:#f8f8f2;\">(val) </span><span style=\"color:#f92672;\">=&gt;</span><span style=\"color:#f8f8f2;\"> val,\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">Err</span><span style=\"color:#f8f8f2;\">(err) </span><span style=\"color:#f92672;\">=&gt; return </span><span style=\"color:#f8f8f2;\">rsx! {{ </span><span style=\"color:#ffee99;\">&quot;Parsing failed&quot; </span><span style=\"color:#f8f8f2;\">}},\n</span><span style=\"color:#f8f8f2;\">    }};\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    todo!()\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "error_handling.rs".to_string(),
        }
        p {
            "Notice that while hooks in Dioxus do not like being called in conditionals or loops, they "
            em { "are" }
            " okay with early returns. Returning an error state early is a completely valid way of handling errors."
        }
        h2 { id: "match-results",
            Link {
                to: BookRoute::CookbookErrorHandling {
                    section: CookbookErrorHandlingSection::MatchResults,
                },
                class: "header",
                "Match results"
            }
        }
        p {
            "The next \"best\" way of handling errors in Dioxus is to match on the error locally. This is the most robust way of handling errors, but it doesn't scale to architectures beyond a single component."
        }
        p { "To do this, we simply have an error state built into our component:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> error </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"font-style:italic;color:#66d9ef;\">None</span><span style=\"color:#f8f8f2;\">);</span></pre>\n",
            name: "error_handling.rs".to_string(),
        }
        p {
            "Whenever we perform an action that generates an error, we'll set that error state. We can then match on the error in a number of ways (early return, return Element, etc)."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Commandline</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> error </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"font-style:italic;color:#66d9ef;\">None</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">match </span><span style=\"color:#66d9ef;\">error</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">Some</span><span style=\"color:#f8f8f2;\">(error) </span><span style=\"color:#f92672;\">=&gt; </span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">            h1 {{ </span><span style=\"color:#ffee99;\">&quot;An error occurred&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }},\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">None </span><span style=\"color:#f92672;\">=&gt; </span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">            input {{ oninput: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> error.</span><span style=\"color:#66d9ef;\">set</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#66d9ef;\">Some</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;bad thing happened!&quot;</span><span style=\"color:#f8f8f2;\">)) }}\n</span><span style=\"color:#f8f8f2;\">        }},\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "error_handling.rs".to_string(),
        }
        h2 { id: "passing-error-states-through-components",
            Link {
                to: BookRoute::CookbookErrorHandling {
                    section: CookbookErrorHandlingSection::PassingErrorStatesThroughComponents,
                },
                class: "header",
                "Passing error states through components"
            }
        }
        p {
            "If you're dealing with a handful of components with minimal nesting, you can just pass the error handle into child components."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Commandline</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> error </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"font-style:italic;color:#66d9ef;\">None</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">if </span><span style=\"font-style:italic;color:#66d9ef;\">let Some</span><span style=\"color:#f8f8f2;\">(error) </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">error</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">return </span><span style=\"color:#f8f8f2;\">rsx! {{ </span><span style=\"color:#ffee99;\">&quot;An error occurred&quot; </span><span style=\"color:#f8f8f2;\">}};\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        Child {{ error }}\n</span><span style=\"color:#f8f8f2;\">        Child {{ error }}\n</span><span style=\"color:#f8f8f2;\">        Child {{ error }}\n</span><span style=\"color:#f8f8f2;\">        Child {{ error }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Child</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">error</span><span style=\"color:#f8f8f2;\">: Signal&lt;Option&lt;</span><span style=\"color:#f92672;\">&amp;&#39;static </span><span style=\"font-style:italic;color:#66d9ef;\">str</span><span style=\"color:#f8f8f2;\">&gt;&gt;) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        input {{ oninput: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> error.</span><span style=\"color:#66d9ef;\">set</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#66d9ef;\">Some</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;bad thing happened!&quot;</span><span style=\"color:#f8f8f2;\">)) }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "error_handling.rs".to_string(),
        }
        p {
            "Much like before, our child components can manually set the error during their own actions. The advantage to this pattern is that we can easily isolate error states to a few components at a time, making our app more predictable and robust."
        }
        h2 { id: "throwing-errors",
            Link {
                to: BookRoute::CookbookErrorHandling {
                    section: CookbookErrorHandlingSection::ThrowingErrors,
                },
                class: "header",
                "Throwing errors"
            }
        }
        p {
            "Dioxus provides a much easier way to handle errors: throwing them. Throwing errors combines the best parts of an error state and early return: you can easily throw and error with  "
            code { "?" }
            ", but you keep information about the error so that you can handle it in a parent component."
        }
        p {
            "You can call  "
            code { "throw" }
            " on any  "
            code { "Result" }
            " type that implements  "
            code { "Debug" }
            " to turn it into an error state and then use  "
            code { "?" }
            " to return early if you do hit an error. You can capture the error state with an  "
            code { "ErrorBoundary" }
            " component that will render the a different component if an error is thrown in any of its children."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Parent</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        ErrorBoundary {{\n</span><span style=\"color:#f8f8f2;\">            handle_error: |</span><span style=\"font-style:italic;color:#fd971f;\">ctx</span><span style=\"color:#f8f8f2;\">: ErrorContext| {{\n</span><span style=\"color:#f8f8f2;\">                </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> error </span><span style=\"color:#f92672;\">= &amp;</span><span style=\"color:#f8f8f2;\">ctx.</span><span style=\"color:#66d9ef;\">errors</span><span style=\"color:#f8f8f2;\">()[</span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">];\n</span><span style=\"color:#f8f8f2;\">                rsx! {{\n</span><span style=\"color:#f8f8f2;\">                </span><span style=\"color:#ffee99;\">&quot;Oops, we encountered an error. Please report {{error}} to the developer of this application&quot;\n</span><span style=\"color:#f8f8f2;\">                }}\n</span><span style=\"color:#f8f8f2;\">            }},\n</span><span style=\"color:#f8f8f2;\">            ThrowsError {{}}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">ThrowsError</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> name: </span><span style=\"font-style:italic;color:#66d9ef;\">i32 </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_hook</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ffee99;\">&quot;1.234&quot;</span><span style=\"color:#f8f8f2;\">).</span><span style=\"color:#66d9ef;\">parse</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#66d9ef;\">context</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;Failed to parse&quot;</span><span style=\"color:#f8f8f2;\">)</span><span style=\"color:#f92672;\">?</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    todo!()\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "error_handling.rs".to_string(),
        }
        p {
            "You can even nest  "
            code { "ErrorBoundary" }
            " components to capture errors at different levels of your app."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        ErrorBoundary {{\n</span><span style=\"color:#f8f8f2;\">            handle_error: |</span><span style=\"font-style:italic;color:#fd971f;\">ctx</span><span style=\"color:#f8f8f2;\">: ErrorContext| {{\n</span><span style=\"color:#f8f8f2;\">                </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> error </span><span style=\"color:#f92672;\">= &amp;</span><span style=\"color:#f8f8f2;\">ctx.</span><span style=\"color:#66d9ef;\">errors</span><span style=\"color:#f8f8f2;\">()[</span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">];\n</span><span style=\"color:#f8f8f2;\">                rsx! {{\n</span><span style=\"color:#f8f8f2;\">                </span><span style=\"color:#ffee99;\">&quot;Hmm, something went wrong. Please report {{error}} to the developer of this application&quot;\n</span><span style=\"color:#f8f8f2;\">                }}\n</span><span style=\"color:#f8f8f2;\">            }},\n</span><span style=\"color:#f8f8f2;\">            Parent {{}}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Parent</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        ErrorBoundary {{\n</span><span style=\"color:#f8f8f2;\">            handle_error: |</span><span style=\"font-style:italic;color:#fd971f;\">ctx</span><span style=\"color:#f8f8f2;\">: ErrorContext| {{\n</span><span style=\"color:#f8f8f2;\">                </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> error </span><span style=\"color:#f92672;\">= &amp;</span><span style=\"color:#f8f8f2;\">ctx.</span><span style=\"color:#66d9ef;\">errors</span><span style=\"color:#f8f8f2;\">()[</span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">];\n</span><span style=\"color:#f8f8f2;\">                rsx! {{\n</span><span style=\"color:#f8f8f2;\">                </span><span style=\"color:#ffee99;\">&quot;The child component encountered an error: {{error}}&quot;\n</span><span style=\"color:#f8f8f2;\">                }}\n</span><span style=\"color:#f8f8f2;\">            }},\n</span><span style=\"color:#f8f8f2;\">            ThrowsError {{}}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">ThrowsError</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> name: </span><span style=\"font-style:italic;color:#66d9ef;\">i32 </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_hook</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ffee99;\">&quot;1.234&quot;</span><span style=\"color:#f8f8f2;\">).</span><span style=\"color:#66d9ef;\">parse</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#66d9ef;\">context</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;Failed to parse&quot;</span><span style=\"color:#f8f8f2;\">)</span><span style=\"color:#f92672;\">?</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    todo!()\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "error_handling.rs".to_string(),
        }
        p {
            "This pattern is particularly helpful whenever your code generates a non-recoverable error. You can gracefully capture these \"global\" error states without panicking or handling state for each error yourself."
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum CookbookIntegrationsIndexSection {
    #[default]
    Empty,
}
impl std::str::FromStr for CookbookIntegrationsIndexSection {
    type Err = CookbookIntegrationsIndexSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            _ => Err(CookbookIntegrationsIndexSectionParseError),
        }
    }
}
impl std::fmt::Display for CookbookIntegrationsIndexSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
        }
    }
}
#[derive(Debug)]
pub struct CookbookIntegrationsIndexSectionParseError;
impl std::fmt::Display for CookbookIntegrationsIndexSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str("Invalid section name. Expected one of CookbookIntegrationsIndexSection")?;
        Ok(())
    }
}
impl std::error::Error for CookbookIntegrationsIndexSectionParseError {}
#[component(no_case_check)]
pub fn CookbookIntegrationsIndex(
    section: CookbookIntegrationsIndexSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        p {
            "This section of the guide provides getting started guides for common tools used with Dioxus."
        }
        ul {
            li {
                Link {
                    to: BookRoute::CookbookIntegrationsLogging {
                        section: CookbookIntegrationsLoggingSection::Empty,
                    },
                    "Logging"
                }
            }
            li {
                Link {
                    to: BookRoute::CookbookIntegrationsInternationalization {
                        section: CookbookIntegrationsInternationalizationSection::Empty,
                    },
                    "Internationalization"
                }
            }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum CookbookIntegrationsLoggingSection {
    #[default]
    Empty,
    Logging,
    DioxusLogger,
    TheTracingCrate,
    PlatformIntricacies,
    ViewingLogs,
    FinalNotes,
}
impl std::str::FromStr for CookbookIntegrationsLoggingSection {
    type Err = CookbookIntegrationsLoggingSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "logging" => Ok(Self::Logging),
            "dioxus-logger" => Ok(Self::DioxusLogger),
            "the-tracing-crate" => Ok(Self::TheTracingCrate),
            "platform-intricacies" => Ok(Self::PlatformIntricacies),
            "viewing-logs" => Ok(Self::ViewingLogs),
            "final-notes" => Ok(Self::FinalNotes),
            _ => Err(CookbookIntegrationsLoggingSectionParseError),
        }
    }
}
impl std::fmt::Display for CookbookIntegrationsLoggingSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Logging => f.write_str("logging"),
            Self::DioxusLogger => f.write_str("dioxus-logger"),
            Self::TheTracingCrate => f.write_str("the-tracing-crate"),
            Self::PlatformIntricacies => f.write_str("platform-intricacies"),
            Self::ViewingLogs => f.write_str("viewing-logs"),
            Self::FinalNotes => f.write_str("final-notes"),
        }
    }
}
#[derive(Debug)]
pub struct CookbookIntegrationsLoggingSectionParseError;
impl std::fmt::Display for CookbookIntegrationsLoggingSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of CookbookIntegrationsLoggingSectionlogging, dioxus-logger, the-tracing-crate, platform-intricacies, viewing-logs, final-notes",
        )?;
        Ok(())
    }
}
impl std::error::Error for CookbookIntegrationsLoggingSectionParseError {}
#[component(no_case_check)]
pub fn CookbookIntegrationsLogging(
    section: CookbookIntegrationsLoggingSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "logging",
            Link {
                to: BookRoute::CookbookIntegrationsLogging {
                    section: CookbookIntegrationsLoggingSection::Logging,
                },
                class: "header",
                "Logging"
            }
        }
        p {
            "Dioxus has a wide range of supported platforms, each with their own logging requirements. We'll discuss the different options available for your projects."
        }
        h2 { id: "dioxus-logger",
            Link {
                to: BookRoute::CookbookIntegrationsLogging {
                    section: CookbookIntegrationsLoggingSection::DioxusLogger,
                },
                class: "header",
                "Dioxus Logger"
            }
        }
        p {
            "Dioxus provides a first-party logger as part of  "
            code { "launch" }
            ". This sets up a tracing subscriber that cleanly integrates with the Dioxus CLI and platforms like Web and Mobile. In development mode, the  "
            code { "Debug" }
            " tracing level is set, and in release only the  "
            code { "Info" }
            " level is set."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">main</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    dioxus::launch(|| {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// Will only log in &quot;dev&quot; mode\n</span><span style=\"color:#f8f8f2;\">        tracing::debug</span><span style=\"color:#f92672;\">!</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;Rendering app!&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// Will log in dev and release\n</span><span style=\"color:#f8f8f2;\">        tracing::info</span><span style=\"color:#f92672;\">!</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;Rendering app!&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        rsx! {{}}\n</span><span style=\"color:#f8f8f2;\">    }})\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        p {
            "To override the default or initialize the logger before  "
            code { "launch" }
            ", you can use the  "
            code { "init" }
            " function yourself:"
        }
        p {
            "To use Dioxus Logger, call the  "
            code { "init()" }
            " function:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">tracing::Level;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">main</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Init logger\n</span><span style=\"color:#f8f8f2;\">    dioxus_logger::init(Level::</span><span style=\"color:#ff80f4;\">INFO</span><span style=\"color:#f8f8f2;\">).</span><span style=\"color:#66d9ef;\">expect</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;failed to init logger&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Dioxus launch code\n</span><span style=\"color:#f8f8f2;\">    dioxus::launch(|| rsx! {{}})\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        h2 { id: "the-tracing-crate",
            Link {
                to: BookRoute::CookbookIntegrationsLogging {
                    section: CookbookIntegrationsLoggingSection::TheTracingCrate,
                },
                class: "header",
                "The Tracing Crate"
            }
        }
        p {
            "The "
            Link { to: "https://crates.io/crates/tracing", "Tracing" }
            " crate is the logging interface that the dioxus-logger uses. It is not required to use the Tracing crate, but you will not receive logs from the Dioxus library."
        }
        p {
            "The Tracing crate provides a variety of simple  "
            code { "println" }
            "-like macros with varying levels of severity."
            " "
            "The available macros are as follows with the highest severity on the bottom:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">main</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    tracing::trace</span><span style=\"color:#f92672;\">!</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;trace&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">    tracing::debug</span><span style=\"color:#f92672;\">!</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;debug&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">    tracing::info</span><span style=\"color:#f92672;\">!</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;info&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">    tracing::warn</span><span style=\"color:#f92672;\">!</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;warn&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">    tracing::error</span><span style=\"color:#f92672;\">!</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;error&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        p {
            "All the loggers provided on this page are, besides configuration and initialization, interfaced using these macros. Often you will also utilize the Tracing crate's  "
            code { "Level" }
            " enum. This enum usually represents the maximum log severity you want your application to emit and can be loaded from a variety of sources such as configuration file, environment variable, and more."
        }
        p {
            "For more information, visit the Tracing crate's "
            Link { to: "https://docs.rs/tracing/latest/tracing/", "docs" }
            "."
        }
        h2 { id: "platform-intricacies",
            Link {
                to: BookRoute::CookbookIntegrationsLogging {
                    section: CookbookIntegrationsLoggingSection::PlatformIntricacies,
                },
                class: "header",
                "Platform Intricacies"
            }
        }
        p {
            "On web, Dioxus Logger will use "
            Link { to: "https://crates.io/crates/tracing-wasm", "tracing-wasm" }
            ". On Desktop and server-based targets, Dioxus Logger will use "
            Link { to: "https://crates.io/crates/tracing-subscriber", "tracing-subscriber" }
            "'s "
            code { "FmtSubscriber" }
            "."
        }
        h2 { id: "viewing-logs",
            Link {
                to: BookRoute::CookbookIntegrationsLogging {
                    section: CookbookIntegrationsLoggingSection::ViewingLogs,
                },
                class: "header",
                "Viewing Logs"
            }
        }
        p { "Android logs are sent to logcat. To use logcat through the Android debugger, run:" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">adb </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">d logcat</span></pre>\n" }
        p { "Your Android device will need developer options/usb debugging enabled." }
        p {
            "For more information, visit android_logger's "
            Link { to: "https://docs.rs/android_logger/latest/android_logger/", "docs" }
            "."
        }
        p { "iOS logs are sent to oslog." }
        p {
            "For more information, visit "
            Link { to: "https://crates.io/crates/oslog", "oslog" }
            "."
        }
        h4 { id: "final-notes",
            Link {
                to: BookRoute::CookbookIntegrationsLogging {
                    section: CookbookIntegrationsLoggingSection::FinalNotes,
                },
                class: "header",
                "Final Notes"
            }
        }
        p {
            "Dioxus Logger is the preferred logger to use with Dioxus if it suites your needs. There are more features to come. If there are any feature suggestions or issues with Dioxus Logger, feel free to reach out on the "
            Link { to: "https://discord.gg/XgGxMSkvUM", "Dioxus Discord Server" }
            "!"
        }
        p {
            "For more information, visit Dioxus Logger's "
            Link { to: "https://docs.rs/dioxus-logger/latest/dioxus_logger/", "docs" }
            "."
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum CookbookIntegrationsInternationalizationSection {
    #[default]
    Empty,
    Internationalization,
}
impl std::str::FromStr for CookbookIntegrationsInternationalizationSection {
    type Err = CookbookIntegrationsInternationalizationSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "internationalization" => Ok(Self::Internationalization),
            _ => Err(CookbookIntegrationsInternationalizationSectionParseError),
        }
    }
}
impl std::fmt::Display for CookbookIntegrationsInternationalizationSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Internationalization => f.write_str("internationalization"),
        }
    }
}
#[derive(Debug)]
pub struct CookbookIntegrationsInternationalizationSectionParseError;
impl std::fmt::Display for CookbookIntegrationsInternationalizationSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of CookbookIntegrationsInternationalizationSectioninternationalization",
        )?;
        Ok(())
    }
}
impl std::error::Error for CookbookIntegrationsInternationalizationSectionParseError {}
#[component(no_case_check)]
pub fn CookbookIntegrationsInternationalization(
    section: CookbookIntegrationsInternationalizationSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "internationalization",
            Link {
                to: BookRoute::CookbookIntegrationsInternationalization {
                    section: CookbookIntegrationsInternationalizationSection::Internationalization,
                },
                class: "header",
                "Internationalization"
            }
        }
        p {
            "If your application supports multiple languages, the "
            Link { to: "https://github.com/dioxus-community/dioxus-i18n", "dioxus-i18n" }
            " crate contains helpers to make working with translations in your application easier."
        }
        p {
            "You can find an example "
            Link { to: "https://github.com/dioxus-community/dioxus-i18n/blob/main/examples/dioxus-desktop.rs",
                "here"
            }
            "."
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum CookbookStateIndexSection {
    #[default]
    Empty,
    StateCookbook,
}
impl std::str::FromStr for CookbookStateIndexSection {
    type Err = CookbookStateIndexSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "state-cookbook" => Ok(Self::StateCookbook),
            _ => Err(CookbookStateIndexSectionParseError),
        }
    }
}
impl std::fmt::Display for CookbookStateIndexSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::StateCookbook => f.write_str("state-cookbook"),
        }
    }
}
#[derive(Debug)]
pub struct CookbookStateIndexSectionParseError;
impl std::fmt::Display for CookbookStateIndexSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of CookbookStateIndexSectionstate-cookbook",
        )?;
        Ok(())
    }
}
impl std::error::Error for CookbookStateIndexSectionParseError {}
#[component(no_case_check)]
pub fn CookbookStateIndex(section: CookbookStateIndexSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "state-cookbook",
            Link {
                to: BookRoute::CookbookStateIndex {
                    section: CookbookStateIndexSection::StateCookbook,
                },
                class: "header",
                "State Cookbook"
            }
        }
        ul {
            li {
                Link {
                    to: BookRoute::CookbookStateExternalIndex {
                        section: CookbookStateExternalIndexSection::Empty,
                    },
                    "External State"
                }
            }
            li {
                Link {
                    to: BookRoute::CookbookStateCustomHooksIndex {
                        section: CookbookStateCustomHooksIndexSection::Empty,
                    },
                    "Custom Hook"
                }
            }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum CookbookStateExternalIndexSection {
    #[default]
    Empty,
    WorkingWithExternalState,
    WorkingWithNonReactiveState,
    MakingReactiveStateExternal,
}
impl std::str::FromStr for CookbookStateExternalIndexSection {
    type Err = CookbookStateExternalIndexSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "working-with-external-state" => Ok(Self::WorkingWithExternalState),
            "working-with-non-reactive-state" => Ok(Self::WorkingWithNonReactiveState),
            "making-reactive-state-external" => Ok(Self::MakingReactiveStateExternal),
            _ => Err(CookbookStateExternalIndexSectionParseError),
        }
    }
}
impl std::fmt::Display for CookbookStateExternalIndexSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::WorkingWithExternalState => f.write_str("working-with-external-state"),
            Self::WorkingWithNonReactiveState => f.write_str("working-with-non-reactive-state"),
            Self::MakingReactiveStateExternal => f.write_str("making-reactive-state-external"),
        }
    }
}
#[derive(Debug)]
pub struct CookbookStateExternalIndexSectionParseError;
impl std::fmt::Display for CookbookStateExternalIndexSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of CookbookStateExternalIndexSectionworking-with-external-state, working-with-non-reactive-state, making-reactive-state-external",
        )?;
        Ok(())
    }
}
impl std::error::Error for CookbookStateExternalIndexSectionParseError {}
#[component(no_case_check)]
pub fn CookbookStateExternalIndex(
    section: CookbookStateExternalIndexSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "working-with-external-state",
            Link {
                to: BookRoute::CookbookStateExternalIndex {
                    section: CookbookStateExternalIndexSection::WorkingWithExternalState,
                },
                class: "header",
                "Working with External State"
            }
        }
        p {
            "This guide will help you integrate your Dioxus application with some external state like a different thread or a websocket connection."
        }
        h2 { id: "working-with-non-reactive-state",
            Link {
                to: BookRoute::CookbookStateExternalIndex {
                    section: CookbookStateExternalIndexSection::WorkingWithNonReactiveState,
                },
                class: "header",
                "Working with non-reactive State"
            }
        }
        p {
            Link {
                to: BookRoute::ReferenceUseCoroutine {
                    section: ReferenceUseCoroutineSection::Empty,
                },
                "Coroutines"
            }
            " are great tool for dealing with non-reactive (state you don't render directly) state within your application."
        }
        p {
            "You can store your state inside the coroutine async block and communicate with the coroutine with messages from any child components."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// import futures::StreamExt to use the next() method\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">futures::StreamExt;\n</span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> response_state </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"font-style:italic;color:#66d9ef;\">None</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> tx </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_coroutine</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">move |mut</span><span style=\"color:#f8f8f2;\"> rx</span><span style=\"color:#f92672;\">|</span><span style=\"color:#f8f8f2;\"> async </span><span style=\"color:#f92672;\">move </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Define your state before the loop\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> state </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">reqwest::Client::new();\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> cache: HashMap&lt;String, String&gt; </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">HashMap::new();\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">loop </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// Loop and wait for the next message\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">if </span><span style=\"font-style:italic;color:#66d9ef;\">let Some</span><span style=\"color:#f8f8f2;\">(request) </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> rx.</span><span style=\"color:#66d9ef;\">next</span><span style=\"color:#f8f8f2;\">().await {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#8c8c8c;\">// Resolve the message\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> response </span><span style=\"color:#f92672;\">= if </span><span style=\"font-style:italic;color:#66d9ef;\">let Some</span><span style=\"color:#f8f8f2;\">(response) </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> cache.</span><span style=\"color:#66d9ef;\">get</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">&amp;</span><span style=\"color:#f8f8f2;\">request) {{\n</span><span style=\"color:#f8f8f2;\">                response.</span><span style=\"color:#66d9ef;\">clone</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">            }} </span><span style=\"color:#f92672;\">else </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">                </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> response </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> state\n</span><span style=\"color:#f8f8f2;\">                    .</span><span style=\"color:#66d9ef;\">get</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">&amp;</span><span style=\"color:#f8f8f2;\">request)\n</span><span style=\"color:#f8f8f2;\">                    .</span><span style=\"color:#66d9ef;\">send</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">                    .await\n</span><span style=\"color:#f8f8f2;\">                    .</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">                    .</span><span style=\"color:#66d9ef;\">text</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">                    .await\n</span><span style=\"color:#f8f8f2;\">                    .</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">                cache.</span><span style=\"color:#66d9ef;\">insert</span><span style=\"color:#f8f8f2;\">(request, response.</span><span style=\"color:#66d9ef;\">clone</span><span style=\"color:#f8f8f2;\">());\n</span><span style=\"color:#f8f8f2;\">                response\n</span><span style=\"color:#f8f8f2;\">            }};\n</span><span style=\"color:#f8f8f2;\">            response_state.</span><span style=\"color:#66d9ef;\">set</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#66d9ef;\">Some</span><span style=\"color:#f8f8f2;\">(response));\n</span><span style=\"color:#f8f8f2;\">        }} </span><span style=\"color:#f92672;\">else </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#f92672;\">break</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}});\n</span><span style=\"color:#8c8c8c;\">// Send a message to the coroutine\n</span><span style=\"color:#f8f8f2;\">tx.</span><span style=\"color:#66d9ef;\">send</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;https://example.com&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">());\n</span><span style=\"color:#8c8c8c;\">// Get the current state of the coroutine\n</span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> response </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> response_state.</span><span style=\"color:#66d9ef;\">read</span><span style=\"color:#f8f8f2;\">();</span></pre>\n",
            name: "use_coroutine.rs".to_string(),
        }
        h2 { id: "making-reactive-state-external",
            Link {
                to: BookRoute::CookbookStateExternalIndex {
                    section: CookbookStateExternalIndexSection::MakingReactiveStateExternal,
                },
                class: "header",
                "Making Reactive State External"
            }
        }
        p {
            "If you have some reactive state (state that is rendered), that you want to modify from another thread, you can use a signal that is sync. Signals take an optional second generic value with information about syncness. Sync signals have a slightly higher overhead than thread local signals, but they can be used in a multithreaded environment."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">main</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">launch</span><span style=\"color:#f8f8f2;\">(app);\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">app</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> signal </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal_sync</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">use_hook</span><span style=\"color:#f8f8f2;\">(|| {{\n</span><span style=\"color:#f8f8f2;\">        std::thread::spawn(</span><span style=\"color:#f92672;\">move || loop </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">            std::thread::sleep(std::time::Duration::from_secs(</span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">));\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#8c8c8c;\">// You can easily update the signal from a different thread\n</span><span style=\"color:#f8f8f2;\">            signal </span><span style=\"color:#f92672;\">+= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">        }});\n</span><span style=\"color:#f8f8f2;\">    }});\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        button {{ onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> signal </span><span style=\"color:#f92672;\">+= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;Increase&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#ffee99;\">&quot;{{signal}}&quot;\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "sync_signal.rs".to_string(),
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum CookbookStateCustomHooksIndexSection {
    #[default]
    Empty,
    CustomHooks,
    ComposingHooks,
    CustomHookLogic,
}
impl std::str::FromStr for CookbookStateCustomHooksIndexSection {
    type Err = CookbookStateCustomHooksIndexSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "custom-hooks" => Ok(Self::CustomHooks),
            "composing-hooks" => Ok(Self::ComposingHooks),
            "custom-hook-logic" => Ok(Self::CustomHookLogic),
            _ => Err(CookbookStateCustomHooksIndexSectionParseError),
        }
    }
}
impl std::fmt::Display for CookbookStateCustomHooksIndexSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::CustomHooks => f.write_str("custom-hooks"),
            Self::ComposingHooks => f.write_str("composing-hooks"),
            Self::CustomHookLogic => f.write_str("custom-hook-logic"),
        }
    }
}
#[derive(Debug)]
pub struct CookbookStateCustomHooksIndexSectionParseError;
impl std::fmt::Display for CookbookStateCustomHooksIndexSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of CookbookStateCustomHooksIndexSectioncustom-hooks, composing-hooks, custom-hook-logic",
        )?;
        Ok(())
    }
}
impl std::error::Error for CookbookStateCustomHooksIndexSectionParseError {}
#[component(no_case_check)]
pub fn CookbookStateCustomHooksIndex(
    section: CookbookStateCustomHooksIndexSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "custom-hooks",
            Link {
                to: BookRoute::CookbookStateCustomHooksIndex {
                    section: CookbookStateCustomHooksIndexSection::CustomHooks,
                },
                class: "header",
                "Custom Hooks"
            }
        }
        p {
            "Hooks are a great way to encapsulate business logic. If none of the existing hooks work for your problem, you can write your own."
        }
        p {
            "When writing your hook, you can make a function that starts with  "
            code { "use_" }
            " and takes any arguments you need. You can then use the  "
            code { "use_hook" }
            " method to create a hook that will be called the first time the component is rendered."
        }
        h2 { id: "composing-hooks",
            Link {
                to: BookRoute::CookbookStateCustomHooksIndex {
                    section: CookbookStateCustomHooksIndexSection::ComposingHooks,
                },
                class: "header",
                "Composing Hooks"
            }
        }
        p {
            "To avoid repetition, you can encapsulate business logic based on existing hooks to create a new hook."
        }
        p {
            "For example, if many components need to access an  "
            code { "AppSettings" }
            " struct, you can create a \"shortcut\" hook:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">use_settings</span><span style=\"color:#f8f8f2;\">() -&gt; Signal&lt;AppSettings&gt; {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">consume_context</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "hooks_composed.rs".to_string(),
        }
        p {
            "Or if you want to wrap a hook that persists reloads with the storage API, you can build on top of the use_signal hook to work with mutable state:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">gloo_storage::{{LocalStorage, Storage}};\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">serde::{{de::DeserializeOwned, Serialize}};\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">/// A persistent storage hook that can be used to store data across application reloads.\n</span><span style=\"color:#f8f8f2;\">#[allow(clippy::needless_return)]\n</span><span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">use_persistent</span><span style=\"color:#f8f8f2;\">&lt;T: Serialize </span><span style=\"color:#f92672;\">+</span><span style=\"color:#f8f8f2;\"> DeserializeOwned </span><span style=\"color:#f92672;\">+</span><span style=\"color:#f8f8f2;\"> Default </span><span style=\"color:#f92672;\">+ &#39;static</span><span style=\"color:#f8f8f2;\">&gt;(\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// A unique key for the storage entry\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#fd971f;\">key</span><span style=\"color:#f8f8f2;\">: impl ToString,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// A function that returns the initial value if the storage entry is empty\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#fd971f;\">init</span><span style=\"color:#f8f8f2;\">: impl FnOnce() -&gt; T,\n</span><span style=\"color:#f8f8f2;\">) -&gt; UsePersistent&lt;T&gt; {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Use the use_signal hook to create a mutable state for the storage entry\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> state </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">move || </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// This closure will run when the hook is created\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> key </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> key.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> value </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">LocalStorage::get(key.</span><span style=\"color:#66d9ef;\">as_str</span><span style=\"color:#f8f8f2;\">()).</span><span style=\"color:#66d9ef;\">ok</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#66d9ef;\">unwrap_or_else</span><span style=\"color:#f8f8f2;\">(init);\n</span><span style=\"color:#f8f8f2;\">        StorageEntry {{ key, value }}\n</span><span style=\"color:#f8f8f2;\">    }});\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Wrap the state in a new struct with a custom API\n</span><span style=\"color:#f8f8f2;\">    UsePersistent {{ inner: state }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">StorageEntry&lt;T&gt; {{\n</span><span style=\"color:#f8f8f2;\">    key: String,\n</span><span style=\"color:#f8f8f2;\">    value: T,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">/// Storage that persists across application reloads\n</span><span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">UsePersistent&lt;T: </span><span style=\"color:#f92672;\">&#39;static</span><span style=\"color:#f8f8f2;\">&gt; {{\n</span><span style=\"color:#f8f8f2;\">    inner: Signal&lt;StorageEntry&lt;T&gt;&gt;,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">impl</span><span style=\"color:#f8f8f2;\">&lt;T&gt; Clone </span><span style=\"color:#f92672;\">for </span><span style=\"color:#f8f8f2;\">UsePersistent&lt;T&gt; {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">clone</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">&amp;</span><span style=\"font-style:italic;color:#fd971f;\">self</span><span style=\"color:#f8f8f2;\">) -&gt; </span><span style=\"font-style:italic;color:#66d9ef;\">Self </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">self\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">impl</span><span style=\"color:#f8f8f2;\">&lt;T&gt; Copy </span><span style=\"color:#f92672;\">for </span><span style=\"color:#f8f8f2;\">UsePersistent&lt;T&gt; {{}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">impl</span><span style=\"color:#f8f8f2;\">&lt;T: Serialize </span><span style=\"color:#f92672;\">+</span><span style=\"color:#f8f8f2;\"> DeserializeOwned </span><span style=\"color:#f92672;\">+</span><span style=\"color:#f8f8f2;\"> Clone </span><span style=\"color:#f92672;\">+ &#39;static</span><span style=\"color:#f8f8f2;\">&gt; UsePersistent&lt;T&gt; {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// Returns a reference to the value\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">get</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">&amp;</span><span style=\"font-style:italic;color:#fd971f;\">self</span><span style=\"color:#f8f8f2;\">) -&gt; T {{\n</span><span style=\"color:#f8f8f2;\">        self.inner.</span><span style=\"color:#66d9ef;\">read</span><span style=\"color:#f8f8f2;\">().value.</span><span style=\"color:#66d9ef;\">clone</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// Sets the value\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">set</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">&amp;mut </span><span style=\"font-style:italic;color:#fd971f;\">self</span><span style=\"color:#f8f8f2;\">, </span><span style=\"font-style:italic;color:#fd971f;\">value</span><span style=\"color:#f8f8f2;\">: T) {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> inner </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">self.inner.</span><span style=\"color:#66d9ef;\">write</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// Write the new value to local storage\n</span><span style=\"color:#f8f8f2;\">        LocalStorage::set(inner.key.</span><span style=\"color:#66d9ef;\">as_str</span><span style=\"color:#f8f8f2;\">(), </span><span style=\"color:#f92672;\">&amp;</span><span style=\"color:#f8f8f2;\">value);\n</span><span style=\"color:#f8f8f2;\">        inner.value </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> value;\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "hooks_composed.rs".to_string(),
        }
        h2 { id: "custom-hook-logic",
            Link {
                to: BookRoute::CookbookStateCustomHooksIndex {
                    section: CookbookStateCustomHooksIndexSection::CustomHookLogic,
                },
                class: "header",
                "Custom Hook Logic"
            }
        }
        p {
            "You can use "
            Link { to: "https://docs.rs/dioxus/latest/dioxus/prelude/fn.use_hook.html",
                code { "use_hook" }
            }
            " to build your own hooks. In fact, this is what all the standard hooks are built on!"
        }
        p {
            code { "use_hook" }
            " accepts a single closure for initializing the hook. It will be only run the first time the component is rendered. The return value of that closure will be used as the value of the hook – Dioxus will take it, and store it for as long as the component is alive. On every render (not just the first one!), you will get a reference to this value."
        }
        blockquote {
            p {
                "Note: You can use the  "
                code { "use_on_destroy" }
                " hook to clean up any resources the hook uses when the component is destroyed."
            }
        }
        p {
            "Inside the initialization closure, you will typically make calls to other  "
            code { "cx" }
            " methods. For example:"
        }
        ul {
            li {
                "The "
                code { "use_signal" }
                " hook tracks state in the hook value, and uses "
                Link { to: "https://docs.rs/dioxus/latest/dioxus/prelude/fn.schedule_update.html",
                    code { "schedule_update" }
                }
                " to make Dioxus re-render the component whenever it changes."
            }
        }
        p {
            "Here is a simplified implementation of the  "
            code { "use_signal" }
            " hook:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">std::cell::RefCell;\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">std::rc::Rc;\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">std::sync::Arc;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">Signal&lt;T&gt; {{\n</span><span style=\"color:#f8f8f2;\">    value: Rc&lt;RefCell&lt;T&gt;&gt;,\n</span><span style=\"color:#f8f8f2;\">    update: Arc&lt;dyn Fn()&gt;,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">impl</span><span style=\"color:#f8f8f2;\">&lt;T&gt; Clone </span><span style=\"color:#f92672;\">for </span><span style=\"color:#f8f8f2;\">Signal&lt;T&gt; {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">clone</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">&amp;</span><span style=\"font-style:italic;color:#fd971f;\">self</span><span style=\"color:#f8f8f2;\">) -&gt; </span><span style=\"font-style:italic;color:#66d9ef;\">Self </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">Self </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">            value: self.value.</span><span style=\"color:#66d9ef;\">clone</span><span style=\"color:#f8f8f2;\">(),\n</span><span style=\"color:#f8f8f2;\">            update: self.update.</span><span style=\"color:#66d9ef;\">clone</span><span style=\"color:#f8f8f2;\">(),\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">my_use_signal</span><span style=\"color:#f8f8f2;\">&lt;T: </span><span style=\"color:#f92672;\">&#39;static</span><span style=\"color:#f8f8f2;\">&gt;(</span><span style=\"font-style:italic;color:#fd971f;\">init</span><span style=\"color:#f8f8f2;\">: impl FnOnce() -&gt; T) -&gt; Signal&lt;T&gt; {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">use_hook</span><span style=\"color:#f8f8f2;\">(|| {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// The update function will trigger a re-render in the component cx is attached to\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> update </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">schedule_update</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// Create the initial state\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> value </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">Rc::new(RefCell::new(</span><span style=\"color:#66d9ef;\">init</span><span style=\"color:#f8f8f2;\">()));\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        Signal {{ value, update }}\n</span><span style=\"color:#f8f8f2;\">    }})\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">impl</span><span style=\"color:#f8f8f2;\">&lt;T: Clone&gt; Signal&lt;T&gt; {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">get</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">&amp;</span><span style=\"font-style:italic;color:#fd971f;\">self</span><span style=\"color:#f8f8f2;\">) -&gt; T {{\n</span><span style=\"color:#f8f8f2;\">        self.value.</span><span style=\"color:#66d9ef;\">borrow</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#66d9ef;\">clone</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">set</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">&amp;</span><span style=\"font-style:italic;color:#fd971f;\">self</span><span style=\"color:#f8f8f2;\">, </span><span style=\"font-style:italic;color:#fd971f;\">value</span><span style=\"color:#f8f8f2;\">: T) {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// Update the state\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">self.value.</span><span style=\"color:#66d9ef;\">borrow_mut</span><span style=\"color:#f8f8f2;\">() </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> value;\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// Trigger a re-render on the component the state is from\n</span><span style=\"color:#f8f8f2;\">        (self.update)();\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "hooks_custom_logic.rs".to_string(),
        }
        ul {
            li {
                "The "
                code { "use_context" }
                " hook calls "
                Link { to: "https://docs.rs/dioxus/latest/dioxus/prelude/fn.consume_context.html",
                    code { "consume_context" }
                }
                " (which would be expensive to call on every render) to get some context from the component"
            }
        }
        p {
            "Here is an implementation of the  "
            code { "use_context" }
            " and  "
            code { "use_context_provider" }
            " hooks:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">use_context</span><span style=\"color:#f8f8f2;\">&lt;T: </span><span style=\"color:#f92672;\">&#39;static +</span><span style=\"color:#f8f8f2;\"> Clone&gt;() -&gt; T {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">use_hook</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#66d9ef;\">consume_context</span><span style=\"color:#f8f8f2;\">())\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">use_context_provider</span><span style=\"color:#f8f8f2;\">&lt;T: </span><span style=\"color:#f92672;\">&#39;static +</span><span style=\"color:#f8f8f2;\"> Clone&gt;(</span><span style=\"font-style:italic;color:#fd971f;\">f</span><span style=\"color:#f8f8f2;\">: impl FnOnce() -&gt; T) -&gt; T {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">use_hook</span><span style=\"color:#f8f8f2;\">(|| {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> val </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">f</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// Provide the context state to the component\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#66d9ef;\">provide_context</span><span style=\"color:#f8f8f2;\">(val.</span><span style=\"color:#66d9ef;\">clone</span><span style=\"color:#f8f8f2;\">());\n</span><span style=\"color:#f8f8f2;\">        val\n</span><span style=\"color:#f8f8f2;\">    }})\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "hooks_custom_logic.rs".to_string(),
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum CookbookBundlingSection {
    #[default]
    Empty,
    BundlingConfig,
}
impl std::str::FromStr for CookbookBundlingSection {
    type Err = CookbookBundlingSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "bundling-config" => Ok(Self::BundlingConfig),
            _ => Err(CookbookBundlingSectionParseError),
        }
    }
}
impl std::fmt::Display for CookbookBundlingSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::BundlingConfig => f.write_str("bundling-config"),
        }
    }
}
#[derive(Debug)]
pub struct CookbookBundlingSectionParseError;
impl std::fmt::Display for CookbookBundlingSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of CookbookBundlingSectionbundling-config",
        )?;
        Ok(())
    }
}
impl std::error::Error for CookbookBundlingSectionParseError {}
#[component(no_case_check)]
pub fn CookbookBundling(section: CookbookBundlingSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h3 { id: "bundling-config",
            Link {
                to: BookRoute::CookbookBundling {
                    section: CookbookBundlingSection::BundlingConfig,
                },
                class: "header",
                "Bundling config"
            }
        }
        p {
            "The  "
            code { "[bundle]" }
            " section of our Dioxus.toml can take a variety of options."
        }
        p { "Here are the options, in the form of Rust structs." }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(Debug, Clone, Serialize, Deserialize, Default)]\n</span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">crate</span><span style=\"color:#f8f8f2;\">) </span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">BundleConfig {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// eg. com.dioxuslabs\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) identifier: Option&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// eg. DioxusLabs\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) publisher: Option&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// eg. assets/icon.png\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) icon: Option&lt;Vec&lt;String&gt;&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// eg. Extra assets like &quot;img.png&quot;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) resources: Option&lt;Vec&lt;String&gt;&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// eg. DioxusLabs\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) copyright: Option&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// eg. &quot;Social Media&quot;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) category: Option&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// eg. &quot;A great social media app&quot;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) short_description: Option&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// eg. &quot;A social media app that makes people love app development&quot;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) long_description: Option&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// eg. extra binaries (like tools) to include in the final app\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) external_bin: Option&lt;Vec&lt;String&gt;&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// Additional debian-only settings (see below)\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) deb: Option&lt;DebianSettings&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// Additional macos settings (see below)\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) macos: Option&lt;MacOsSettings&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// Additional windows settings (see below)\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) windows: Option&lt;WindowsSettings&gt;,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[derive(Debug, Clone, Serialize, Deserialize, Default)]\n</span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">crate</span><span style=\"color:#f8f8f2;\">) </span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">DebianSettings {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// OS-specific settings:\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// the list of debian dependencies.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"color:#f8f8f2;\">depends: Option&lt;Vec&lt;String&gt;&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// the list of dependencies the package provides.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"color:#f8f8f2;\">provides: Option&lt;Vec&lt;String&gt;&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// the list of package conflicts.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"color:#f8f8f2;\">conflicts: Option&lt;Vec&lt;String&gt;&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// the list of package replaces.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"color:#f8f8f2;\">replaces: Option&lt;Vec&lt;String&gt;&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// List of custom files to add to the deb package.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// Maps the path on the debian package to the path of the file to include (relative to the current working directory).\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"color:#f8f8f2;\">files: HashMap&lt;PathBuf, PathBuf&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// Path to a custom desktop file Handlebars template.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">///\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// Available variables: `categories`, `comment` (optional), `exec`, `icon` and `name`.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"color:#f8f8f2;\">desktop_template: Option&lt;PathBuf&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// Define the section in Debian Control file. See : &lt;https://www.debian.org/doc/debian-policy/ch-archive.html#s-subsections&gt;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"color:#f8f8f2;\">section: Option&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// Change the priority of the Debian Package. By default, it is set to `optional`.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// Recognized Priorities as of now are :  `required`, `important`, `standard`, `optional`, `extra`\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"color:#f8f8f2;\">priority: Option&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// Path of the uncompressed Changelog file, to be stored at /usr/share/doc/package-name/changelog.gz. See\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// &lt;https://www.debian.org/doc/debian-policy/ch-docs.html#changelog-files-and-release-notes&gt;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"color:#f8f8f2;\">changelog: Option&lt;PathBuf&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// Path to script that will be executed before the package is unpacked. See\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// &lt;https://www.debian.org/doc/debian-policy/ch-maintainerscripts.html&gt;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"color:#f8f8f2;\">pre_install_script: Option&lt;PathBuf&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// Path to script that will be executed after the package is unpacked. See\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// &lt;https://www.debian.org/doc/debian-policy/ch-maintainerscripts.html&gt;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"color:#f8f8f2;\">post_install_script: Option&lt;PathBuf&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// Path to script that will be executed before the package is removed. See\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// &lt;https://www.debian.org/doc/debian-policy/ch-maintainerscripts.html&gt;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"color:#f8f8f2;\">pre_remove_script: Option&lt;PathBuf&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// Path to script that will be executed after the package is removed. See\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// &lt;https://www.debian.org/doc/debian-policy/ch-maintainerscripts.html&gt;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"color:#f8f8f2;\">post_remove_script: Option&lt;PathBuf&gt;,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[derive(Debug, Clone, Serialize, Deserialize, Default)]\n</span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">crate</span><span style=\"color:#f8f8f2;\">) </span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">WixSettings {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) language: Vec&lt;(String, Option&lt;PathBuf&gt;)&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) template: Option&lt;PathBuf&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) fragment_paths: Vec&lt;PathBuf&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) component_group_refs: Vec&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) component_refs: Vec&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) feature_group_refs: Vec&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) feature_refs: Vec&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) merge_refs: Vec&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) skip_webview_install: </span><span style=\"font-style:italic;color:#66d9ef;\">bool</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) license: Option&lt;PathBuf&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) enable_elevated_update_task: </span><span style=\"font-style:italic;color:#66d9ef;\">bool</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) banner_path: Option&lt;PathBuf&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) dialog_image_path: Option&lt;PathBuf&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) fips_compliant: </span><span style=\"font-style:italic;color:#66d9ef;\">bool</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// MSI installer version in the format `major.minor.patch.build` (build is optional).\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">///\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// Because a valid version is required for MSI installer, it will be derived from [`PackageSettings::version`] if this field is not set.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">///\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// The first field is the major version and has a maximum value of 255. The second field is the minor version and has a maximum value of 255.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// The third and fourth fields have a maximum value of 65,535.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">///\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// See &lt;https://learn.microsoft.com/en-us/windows/win32/msi/productversion&gt; for more info.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"color:#f8f8f2;\">version: Option&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// A GUID upgrade code for MSI installer. This code **_must stay the same across all of your updates_**,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// otherwise, Windows will treat your update as a different app and your users will have duplicate versions of your app.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">///\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// By default, tauri generates this code by generating a Uuid v5 using the string `&lt;productName&gt;.exe.app.x64` in the DNS namespace.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// You can use Tauri&#39;s CLI to generate and print this code for you by running `tauri inspect wix-upgrade-code`.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">///\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// It is recommended that you set this value in your tauri config file to avoid accidental changes in your upgrade code\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// whenever you want to change your product name.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"color:#f8f8f2;\">upgrade_code: Option&lt;uuid::Uuid&gt;,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[derive(Debug, Clone, Serialize, Deserialize, Default)]\n</span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">crate</span><span style=\"color:#f8f8f2;\">) </span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">MacOsSettings {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) frameworks: Option&lt;Vec&lt;String&gt;&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) minimum_system_version: Option&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) license: Option&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) exception_domain: Option&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) signing_identity: Option&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) provider_short_name: Option&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) entitlements: Option&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) info_plist_path: Option&lt;PathBuf&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// List of custom files to add to the application bundle.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// Maps the path in the Contents directory in the app to the path of the file to include (relative to the current working directory).\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"color:#f8f8f2;\">files: HashMap&lt;PathBuf, PathBuf&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// Preserve the hardened runtime version flag, see &lt;https://developer.apple.com/documentation/security/hardened_runtime&gt;\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">///\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// Settings this to `false` is useful when using an ad-hoc signature, making it less strict.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"color:#f8f8f2;\">hardened_runtime: </span><span style=\"font-style:italic;color:#66d9ef;\">bool</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[derive(Debug, Clone, Serialize, Deserialize)]\n</span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">crate</span><span style=\"color:#f8f8f2;\">) </span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">WindowsSettings {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) digest_algorithm: Option&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) certificate_thumbprint: Option&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) timestamp_url: Option&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) tsp: </span><span style=\"font-style:italic;color:#66d9ef;\">bool</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) wix: Option&lt;WixSettings&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) icon_path: Option&lt;PathBuf&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) webview_install_mode: WebviewInstallMode,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) webview_fixed_runtime_path: Option&lt;PathBuf&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) allow_downgrades: </span><span style=\"font-style:italic;color:#66d9ef;\">bool</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) nsis: Option&lt;NsisSettings&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// Specify a custom command to sign the binaries.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// This command needs to have a `%1` in it which is just a placeholder for the binary path,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// which we will detect and replace before calling the command.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">///\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// Example:\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// ```text\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// sign-cli --arg1 --arg2 %1\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// ```\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">///\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// By Default we use `signtool.exe` which can be found only on Windows so\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// if you are on another platform and want to cross-compile and sign you will\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// need to use another tool like `osslsigncode`.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"color:#f8f8f2;\">sign_command: Option&lt;CustomSignCommandSettings&gt;,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[derive(Debug, Clone, Serialize, Deserialize)]\n</span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">crate</span><span style=\"color:#f8f8f2;\">) </span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">NsisSettings {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) template: Option&lt;PathBuf&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) license: Option&lt;PathBuf&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) header_image: Option&lt;PathBuf&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) sidebar_image: Option&lt;PathBuf&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) installer_icon: Option&lt;PathBuf&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) install_mode: NSISInstallerMode,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) languages: Option&lt;Vec&lt;String&gt;&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) custom_language_files: Option&lt;HashMap&lt;String, PathBuf&gt;&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) display_language_selector: </span><span style=\"font-style:italic;color:#66d9ef;\">bool</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) start_menu_folder: Option&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(crate) installer_hooks: Option&lt;PathBuf&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// Try to ensure that the WebView2 version is equal to or newer than this version,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// if the user&#39;s WebView2 is older than this version,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// the installer will try to trigger a WebView2 update.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"color:#f8f8f2;\">minimum_webview2_version: Option&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[derive(Debug, Clone, Serialize, Deserialize)]\n</span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">crate</span><span style=\"color:#f8f8f2;\">) </span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">NSISInstallerMode {{\n</span><span style=\"color:#f8f8f2;\">    CurrentUser,\n</span><span style=\"color:#f8f8f2;\">    PerMachine,\n</span><span style=\"color:#f8f8f2;\">    Both,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[derive(Debug, Clone, Serialize, Deserialize)]\n</span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">crate</span><span style=\"color:#f8f8f2;\">) </span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">WebviewInstallMode {{\n</span><span style=\"color:#f8f8f2;\">    Skip,\n</span><span style=\"color:#f8f8f2;\">    DownloadBootstrapper {{ silent: </span><span style=\"font-style:italic;color:#66d9ef;\">bool </span><span style=\"color:#f8f8f2;\">}},\n</span><span style=\"color:#f8f8f2;\">    EmbedBootstrapper {{ silent: </span><span style=\"font-style:italic;color:#66d9ef;\">bool </span><span style=\"color:#f8f8f2;\">}},\n</span><span style=\"color:#f8f8f2;\">    OfflineInstaller {{ silent: </span><span style=\"font-style:italic;color:#66d9ef;\">bool </span><span style=\"color:#f8f8f2;\">}},\n</span><span style=\"color:#f8f8f2;\">    FixedRuntime {{ path: PathBuf }},\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[derive(Debug, Clone, Serialize, Deserialize)]\n</span><span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">CustomSignCommandSettings {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// The command to run to sign the binary.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"color:#f8f8f2;\">cmd: String,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// The arguments to pass to the command.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">///\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// &quot;%1&quot; will be replaced with the path to the binary to be signed.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"color:#f8f8f2;\">args: Vec&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[derive(Clone, Copy, Debug)]\n</span><span style=\"color:#f92672;\">pub</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">crate</span><span style=\"color:#f8f8f2;\">) </span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">PackageType {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// &quot;macos&quot;\n</span><span style=\"color:#f8f8f2;\">    MacOsBundle,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// &quot;ios&quot;\n</span><span style=\"color:#f8f8f2;\">    IosBundle,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// &quot;msi&quot;\n</span><span style=\"color:#f8f8f2;\">    WindowsMsi,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// &quot;nsis&quot;\n</span><span style=\"color:#f8f8f2;\">    Nsis,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// &quot;deb&quot;\n</span><span style=\"color:#f8f8f2;\">    Deb,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// &quot;rpm&quot;\n</span><span style=\"color:#f8f8f2;\">    Rpm,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// &quot;appimage&quot;\n</span><span style=\"color:#f8f8f2;\">    AppImage,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// &quot;dmg&quot;\n</span><span style=\"color:#f8f8f2;\">    Dmg,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">/// &quot;updater&quot;\n</span><span style=\"color:#f8f8f2;\">    Updater,\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum CookbookTestingSection {
    #[default]
    Empty,
    Testing,
    ComponentTesting,
    HookTesting,
    EndToEndTesting,
}
impl std::str::FromStr for CookbookTestingSection {
    type Err = CookbookTestingSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "testing" => Ok(Self::Testing),
            "component-testing" => Ok(Self::ComponentTesting),
            "hook-testing" => Ok(Self::HookTesting),
            "end-to-end-testing" => Ok(Self::EndToEndTesting),
            _ => Err(CookbookTestingSectionParseError),
        }
    }
}
impl std::fmt::Display for CookbookTestingSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Testing => f.write_str("testing"),
            Self::ComponentTesting => f.write_str("component-testing"),
            Self::HookTesting => f.write_str("hook-testing"),
            Self::EndToEndTesting => f.write_str("end-to-end-testing"),
        }
    }
}
#[derive(Debug)]
pub struct CookbookTestingSectionParseError;
impl std::fmt::Display for CookbookTestingSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of CookbookTestingSectiontesting, component-testing, hook-testing, end-to-end-testing",
        )?;
        Ok(())
    }
}
impl std::error::Error for CookbookTestingSectionParseError {}
#[component(no_case_check)]
pub fn CookbookTesting(section: CookbookTestingSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "testing",
            Link {
                to: BookRoute::CookbookTesting {
                    section: CookbookTestingSection::Testing,
                },
                class: "header",
                "Testing"
            }
        }
        p {
            "When building application or libraries with Dioxus, you may want to include some tests to check the behavior of parts of your application. This guide will teach you how to test different parts of your Dioxus application."
        }
        h2 { id: "component-testing",
            Link {
                to: BookRoute::CookbookTesting {
                    section: CookbookTestingSection::ComponentTesting,
                },
                class: "header",
                "Component Testing"
            }
        }
        p {
            "You can use a combination of "
            Link { to: "https://docs.rs/pretty_assertions/latest/pretty_assertions/",
                "pretty-assertions"
            }
            " and "
            Link { to: "http://crates.io/crates/dioxus-ssr", "dioxus-ssr" }
            " to check that two snippets of rsx are equal:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">futures::FutureExt;\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">std::{{cell::RefCell, sync::Arc}};\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[test]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">test</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">assert_rsx_eq</span><span style=\"color:#f8f8f2;\">(\n</span><span style=\"color:#f8f8f2;\">        rsx! {{\n</span><span style=\"color:#f8f8f2;\">            div {{ </span><span style=\"color:#ffee99;\">&quot;Hello world&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">            div {{ </span><span style=\"color:#ffee99;\">&quot;Hello world&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }},\n</span><span style=\"color:#f8f8f2;\">        rsx! {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#f92672;\">for _ in </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f92672;\">..</span><span style=\"color:#ff80f4;\">2 </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">                div {{ </span><span style=\"color:#ffee99;\">&quot;Hello world&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">        }},\n</span><span style=\"color:#f8f8f2;\">    )\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">assert_rsx_eq</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">first</span><span style=\"color:#f8f8f2;\">: Element, </span><span style=\"font-style:italic;color:#fd971f;\">second</span><span style=\"color:#f8f8f2;\">: Element) {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> first </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">dioxus_ssr::render_element(first);\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> second </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">dioxus_ssr::render_element(second);\n</span><span style=\"color:#f8f8f2;\">    pretty_assertions::assert_str_eq</span><span style=\"color:#f92672;\">!</span><span style=\"color:#f8f8f2;\">(first, second);\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "component_test.rs".to_string(),
        }
        h2 { id: "hook-testing",
            Link {
                to: BookRoute::CookbookTesting {
                    section: CookbookTestingSection::HookTesting,
                },
                class: "header",
                "Hook Testing"
            }
        }
        p {
            "When creating libraries around Dioxus, it can be helpful to make tests for your "
            Link {
                to: BookRoute::CookbookStateCustomHooksIndex {
                    section: CookbookStateCustomHooksIndexSection::Empty,
                },
                "custom hooks"
            }
            "."
        }
        p {
            "Dioxus does not currently have a full hook testing library, but you can build a bespoke testing framework by manually driving the virtual dom."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">futures::FutureExt;\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">std::{{cell::RefCell, rc::Rc, sync::Arc, thread::Scope}};\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::{{dioxus_core::NoOpMutations, prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">}};\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[test]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">test</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">test_hook</span><span style=\"color:#f8f8f2;\">(\n</span><span style=\"color:#f8f8f2;\">        || </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">),\n</span><span style=\"color:#f8f8f2;\">        |</span><span style=\"color:#f92672;\">mut </span><span style=\"font-style:italic;color:#fd971f;\">value</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#f92672;\">mut </span><span style=\"font-style:italic;color:#fd971f;\">proxy</span><span style=\"color:#f8f8f2;\">| </span><span style=\"color:#f92672;\">match</span><span style=\"color:#f8f8f2;\"> proxy.generation {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ff80f4;\">0 </span><span style=\"color:#f92672;\">=&gt; </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">                value.</span><span style=\"color:#66d9ef;\">set</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ff80f4;\">1 </span><span style=\"color:#f92672;\">=&gt; </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">                assert_eq!(</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">value.</span><span style=\"color:#66d9ef;\">read</span><span style=\"color:#f8f8f2;\">(), </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">                value.</span><span style=\"color:#66d9ef;\">set</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ff80f4;\">2</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ff80f4;\">2 </span><span style=\"color:#f92672;\">=&gt; </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">                proxy.</span><span style=\"color:#66d9ef;\">rerun</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ff80f4;\">3 </span><span style=\"color:#f92672;\">=&gt; </span><span style=\"color:#f8f8f2;\">{{}}\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#f92672;\">_ =&gt; </span><span style=\"color:#f8f8f2;\">todo!(),\n</span><span style=\"color:#f8f8f2;\">        }},\n</span><span style=\"color:#f8f8f2;\">        |</span><span style=\"font-style:italic;color:#fd971f;\">proxy</span><span style=\"color:#f8f8f2;\">| assert_eq!(proxy.generation, </span><span style=\"color:#ff80f4;\">4</span><span style=\"color:#f8f8f2;\">),\n</span><span style=\"color:#f8f8f2;\">    );\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">test_hook</span><span style=\"color:#f8f8f2;\">&lt;V: </span><span style=\"color:#f92672;\">&#39;static</span><span style=\"color:#f8f8f2;\">&gt;(\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#fd971f;\">initialize</span><span style=\"color:#f8f8f2;\">: impl FnMut() -&gt; V + </span><span style=\"color:#f92672;\">&#39;static</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#fd971f;\">check</span><span style=\"color:#f8f8f2;\">: impl FnMut(</span><span style=\"font-style:italic;color:#fd971f;\">V</span><span style=\"color:#f8f8f2;\">, </span><span style=\"font-style:italic;color:#fd971f;\">MockProxy</span><span style=\"color:#f8f8f2;\">) + </span><span style=\"color:#f92672;\">&#39;static</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">mut </span><span style=\"font-style:italic;color:#fd971f;\">final_check</span><span style=\"color:#f8f8f2;\">: impl FnMut(</span><span style=\"font-style:italic;color:#fd971f;\">MockProxy</span><span style=\"color:#f8f8f2;\">) + </span><span style=\"color:#f92672;\">&#39;static</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">) {{\n</span><span style=\"color:#f8f8f2;\">    #[derive(Props)]\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">MockAppComponent&lt;I: </span><span style=\"color:#f92672;\">&#39;static</span><span style=\"color:#f8f8f2;\">, C: </span><span style=\"color:#f92672;\">&#39;static</span><span style=\"color:#f8f8f2;\">&gt; {{\n</span><span style=\"color:#f8f8f2;\">        hook: Rc&lt;RefCell&lt;I&gt;&gt;,\n</span><span style=\"color:#f8f8f2;\">        check: Rc&lt;RefCell&lt;C&gt;&gt;,\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">impl</span><span style=\"color:#f8f8f2;\">&lt;I, C&gt; PartialEq </span><span style=\"color:#f92672;\">for </span><span style=\"color:#f8f8f2;\">MockAppComponent&lt;I, C&gt; {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">eq</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">&amp;</span><span style=\"font-style:italic;color:#fd971f;\">self</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#f92672;\">_</span><span style=\"color:#f8f8f2;\">: </span><span style=\"color:#f92672;\">&amp;</span><span style=\"font-style:italic;color:#66d9ef;\">Self</span><span style=\"color:#f8f8f2;\">) -&gt; </span><span style=\"font-style:italic;color:#66d9ef;\">bool </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ff80f4;\">true\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">impl</span><span style=\"color:#f8f8f2;\">&lt;I, C&gt; Clone </span><span style=\"color:#f92672;\">for </span><span style=\"color:#f8f8f2;\">MockAppComponent&lt;I, C&gt; {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">clone</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">&amp;</span><span style=\"font-style:italic;color:#fd971f;\">self</span><span style=\"color:#f8f8f2;\">) -&gt; </span><span style=\"font-style:italic;color:#66d9ef;\">Self </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"font-style:italic;color:#66d9ef;\">Self </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">                hook: self.hook.</span><span style=\"color:#66d9ef;\">clone</span><span style=\"color:#f8f8f2;\">(),\n</span><span style=\"color:#f8f8f2;\">                check: self.check.</span><span style=\"color:#66d9ef;\">clone</span><span style=\"color:#f8f8f2;\">(),\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">mock_app</span><span style=\"color:#f8f8f2;\">&lt;I: FnMut() -&gt; V, C: FnMut(V, MockProxy), V&gt;(\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#fd971f;\">props</span><span style=\"color:#f8f8f2;\">: MockAppComponent&lt;I, C&gt;,\n</span><span style=\"color:#f8f8f2;\">    ) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> value </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> props.hook.</span><span style=\"color:#66d9ef;\">borrow_mut</span><span style=\"color:#f8f8f2;\">()();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        props.check.</span><span style=\"color:#66d9ef;\">borrow_mut</span><span style=\"color:#f8f8f2;\">()(value, MockProxy::new());\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        rsx! {{ div {{}} }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> vdom </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">VirtualDom::new_with_props(\n</span><span style=\"color:#f8f8f2;\">        mock_app,\n</span><span style=\"color:#f8f8f2;\">        MockAppComponent {{\n</span><span style=\"color:#f8f8f2;\">            hook: Rc::new(RefCell::new(initialize)),\n</span><span style=\"color:#f8f8f2;\">            check: Rc::new(RefCell::new(check)),\n</span><span style=\"color:#f8f8f2;\">        }},\n</span><span style=\"color:#f8f8f2;\">    );\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    vdom.</span><span style=\"color:#66d9ef;\">rebuild_in_place</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">while</span><span style=\"color:#f8f8f2;\"> vdom.</span><span style=\"color:#66d9ef;\">wait_for_work</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#66d9ef;\">now_or_never</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#66d9ef;\">is_some</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">        vdom.</span><span style=\"color:#66d9ef;\">render_immediate</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">&amp;mut</span><span style=\"color:#f8f8f2;\"> NoOpMutations);\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    vdom.</span><span style=\"color:#66d9ef;\">in_runtime</span><span style=\"color:#f8f8f2;\">(|| {{\n</span><span style=\"color:#f8f8f2;\">        ScopeId::</span><span style=\"color:#ff80f4;\">ROOT</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">in_runtime</span><span style=\"color:#f8f8f2;\">(|| {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#66d9ef;\">final_check</span><span style=\"color:#f8f8f2;\">(MockProxy::new());\n</span><span style=\"color:#f8f8f2;\">        }})\n</span><span style=\"color:#f8f8f2;\">    }})\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">MockProxy {{\n</span><span style=\"color:#f8f8f2;\">    rerender: Arc&lt;dyn Fn()&gt;,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"color:#f8f8f2;\">generation: </span><span style=\"font-style:italic;color:#66d9ef;\">usize</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">impl </span><span style=\"color:#f8f8f2;\">MockProxy {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">new</span><span style=\"color:#f8f8f2;\">() -&gt; </span><span style=\"font-style:italic;color:#66d9ef;\">Self </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> generation </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">generation</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> rerender </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">schedule_update</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">Self </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">            rerender,\n</span><span style=\"color:#f8f8f2;\">            generation,\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">rerun</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">&amp;mut </span><span style=\"font-style:italic;color:#fd971f;\">self</span><span style=\"color:#f8f8f2;\">) {{\n</span><span style=\"color:#f8f8f2;\">        (self.rerender)();\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "hook_test.rs".to_string(),
        }
        h2 { id: "end-to-end-testing",
            Link {
                to: BookRoute::CookbookTesting {
                    section: CookbookTestingSection::EndToEndTesting,
                },
                class: "header",
                "End to End Testing"
            }
        }
        p {
            "You can use "
            Link { to: "https://playwright.dev/", "Playwright" }
            " to create end to end tests for your dioxus application."
        }
        p {
            "In your  "
            code { "playwright.config.js" }
            ", you will need to run cargo run or dx serve instead of the default build command. Here is a snippet from the end to end web example:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">//...\n</span><span style=\"color:#f8f8f2;\">webServer: [\n</span><span style=\"color:#f8f8f2;\">    {{\n</span><span style=\"color:#f8f8f2;\">        cwd: path.</span><span style=\"color:#66d9ef;\">join</span><span style=\"color:#f8f8f2;\">(process.</span><span style=\"color:#66d9ef;\">cwd</span><span style=\"color:#f8f8f2;\">(), </span><span style=\"color:#f92672;\">&#39;playwright-</span><span style=\"color:#f8f8f2;\">tests</span><span style=\"color:#f92672;\">&#39;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#f92672;\">&#39;</span><span style=\"color:#f8f8f2;\">web</span><span style=\"color:#f92672;\">&#39;</span><span style=\"color:#f8f8f2;\">),\n</span><span style=\"color:#f8f8f2;\">        command: </span><span style=\"color:#f92672;\">&#39;dx</span><span style=\"color:#f8f8f2;\"> serve</span><span style=\"color:#f92672;\">&#39;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">        port: </span><span style=\"color:#ff80f4;\">8080</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">        timeout: </span><span style=\"color:#ff80f4;\">10 </span><span style=\"color:#f92672;\">* </span><span style=\"color:#ff80f4;\">60 </span><span style=\"color:#f92672;\">* </span><span style=\"color:#ff80f4;\">1000</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">        reuseExistingServer: </span><span style=\"color:#f92672;\">!</span><span style=\"color:#f8f8f2;\">process.env.</span><span style=\"color:#ff80f4;\">CI</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">        stdout: </span><span style=\"color:#ffee99;\">&quot;pipe&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">    }},\n</span><span style=\"color:#f8f8f2;\">],</span></pre>\n",
        }
        ul {
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/playwright-tests/web",
                    "Web example"
                }
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/playwright-tests/liveview",
                    "Liveview example"
                }
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/playwright-tests/fullstack",
                    "Fullstack example"
                }
            }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum CookbookTailwindSection {
    #[default]
    Empty,
    Tailwind,
    Setup,
    BonusSteps,
    Development,
    Web,
    Desktop,
}
impl std::str::FromStr for CookbookTailwindSection {
    type Err = CookbookTailwindSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "tailwind" => Ok(Self::Tailwind),
            "setup" => Ok(Self::Setup),
            "bonus-steps" => Ok(Self::BonusSteps),
            "development" => Ok(Self::Development),
            "web" => Ok(Self::Web),
            "desktop" => Ok(Self::Desktop),
            _ => Err(CookbookTailwindSectionParseError),
        }
    }
}
impl std::fmt::Display for CookbookTailwindSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Tailwind => f.write_str("tailwind"),
            Self::Setup => f.write_str("setup"),
            Self::BonusSteps => f.write_str("bonus-steps"),
            Self::Development => f.write_str("development"),
            Self::Web => f.write_str("web"),
            Self::Desktop => f.write_str("desktop"),
        }
    }
}
#[derive(Debug)]
pub struct CookbookTailwindSectionParseError;
impl std::fmt::Display for CookbookTailwindSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of CookbookTailwindSectiontailwind, setup, bonus-steps, development, web, desktop",
        )?;
        Ok(())
    }
}
impl std::error::Error for CookbookTailwindSectionParseError {}
#[component(no_case_check)]
pub fn CookbookTailwind(section: CookbookTailwindSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "tailwind",
            Link {
                to: BookRoute::CookbookTailwind {
                    section: CookbookTailwindSection::Tailwind,
                },
                class: "header",
                "Tailwind"
            }
        }
        p {
            "You can style your Dioxus application with whatever CSS framework you choose, or just write vanilla CSS."
        }
        p {
            "One popular option for styling your Dioxus application is "
            Link { to: "https://tailwindcss.com/", "Tailwind" }
            ". Tailwind allows you to style your elements with CSS utility classes. This guide will show you how to setup tailwind CSS with your Dioxus application."
        }
        h2 { id: "setup",
            Link {
                to: BookRoute::CookbookTailwind {
                    section: CookbookTailwindSection::Setup,
                },
                class: "header",
                "Setup"
            }
        }
        ol {
            li { "Install the Dioxus CLI:" }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">cargo install dioxus</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">cli</span></pre>\n" }
        ol {
            li {
                "Install npm: "
                Link { to: "https://docs.npmjs.com/downloading-and-installing-node-js-and-npm",
                    "https://docs.npmjs.com/downloading-and-installing-node-js-and-npm"
                }
            }
            li {
                "Install the tailwind css cli: "
                Link { to: "https://tailwindcss.com/docs/installation",
                    "https://tailwindcss.com/docs/installation"
                }
            }
            li { "Initialize the tailwind css project:" }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">npx tailwindcss init</span></pre>\n" }
        p {
            "This should create a  "
            code { "tailwind.config.js" }
            " file in the root of the project."
        }
        ol {
            li {
                "Edit the "
                code { "tailwind.config.js" }
                " file to include rust files:"
            }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">module.exports </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">    mode: </span><span style=\"color:#ffee99;\">&quot;all&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">    content: [\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// include all rust, html and css files in the src directory\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#ffee99;\">&quot;./src/**/*.{{rs,html,css}}&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// include all html files in the output (dist) directory\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#ffee99;\">&quot;./dist/**/*.html&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">    ],\n</span><span style=\"color:#f8f8f2;\">    theme: {{\n</span><span style=\"color:#f8f8f2;\">        extend: {{}},\n</span><span style=\"color:#f8f8f2;\">    }},\n</span><span style=\"color:#f8f8f2;\">    plugins: [],\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        ol {
            li {
                "Create a "
                code { "input.css" }
                " file in the root of your project with the following content:"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">@</span><span style=\"color:#f8f8f2;\">tailwind base;\n</span><span style=\"color:#f92672;\">@</span><span style=\"color:#f8f8f2;\">tailwind components;\n</span><span style=\"color:#f92672;\">@</span><span style=\"color:#f8f8f2;\">tailwind utilities;</span></pre>\n" }
        ol {
            li {
                "Create a link to the "
                code { "tailwind.css" }
                " file using manganis somewhere in your rust code:"
            }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">app</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// The Stylesheet component inserts a style link into the head of the document\n</span><span style=\"color:#f8f8f2;\">        document::Stylesheet {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#8c8c8c;\">// Urls are relative to your Cargo.toml file\n</span><span style=\"color:#f8f8f2;\">            href: asset!(</span><span style=\"color:#ffee99;\">&quot;/assets/tailwind.css&quot;</span><span style=\"color:#f8f8f2;\">)\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "tailwind.rs".to_string(),
        }
        h3 { id: "bonus-steps",
            Link {
                to: BookRoute::CookbookTailwind {
                    section: CookbookTailwindSection::BonusSteps,
                },
                class: "header",
                "Bonus Steps"
            }
        }
        ol {
            li { "Install the tailwind css vs code extension" }
            li {
                "Go to the settings for the extension and find the experimental regex support section. Edit the setting.json file to look like this:"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#ffee99;\">&quot;tailwindCSS.experimental.classRegex&quot;</span><span style=\"color:#f8f8f2;\">: [</span><span style=\"color:#ffee99;\">&quot;class: </span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">(.*)</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">&quot;</span><span style=\"color:#f8f8f2;\">],\n</span><span style=\"color:#ffee99;\">&quot;tailwindCSS.includeLanguages&quot;</span><span style=\"color:#f8f8f2;\">: {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#ffee99;\">&quot;rust&quot;</span><span style=\"color:#f8f8f2;\">: </span><span style=\"color:#ffee99;\">&quot;html&quot;\n</span><span style=\"color:#f8f8f2;\">}},</span></pre>\n" }
        h2 { id: "development",
            Link {
                to: BookRoute::CookbookTailwind {
                    section: CookbookTailwindSection::Development,
                },
                class: "header",
                "Development"
            }
        }
        ul {
            li {
                "Run the following command in the root of the project to start the tailwind css compiler:"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">npx tailwindcss </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">i .</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">input.css </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">o .</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">assets</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">tailwind.css </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">watch</span></pre>\n" }
        h3 { id: "web",
            Link {
                to: BookRoute::CookbookTailwind {
                    section: CookbookTailwindSection::Web,
                },
                class: "header",
                "Web"
            }
        }
        ul {
            li { "Run the following command in the root of the project to start the dioxus dev server:" }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">dx serve</span></pre>\n" }
        ul {
            li {
                "Open the browser to "
                Link { to: "http://localhost:8080", "http://localhost:8080" }
                "."
            }
        }
        h3 { id: "desktop",
            Link {
                to: BookRoute::CookbookTailwind {
                    section: CookbookTailwindSection::Desktop,
                },
                class: "header",
                "Desktop"
            }
        }
        ul {
            li { "Launch the dioxus desktop app:" }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">dx serve </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">platform desktop</span></pre>\n" }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum CookbookOptimizingSection {
    #[default]
    Empty,
    Optimizing,
    BuildingInReleaseMode,
    Upx,
    BuildConfiguration,
    Stable,
    Unstable,
    WasmOpt,
    ImprovingDioxusCode,
    OptimizingTheSizeOfAssets,
}
impl std::str::FromStr for CookbookOptimizingSection {
    type Err = CookbookOptimizingSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "optimizing" => Ok(Self::Optimizing),
            "building-in-release-mode" => Ok(Self::BuildingInReleaseMode),
            "upx" => Ok(Self::Upx),
            "build-configuration" => Ok(Self::BuildConfiguration),
            "stable" => Ok(Self::Stable),
            "unstable" => Ok(Self::Unstable),
            "wasm-opt" => Ok(Self::WasmOpt),
            "improving-dioxus-code" => Ok(Self::ImprovingDioxusCode),
            "optimizing-the-size-of-assets" => Ok(Self::OptimizingTheSizeOfAssets),
            _ => Err(CookbookOptimizingSectionParseError),
        }
    }
}
impl std::fmt::Display for CookbookOptimizingSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Optimizing => f.write_str("optimizing"),
            Self::BuildingInReleaseMode => f.write_str("building-in-release-mode"),
            Self::Upx => f.write_str("upx"),
            Self::BuildConfiguration => f.write_str("build-configuration"),
            Self::Stable => f.write_str("stable"),
            Self::Unstable => f.write_str("unstable"),
            Self::WasmOpt => f.write_str("wasm-opt"),
            Self::ImprovingDioxusCode => f.write_str("improving-dioxus-code"),
            Self::OptimizingTheSizeOfAssets => f.write_str("optimizing-the-size-of-assets"),
        }
    }
}
#[derive(Debug)]
pub struct CookbookOptimizingSectionParseError;
impl std::fmt::Display for CookbookOptimizingSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of CookbookOptimizingSectionoptimizing, building-in-release-mode, upx, build-configuration, stable, unstable, wasm-opt, improving-dioxus-code, optimizing-the-size-of-assets",
        )?;
        Ok(())
    }
}
impl std::error::Error for CookbookOptimizingSectionParseError {}
#[component(no_case_check)]
pub fn CookbookOptimizing(section: CookbookOptimizingSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "optimizing",
            Link {
                to: BookRoute::CookbookOptimizing {
                    section: CookbookOptimizingSection::Optimizing,
                },
                class: "header",
                "Optimizing"
            }
        }
        p {
            em {
                "Note: This is written primarily for the web, but the main optimizations will work on other platforms too."
            }
        }
        p {
            "You might have noticed that Dioxus binaries are pretty big."
            " "
            "The WASM binary of a "
            Link { to: "https://github.com/tigerros/dioxus-todo-app", "TodoMVC app" }
            " weighs in at 2.36mb!"
            " "
            "Don't worry; we can get it down to a much more manageable 234kb."
            " "
            "This will get obviously lower over time."
            " "
            "With nightly features, you can even reduce the binary size of a hello world app to less than 100kb!"
        }
        p { "We will also discuss ways to optimize your app for increased speed." }
        p {
            "However, certain optimizations will sacrifice speed for decreased binary size or the other way around."
            " "
            "That's what you need to figure out yourself. Does your app perform performance-intensive tasks, such as graphical processing or tons of DOM manipulations?"
            " "
            "You could go for increased speed. In most cases, though, decreased binary size is the better choice, especially because Dioxus WASM binaries are quite large."
        }
        p {
            "To test binary sizes, we will use "
            Link { to: "https://github.com/tigerros/dioxus-todo-app", "this" }
            " repository as a sample app."
            " "
            "The "
            code { "no-optimizations" }
            " package will serve as the base, which weighs 2.36mb as of right now."
        }
        p { "Additional resources:" }
        ul {
            li {
                Link { to: "https://rustwasm.github.io/docs/book/reference/code-size.html",
                    "WASM book - Shrinking  "
                    code { ".wasm" }
                    " code size"
                }
            }
            li {
                Link { to: "https://github.com/johnthagen/min-sized-rust", "min-sized-rust" }
            }
        }
        h2 { id: "building-in-release-mode",
            Link {
                to: BookRoute::CookbookOptimizing {
                    section: CookbookOptimizingSection::BuildingInReleaseMode,
                },
                class: "header",
                "Building in release mode"
            }
        }
        p {
            "This is the best way to optimize. In fact, the 2.36mb figure at the start of the guide is with release mode."
            " "
            "In debug mode, it's actually a whopping 32mb! It also increases the speed of your app."
        }
        p {
            "We can use the  "
            code { "--release" }
            " flag to create an optimized build of our application which will be both faster and smaller:"
        }
        p {
            code { "dx build --release" }
        }
        h2 { id: "upx",
            Link {
                to: BookRoute::CookbookOptimizing {
                    section: CookbookOptimizingSection::Upx,
                },
                class: "header",
                "UPX"
            }
        }
        p {
            "If you're not targeting web, you can use the "
            Link { to: "https://github.com/upx/upx", "UPX" }
            " CLI tool to compress your executables."
        }
        p { "Setup:" }
        ul {
            li {
                "Download a "
                Link { to: "https://github.com/upx/upx/releases", "release" }
                " and extract the directory inside to a sensible location."
            }
            li { "Add the executable located in the directory to your path variable." }
        }
        p {
            "You can run  "
            code { "upx --help" }
            " to get the CLI options, but you should also view  "
            code { "upx-doc.html" }
            " for more detailed information."
            " "
            "It's included in the extracted directory."
        }
        p {
            "An example command might be:  "
            code { "upx --best -o target/release/compressed.exe target/release/your-executable.exe" }
            "."
        }
        h2 { id: "build-configuration",
            Link {
                to: BookRoute::CookbookOptimizing {
                    section: CookbookOptimizingSection::BuildConfiguration,
                },
                class: "header",
                "Build configuration"
            }
        }
        p {
            em {
                "Note: Settings defined in "
                code { ".cargo/config.toml" }
                " will override settings in "
                code { "Cargo.toml" }
                "."
            }
        }
        p {
            "Other than the  "
            code { "--release" }
            " flag, this is the easiest way to optimize your projects, and also the most effective way,"
            " "
            "at least in terms of reducing binary size."
        }
        h3 { id: "stable",
            Link {
                to: BookRoute::CookbookOptimizing {
                    section: CookbookOptimizingSection::Stable,
                },
                class: "header",
                "Stable"
            }
        }
        p {
            "This configuration is 100% stable and decreases the binary size from 2.36mb to 310kb."
            " "
            "Add this to your  "
            code { ".cargo/config.toml" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[profile.release]\n</span><span style=\"color:#f8f8f2;\">opt</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">level </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;z&quot;\n</span><span style=\"color:#f8f8f2;\">debug </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">false\n</span><span style=\"color:#f8f8f2;\">lto </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">true\n</span><span style=\"color:#f8f8f2;\">codegen</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">units </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">1\n</span><span style=\"color:#f8f8f2;\">panic </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;abort&quot;\n</span><span style=\"color:#f8f8f2;\">strip </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">true\n</span><span style=\"color:#f8f8f2;\">incremental </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">false</span></pre>\n",
        }
        p { "Links to the documentation of each value:" }
        ul {
            li {
                Link { to: "https://doc.rust-lang.org/rustc/codegen-options/index.html#opt-level",
                    code { "opt-level" }
                }
            }
            li {
                Link { to: "https://doc.rust-lang.org/rustc/codegen-options/index.html#debuginfo",
                    code { "debug" }
                }
            }
            li {
                Link { to: "https://doc.rust-lang.org/rustc/codegen-options/index.html#lto",
                    code { "lto" }
                }
            }
            li {
                Link { to: "https://doc.rust-lang.org/rustc/codegen-options/index.html#codegen-units",
                    code { "codegen-units" }
                }
            }
            li {
                Link { to: "https://doc.rust-lang.org/rustc/codegen-options/index.html#panic",
                    code { "panic" }
                }
            }
            li {
                Link { to: "https://doc.rust-lang.org/rustc/codegen-options/index.html#strip",
                    code { "strip" }
                }
            }
            li {
                Link { to: "https://doc.rust-lang.org/rustc/codegen-options/index.html#incremental",
                    code { "incremental" }
                }
            }
        }
        h3 { id: "unstable",
            Link {
                to: BookRoute::CookbookOptimizing {
                    section: CookbookOptimizingSection::Unstable,
                },
                class: "header",
                "Unstable"
            }
        }
        p {
            "This configuration contains some unstable features, but it should work just fine."
            " "
            "It decreases the binary size from 310kb to 234kb."
            " "
            "Add this to your  "
            code { ".cargo/config.toml" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[unstable]\n</span><span style=\"color:#f8f8f2;\">build</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">std </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;std&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;panic_abort&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;core&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;alloc&quot;</span><span style=\"color:#f8f8f2;\">]\n</span><span style=\"color:#f8f8f2;\">build</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">std</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">features </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;panic_immediate_abort&quot;</span><span style=\"color:#f8f8f2;\">]\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">[build]\n</span><span style=\"color:#f8f8f2;\">rustflags </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#ffee99;\">&quot;-Clto&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#ffee99;\">&quot;-Zvirtual-function-elimination&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#ffee99;\">&quot;-Zlocation-detail=none&quot;\n</span><span style=\"color:#f8f8f2;\">]\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> Same </span><span style=\"color:#f92672;\">as in</span><span style=\"color:#f8f8f2;\"> the Stable section\n</span><span style=\"color:#f8f8f2;\">[profile.release]\n</span><span style=\"color:#f8f8f2;\">opt</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">level </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;z&quot;\n</span><span style=\"color:#f8f8f2;\">debug </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">false\n</span><span style=\"color:#f8f8f2;\">lto </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">true\n</span><span style=\"color:#f8f8f2;\">codegen</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">units </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">1\n</span><span style=\"color:#f8f8f2;\">panic </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;abort&quot;\n</span><span style=\"color:#f8f8f2;\">strip </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">true\n</span><span style=\"color:#f8f8f2;\">incremental </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">false</span></pre>\n",
        }
        p {
            em {
                "Note: The omitted space in each flag (e.g., "
                code { "-C<no space here>lto" }
                ") is intentional. It is not a typo."
            }
        }
        p {
            "The values in  "
            code { "[profile.release]" }
            " are documented in the "
            Link {
                to: BookRoute::CookbookOptimizing {
                    section: CookbookOptimizingSection::Stable,
                },
                "Stable"
            }
            " section. Links to the documentation of each value:"
        }
        ul {
            li {
                Link { to: "https://doc.rust-lang.org/cargo/reference/config.html#buildrustflags",
                    code { "[build.rustflags]" }
                }
            }
            li {
                Link { to: "https://doc.rust-lang.org/rustc/codegen-options/index.html#lto",
                    code { "-C lto" }
                }
            }
            li {
                Link { to: "https://doc.rust-lang.org/stable/unstable-book/compiler-flags/virtual-function-elimination.html",
                    code { "-Z virtual-function-elimination" }
                }
            }
            li {
                Link { to: "https://doc.rust-lang.org/stable/unstable-book/compiler-flags/location-detail.html",
                    code { "-Z location-detail" }
                }
            }
        }
        h2 { id: "wasm-opt",
            Link {
                to: BookRoute::CookbookOptimizing {
                    section: CookbookOptimizingSection::WasmOpt,
                },
                class: "header",
                "wasm-opt"
            }
        }
        p {
            em {
                "Note: In the future, "
                code { "wasm-opt" }
                " will be supported natively through the "
                Link { to: "https://crates.io/crates/dioxus-cli", "Dioxus CLI" }
                "."
            }
        }
        p {
            code { "wasm-opt" }
            " is a tool from the "
            Link { to: "https://github.com/WebAssembly/binaryen", "binaryen" }
            " library that optimizes your WASM files."
            " "
            "To use it, install a "
            Link { to: "https://github.com/WebAssembly/binaryen/releases", "binaryen release" }
            " and run this command from the package directory:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">wasm</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">opt dist</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">assets</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">dioxus</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">APP_NAME_bg.wasm </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">o dist</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">assets</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">dioxus</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">APP_NAME_bg.wasm </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">Oz</span></pre>\n" }
        p {
            "The  "
            code { "-Oz" }
            " flag specifies that  "
            code { "wasm-opt" }
            " should optimize for size. For speed, use  "
            code { "-O4" }
            "."
        }
        h2 { id: "improving-dioxus-code",
            Link {
                to: BookRoute::CookbookOptimizing {
                    section: CookbookOptimizingSection::ImprovingDioxusCode,
                },
                class: "header",
                "Improving Dioxus code"
            }
        }
        p { "Let's talk about how you can improve your Dioxus code to be more performant." }
        p {
            "It's important to minimize the number of dynamic parts in your  "
            code { "rsx" }
            ", like conditional rendering."
            " "
            "When Dioxus is rendering your component, it will skip parts that are the same as the last render."
            " "
            "That means that if you keep dynamic rendering to a minimum, your app will speed up, and quite a bit if it's not just hello world."
            " "
            "To see an example of this, check out "
            Link {
                to: BookRoute::ReferenceDynamicRendering {
                    section: ReferenceDynamicRenderingSection::Empty,
                },
                "Dynamic Rendering"
            }
            "."
        }
        p {
            "Also check out "
            Link {
                to: BookRoute::CookbookAntipatterns {
                    section: CookbookAntipatternsSection::Empty,
                },
                "Anti-patterns"
            }
            " for patterns that you should avoid."
            " "
            "Obviously, not all of them are just about performance, but some of them are."
        }
        h2 { id: "optimizing-the-size-of-assets",
            Link {
                to: BookRoute::CookbookOptimizing {
                    section: CookbookOptimizingSection::OptimizingTheSizeOfAssets,
                },
                class: "header",
                "Optimizing the size of assets"
            }
        }
        p {
            "Assets can be a significant part of your app's size. Dioxus includes alpha support for first party "
            Link {
                to: BookRoute::GuidesAssets {
                    section: GuidesAssetsSection::Empty,
                },
                "assets"
            }
            ". Any assets you include with the "
            code { "asset!" }
            " macro will be optimized for production in release builds."
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum MigrationIndexSection {
    #[default]
    Empty,
    HowToUpgradeToDioxus06,
    Element,
    PreventDefault,
    Assets,
    Logging,
    Launch,
    Eval,
    Fullstack,
    Router,
    Deriveprops,
    StateManagement,
    CoreChanges,
    CustomRenderers,
    MinorBreakingChanges,
}
impl std::str::FromStr for MigrationIndexSection {
    type Err = MigrationIndexSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "how-to-upgrade-to-dioxus-06" => Ok(Self::HowToUpgradeToDioxus06),
            "element" => Ok(Self::Element),
            "prevent-default" => Ok(Self::PreventDefault),
            "assets" => Ok(Self::Assets),
            "logging" => Ok(Self::Logging),
            "launch" => Ok(Self::Launch),
            "eval" => Ok(Self::Eval),
            "fullstack" => Ok(Self::Fullstack),
            "router" => Ok(Self::Router),
            "deriveprops" => Ok(Self::Deriveprops),
            "state-management" => Ok(Self::StateManagement),
            "core-changes" => Ok(Self::CoreChanges),
            "custom-renderers" => Ok(Self::CustomRenderers),
            "minor-breaking-changes" => Ok(Self::MinorBreakingChanges),
            _ => Err(MigrationIndexSectionParseError),
        }
    }
}
impl std::fmt::Display for MigrationIndexSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::HowToUpgradeToDioxus06 => f.write_str("how-to-upgrade-to-dioxus-06"),
            Self::Element => f.write_str("element"),
            Self::PreventDefault => f.write_str("prevent-default"),
            Self::Assets => f.write_str("assets"),
            Self::Logging => f.write_str("logging"),
            Self::Launch => f.write_str("launch"),
            Self::Eval => f.write_str("eval"),
            Self::Fullstack => f.write_str("fullstack"),
            Self::Router => f.write_str("router"),
            Self::Deriveprops => f.write_str("deriveprops"),
            Self::StateManagement => f.write_str("state-management"),
            Self::CoreChanges => f.write_str("core-changes"),
            Self::CustomRenderers => f.write_str("custom-renderers"),
            Self::MinorBreakingChanges => f.write_str("minor-breaking-changes"),
        }
    }
}
#[derive(Debug)]
pub struct MigrationIndexSectionParseError;
impl std::fmt::Display for MigrationIndexSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of MigrationIndexSectionhow-to-upgrade-to-dioxus-06, element, prevent-default, assets, logging, launch, eval, fullstack, router, deriveprops, state-management, core-changes, custom-renderers, minor-breaking-changes",
        )?;
        Ok(())
    }
}
impl std::error::Error for MigrationIndexSectionParseError {}
#[component(no_case_check)]
pub fn MigrationIndex(section: MigrationIndexSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "how-to-upgrade-to-dioxus-06",
            Link {
                to: BookRoute::MigrationIndex {
                    section: MigrationIndexSection::HowToUpgradeToDioxus06,
                },
                class: "header",
                "How to Upgrade to Dioxus 0.6"
            }
        }
        p {
            "This guide will outline the API changes between the  "
            code { "0.5" }
            " and  "
            code { "0.6" }
            " releases. The  "
            code { "0.6" }
            " release contains a breaking changes to:"
        }
        ul {
            li {
                "The "
                code { "Element" }
                " type"
            }
            li { "Prevent default" }
            li { "Assets with Manganis" }
            li {
                code { "dioxus_logger" }
                " integration with "
                code { "dioxus" }
            }
            li {
                "The "
                code { "launch" }
                " function"
            }
            li {
                "The "
                code { "eval" }
                " function"
            }
            li {
                "The "
                code { "dioxus-fullstack" }
                " crate"
            }
            li { "The router crate" }
            li {
                "The "
                code { "derive(Props)" }
                " macro"
            }
            li {
                "The "
                code { "dioxus-core" }
                " crate"
            }
            li { "Custom renderer API" }
            li { "Global state management" }
        }
        h2 { id: "element",
            Link {
                to: BookRoute::MigrationIndex {
                    section: MigrationIndexSection::Element,
                },
                class: "header",
                "Element"
            }
        }
        p {
            "The element type has changed from  "
            code { "Option<VNode>" }
            " to  "
            code { "Result<VNode, RenderError>" }
            ". This makes it possible to bubble up errors while rendering with the  "
            code { "?" }
            " operator, but it does remove the ability to return  "
            code { "None" }
            " from a component. Instead of returning  "
            code { "None" }
            ", you can return  "
            code { "VNode::empty()" }
            " or an empty  "
            code { "rsx!" }
            " macro."
        }
        p { "Dioxus 0.5:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">app</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> number </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#f92672;\">-</span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">if </span><span style=\"color:#66d9ef;\">number</span><span style=\"color:#f8f8f2;\">() </span><span style=\"color:#f92672;\">&lt; </span><span style=\"color:#ff80f4;\">0 </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// ❌ In dioxus 0.6, the element type is a result, so None values cannot be returned directly\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">return </span><span style=\"font-style:italic;color:#66d9ef;\">None</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#ffee99;\">&quot;Positive number: {{number}}&quot;\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        p { "Dioxus 0.6:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">app</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> number </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#f92672;\">-</span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">if </span><span style=\"color:#66d9ef;\">number</span><span style=\"color:#f8f8f2;\">() </span><span style=\"color:#f92672;\">&lt; </span><span style=\"color:#ff80f4;\">0 </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// ✅ You can return VNode::empty() instead\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">return </span><span style=\"color:#f8f8f2;\">VNode::empty();\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">if </span><span style=\"color:#66d9ef;\">number</span><span style=\"color:#f8f8f2;\">() </span><span style=\"color:#f92672;\">&lt; </span><span style=\"color:#ff80f4;\">0 </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// ✅ Or an empty rsx! macro\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">return </span><span style=\"color:#f8f8f2;\">rsx! {{}};\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#ffee99;\">&quot;Positive number: {{number}}&quot;\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "migration.rs".to_string(),
        }
        h2 { id: "prevent-default",
            Link {
                to: BookRoute::MigrationIndex {
                    section: MigrationIndexSection::PreventDefault,
                },
                class: "header",
                "Prevent Default"
            }
        }
        p {
            "Dioxus 0.1-0.5 used the  "
            code { "prevent_default" }
            " attribute to prevent default behavior of event handlers for every event. Dioxus 0.6 introduces more fine-grained control over preventing default behavior with the  "
            code { "prevent_default" }
            " function on the event type. Instead of setting the  "
            code { "prevent_default" }
            " attribute for all events you want to prevent, you can create event handlers that call  "
            code { "event.prevent_default()" }
            "."
        }
        p { "Dioxus 0.5:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">app</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        a {{\n</span><span style=\"color:#f8f8f2;\">            href: </span><span style=\"color:#ffee99;\">&quot;https://dioxuslabs.com&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#8c8c8c;\">// ❌ The prevent default attribute is deprecated in dioxus 0.6\n</span><span style=\"color:#f8f8f2;\">            prevent_default: </span><span style=\"color:#ffee99;\">&quot;onclick&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;Don&#39;t navigate to dioxuslabs.com&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "migration.rs".to_string(),
        }
        p { "Dioxus 0.6:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">app</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        a {{\n</span><span style=\"color:#f8f8f2;\">            href: </span><span style=\"color:#ffee99;\">&quot;https://dioxuslabs.com&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#8c8c8c;\">// ✅ Instead, you can call event.prevent_default() inside the event handler\n</span><span style=\"color:#f8f8f2;\">            onclick: </span><span style=\"color:#f92672;\">move |</span><span style=\"color:#f8f8f2;\">event</span><span style=\"color:#f92672;\">|</span><span style=\"color:#f8f8f2;\"> event.</span><span style=\"color:#66d9ef;\">prevent_default</span><span style=\"color:#f8f8f2;\">(),\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;Don&#39;t navigate to dioxuslabs.com&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "migration.rs".to_string(),
        }
        blockquote {
            p {
                "Note: Since event handlers run on the server in Liveview, events cannot be prevented quickly inside the event handler. Because of this, the new  "
                code { "prevent_default" }
                " method does not prevent default behavior in Liveview."
            }
            p {
                "Instead you can use javascript inside the  "
                code { "onclick" }
                " handler to prevent default behavior."
            }
            CodeBlock {
                contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">app</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        a {{\n</span><span style=\"color:#f8f8f2;\">            href: </span><span style=\"color:#ffee99;\">&quot;https://dioxuslabs.com&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#8c8c8c;\">// ✅ In liveview, you can use javascript to prevent default behavior\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;onclick&quot;</span><span style=\"color:#f8f8f2;\">: </span><span style=\"color:#ffee99;\">&quot;event.preventDefault()&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;Don&#39;t navigate to dioxuslabs.com&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
                name: "migration.rs".to_string(),
            }
        }
        h2 { id: "assets",
            Link {
                to: BookRoute::MigrationIndex {
                    section: MigrationIndexSection::Assets,
                },
                class: "header",
                "Assets"
            }
        }
        p {
            "The syntax of the  "
            code { "asset!" }
            " macro has changed in Dioxus 0.6. Instead of accepting a single argument with both the path and the configuration for the asset, you can now pass in the path as the first argument and the configuration as a optional second argument."
        }
        p {
            "The path the  "
            code { "asset!" }
            " macro accepts has also changed. Previously, the macro used to accept absolute and relative paths where relative paths were relative to the current crate directory. Now the macro only accepts absolute paths which are resolved relative to the root of the crate."
        }
        p { "Dioxus 0.5:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">app</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        img {{\n</span><span style=\"color:#f8f8f2;\">            src: asset!(</span><span style=\"color:#66d9ef;\">image</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;./assets/static/bundle.png&quot;</span><span style=\"color:#f8f8f2;\">).</span><span style=\"color:#66d9ef;\">size</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ff80f4;\">100</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ff80f4;\">100</span><span style=\"color:#f8f8f2;\">))\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        p { "Dioxus 0.6:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">app</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        img {{\n</span><span style=\"color:#f8f8f2;\">            src: asset!(</span><span style=\"color:#ffee99;\">&quot;/assets/static/bundle.png&quot;</span><span style=\"color:#f8f8f2;\">, ImageAssetOptions::new().</span><span style=\"color:#66d9ef;\">with_size</span><span style=\"color:#f8f8f2;\">(ImageSize::Manual {{ width: </span><span style=\"color:#ff80f4;\">100</span><span style=\"color:#f8f8f2;\">, height: </span><span style=\"color:#ff80f4;\">100 </span><span style=\"color:#f8f8f2;\">}}))\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "migration.rs".to_string(),
        }
        h2 { id: "logging",
            Link {
                to: BookRoute::MigrationIndex {
                    section: MigrationIndexSection::Logging,
                },
                class: "header",
                "Logging"
            }
        }
        p {
            "Dioxus 0.6 brings the  "
            code { "dioxus-logger" }
            " crate directly into dioxus itself."
        }
        p {
            "Previously, you needed to add  "
            code { "dioxus-logger" }
            " to your Cargo.toml and then call its init function:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// cargo.toml:\n</span><span style=\"color:#8c8c8c;\">// dioxus-logger = &quot;0.5&quot;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">tracing::Level;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">main</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Init logger\n</span><span style=\"color:#f8f8f2;\">    dioxus_logger::init(Level::</span><span style=\"color:#ff80f4;\">INFO</span><span style=\"color:#f8f8f2;\">).</span><span style=\"color:#66d9ef;\">expect</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;failed to init logger&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Dioxus launch code\n</span><span style=\"color:#f8f8f2;\">    dioxus::launch(app)\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        p {
            "Now, in Dioxus 0.6, the logger is implicit with  "
            code { "launch" }
            ". Simply call launch and the logger is initialized to a default log level. In development mode, the  "
            code { "Debug" }
            " tracing level is set, and in release only the  "
            code { "Info" }
            " level is set."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">main</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    dioxus::launch(app);\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "If you still need to set the level manually or configure a custom subscriber, do that before  "
            code { "launch" }
            ". We expose the  "
            code { "initialize_default" }
            " function in case you need additional logging before your  "
            code { "launch" }
            " call:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">main</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    dioxus::logger::initialize_default();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    tracing::info</span><span style=\"color:#f92672;\">!</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;Logs received!&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    dioxus::launch(app);\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        h2 { id: "launch",
            Link {
                to: BookRoute::MigrationIndex {
                    section: MigrationIndexSection::Launch,
                },
                class: "header",
                "Launch"
            }
        }
        p {
            "The  "
            code { "launch" }
            " function was removed from the prelude. You must now import the launch method from  "
            code { "dioxus" }
            " or use it by its full path:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">main</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// ❌ launch(app);\n</span><span style=\"color:#f8f8f2;\">    dioxus::launch(app); </span><span style=\"color:#8c8c8c;\">// ✅\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "See "
            Link { to: "https://github.com/DioxusLabs/dioxus/pull/2967",
                "https://github.com/DioxusLabs/dioxus/pull/2967"
            }
            " for more details."
        }
        h2 { id: "eval",
            Link {
                to: BookRoute::MigrationIndex {
                    section: MigrationIndexSection::Eval,
                },
                class: "header",
                "Eval"
            }
        }
        ul {
            li {
                code { "eval" }
                " was moved from the prelude to the "
                code { "document" }
                " module. You must now call it with "
                code { "document::eval" }
                " instead of "
                code { "eval" }
                ":"
            }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">dioxus::prelude::</span><span style=\"color:#f92672;\">*</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">app</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// ❌ use_effect(|| eval(&quot;console.log(1)&quot;));\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">use_effect</span><span style=\"color:#f8f8f2;\">(|| document::eval(</span><span style=\"color:#ffee99;\">&quot;console.log(1)&quot;</span><span style=\"color:#f8f8f2;\">)); </span><span style=\"color:#8c8c8c;\">// ✅\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{}}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        ul {
            li {
                "The "
                code { "eval" }
                " feature flag was removed from the "
                code { "dioxus-html" }
                " crate and the functionality of "
                code { "EvalProvider" }
                " was moved to the new "
                code { "dioxus-document" }
                " crate. Custom renderers must now provide a "
                code { "Rc<dyn Document>" }
                " context to the application to make "
                code { "eval" }
                " and head elements work correctly. See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/2635",
                    "https://github.com/DioxusLabs/dioxus/pull/2635"
                }
                " for more details."
            }
            li {
                code { "Eval::recv" }
                " and "
                code { "Eval::join" }
                " now returns any value that implements "
                code { "DeserializeOwned" }
                " instead of "
                code { "serde_json::Value" }
                ". "
                code { "Eval::send" }
                " now accepts any value that implements "
                code { "Serialize" }
                ". See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/3035",
                    "https://github.com/DioxusLabs/dioxus/pull/3035"
                }
                " for more details"
            }
        }
        h2 { id: "fullstack",
            Link {
                to: BookRoute::MigrationIndex {
                    section: MigrationIndexSection::Fullstack,
                },
                class: "header",
                "Fullstack"
            }
        }
        ul {
            li {
                "The feature "
                code { "dioxus/axum" }
                " was renamed to "
                code { "dioxus/server" }
            }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[features]\n</span><span style=\"color:#f8f8f2;\">default </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[]\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> ❌ server </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;dioxus/axum&quot;</span><span style=\"color:#f8f8f2;\">]\n</span><span style=\"color:#f8f8f2;\">server </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;dioxus/server&quot;</span><span style=\"color:#f8f8f2;\">] </span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> ✅\n</span><span style=\"color:#f8f8f2;\">web </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;dioxus/web&quot;</span><span style=\"color:#f8f8f2;\">]</span></pre>\n",
        }
        p {
            "See "
            Link { to: "https://github.com/DioxusLabs/dioxus/pull/3186",
                "https://github.com/DioxusLabs/dioxus/pull/3186"
            }
            " for more details"
        }
        ul {
            li {
                "The "
                code { "fullstack::Config" }
                " item was removed. You can now pass the platform configs into the "
                code { "LaunchBuilder" }
                " directly. For example, if you want to set the rootname on each platform, you can set the root name in each config:"
            }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">LaunchBuilder::new()\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Only set the server config if the server feature is enabled\n</span><span style=\"color:#f8f8f2;\">    .</span><span style=\"color:#66d9ef;\">with_cfg</span><span style=\"color:#f8f8f2;\">(server_only! {{\n</span><span style=\"color:#f8f8f2;\">        ServeConfigBuilder::default().</span><span style=\"color:#66d9ef;\">root_id</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;app&quot;</span><span style=\"color:#f8f8f2;\">)\n</span><span style=\"color:#f8f8f2;\">    }})\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// You also need to set the root id in your web config\n</span><span style=\"color:#f8f8f2;\">    .</span><span style=\"color:#66d9ef;\">with_cfg</span><span style=\"color:#f8f8f2;\">(web! {{\n</span><span style=\"color:#f8f8f2;\">        dioxus::web::Config::default().</span><span style=\"color:#66d9ef;\">rootname</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;app&quot;</span><span style=\"color:#f8f8f2;\">)\n</span><span style=\"color:#f8f8f2;\">    }})\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// And desktop config\n</span><span style=\"color:#f8f8f2;\">    .</span><span style=\"color:#66d9ef;\">with_cfg</span><span style=\"color:#f8f8f2;\">(desktop! {{\n</span><span style=\"color:#f8f8f2;\">        dioxus::desktop::Config::default().</span><span style=\"color:#66d9ef;\">with_root_name</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;app&quot;</span><span style=\"color:#f8f8f2;\">)\n</span><span style=\"color:#f8f8f2;\">    }})\n</span><span style=\"color:#f8f8f2;\">    .</span><span style=\"color:#66d9ef;\">launch</span><span style=\"color:#f8f8f2;\">(app);</span></pre>\n",
        }
        p {
            "See "
            Link { to: "https://github.com/DioxusLabs/dioxus/pull/2967",
                "https://github.com/DioxusLabs/dioxus/pull/2967"
            }
            " for more details."
        }
        ul {
            li {
                "The dioxus-cli now proxies fullstack applications at a port behind a reverse proxy. If you have a custom axum server, you must serve your application at the port returned by "
                code { "dioxus_cli_config::server_port" }
                " and the address returned by "
                code { "dioxus_cli_config::server_ip" }
                " or the complete address returned by "
                code { "dioxus_cli_config::fullstack_address_or_localhost" }
                " during development:"
            }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[cfg(feature </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;server&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">#[tokio::main]\n</span><span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">main</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Get the address the server should run on. If the CLI is running, the CLI proxies fullstack into the main address\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// and we use the generated address the CLI gives us\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> address </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">dioxus_cli_config::fullstack_address_or_localhost();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Launch the fullstack application on the address the CLI is proxying\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> router </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">axum::Router::new()\n</span><span style=\"color:#f8f8f2;\">        .</span><span style=\"color:#66d9ef;\">serve_dioxus_application</span><span style=\"color:#f8f8f2;\">(ServeConfigBuilder::default(), App);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> router </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> router.</span><span style=\"color:#66d9ef;\">into_make_service</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> listener </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">tokio::net::TcpListener::bind(address).await.</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">    axum::serve(listener, router).await.</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        p {
            "See "
            Link { to: "https://github.com/DioxusLabs/dioxus/pull/2258",
                "https://github.com/DioxusLabs/dioxus/pull/2258"
            }
            " for more details."
        }
        ul {
            li {
                code { "serve_dioxus_application" }
                " was changed to accept a component directly instead of a virtual dom factory. See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/2515",
                    "https://github.com/DioxusLabs/dioxus/pull/2515"
                }
                " for more details."
            }
            li {
                code { "register_server_fns" }
                " was renamed to "
                code { "register_server_functions" }
                ". See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/2515",
                    "https://github.com/DioxusLabs/dioxus/pull/2515"
                }
                " for more details."
            }
            li {
                code { "RenderHandleState::new" }
                " accepts a new "
                code { "ServeConfig" }
                " argument. See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/2862",
                    "https://github.com/DioxusLabs/dioxus/pull/2862"
                }
                " for more details."
            }
            li {
                code { "ServeConfigBuilder::build" }
                " returns a result. It may fail during desktop builds if no "
                code { "index.html" }
                " file is found. This error is fine to ignore in desktop builds. You can pass the builder directly to "
                code { "serve_dioxus_application" }
                " to only serve the index.html file if it exists. See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/2862",
                    "https://github.com/DioxusLabs/dioxus/pull/2862"
                }
                " for more details."
            }
            li {
                code { "dioxus_fullstack::Config::addr" }
                " was removed. You can now export the "
                code { "PORT" }
                " and "
                code { "IP" }
                " environment variables to set the address the "
                code { "launch" }
                " method uses for the server."
            }
        }
        h2 { id: "router",
            Link {
                to: BookRoute::MigrationIndex {
                    section: MigrationIndexSection::Router,
                },
                class: "header",
                "Router"
            }
        }
        ul {
            li {
                "The "
                code { "Routable" }
                " derive macro no longer accepts fields that are not present in the "
                code { "route(\"/route\")" }
                " if the web feature is enabled. See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/2159",
                    "https://github.com/DioxusLabs/dioxus/pull/2159"
                }
                " for more details."
            }
            li {
                "The "
                code { "ToRouteSegments" }
                " trait in the router was changed from accepting "
                code { "self" }
                " to accepting "
                code { "&self" }
                ". This means you can now implement it for "
                code { "T" }
                " directly instead of "
                code { "&T" }
                ". See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/2283",
                    "https://github.com/DioxusLabs/dioxus/pull/2283"
                }
                " for more details."
            }
        }
        h2 { id: "deriveprops",
            Link {
                to: BookRoute::MigrationIndex {
                    section: MigrationIndexSection::Deriveprops,
                },
                class: "header",
                "derive(Props)"
            }
        }
        ul {
            li {
                code { "#[props(into)]" }
                " is ignore on any String props. String props already accept "
                code { "impl ToString" }
                " which is implemented for many of the same types, but if you implement "
                code { "Into<String>" }
                " for a specific type, your code may require some changes. See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/2501",
                    "https://github.com/DioxusLabs/dioxus/pull/2501"
                }
                " for more details"
            }
            li {
                "Properties that start with an uppercase letter are no longer accepted. This allows us to autocomplete Components. See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/2652",
                    "https://github.com/DioxusLabs/dioxus/pull/2652"
                }
                " for more details."
            }
        }
        h2 { id: "state-management",
            Link {
                to: BookRoute::MigrationIndex {
                    section: MigrationIndexSection::StateManagement,
                },
                class: "header",
                "State Management"
            }
        }
        ul {
            li {
                code { "use_coroutine" }
                " now accepts "
                code { "impl FnMut" }
                " instead of "
                code { "impl FnOnce" }
                ". This was required to support restarting the coroutine without rerunning the component. See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/3005",
                    "https://github.com/DioxusLabs/dioxus/pull/3005"
                }
                " for more details."
            }
            li {
                code { "Signal::global_memo" }
                " now requires "
                code { "T: PartialEq" }
                " just like "
                code { "use_memo" }
                ". See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/2851",
                    "https://github.com/DioxusLabs/dioxus/pull/2851"
                }
                " for more details."
            }
            li {
                code { "GlobalMemo<T>" }
                " is now a trait alias for "
                code { "Global<Memo<T>, T>" }
                " and "
                code { "GlobalSignal<T>" }
                " is now a trait alias for "
                code { "Global<Signal<T>, T>" }
                ". To get the underlying "
                code { "Memo" }
                " or "
                code { "Signal" }
                ", you can now use the "
                code { "resolve" }
                " method instead of "
                code { "signal" }
                " or "
                code { "memo" }
                ". See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/2851",
                    "https://github.com/DioxusLabs/dioxus/pull/2851"
                }
                " for more details."
            }
            li {
                "The "
                code { "Readable" }
                " trait in dioxus signals now requires a "
                code { "try_peek_unchecked" }
                " method instead of "
                code { "peek_unchecked" }
                ". See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/2714",
                    "https://github.com/DioxusLabs/dioxus/pull/2714"
                }
                " for more details."
            }
            li {
                "The "
                code { "check_generation" }
                " feature flag was removed from the "
                code { "generational-box" }
                " crate. See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/2638",
                    "https://github.com/DioxusLabs/dioxus/pull/2638"
                }
                " for more details."
            }
        }
        h2 { id: "core-changes",
            Link {
                to: BookRoute::MigrationIndex {
                    section: MigrationIndexSection::CoreChanges,
                },
                class: "header",
                "Core changes"
            }
        }
        ul {
            li {
                "The "
                code { "Template::name" }
                " field was removed. See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/2799",
                    "https://github.com/DioxusLabs/dioxus/pull/2799"
                }
                " for more details."
            }
            li {
                code { "Properties::into_vcomponent" }
                " now accepts only the "
                code { "render_fn" }
                " instead of the "
                code { "render_fn" }
                " and "
                code { "component_name" }
                ". This change fixes the name of re-exported components. Fixes "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/2744",
                    "https://github.com/DioxusLabs/dioxus/pull/2744"
                }
            }
            li {
                "The field "
                code { "VNode::template" }
                " is now "
                code { "Template" }
                " instead of "
                code { "Cell<Template>" }
                ". See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/2705",
                    "https://github.com/DioxusLabs/dioxus/pull/2705"
                }
                " for more details"
            }
            li {
                code { "Mutations::santize" }
                " was renamed to "
                code { "Mutations::sanitize" }
                ". See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/2653",
                    "https://github.com/DioxusLabs/dioxus/pull/2653"
                }
                " for more details."
            }
            li {
                "The variant "
                code { "AttributeValue::Any" }
                " now contains "
                code { "Rc<dyn AnyValue>" }
                " instead of "
                code { "Box<dyn AnyValue>" }
                " to make "
                code { "AttributeValue" }
                " "
                code { "Clone" }
                ". See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/2705",
                    "https://github.com/DioxusLabs/dioxus/pull/2705"
                }
                " for more details"
            }
        }
        h2 { id: "custom-renderers",
            Link {
                to: BookRoute::MigrationIndex {
                    section: MigrationIndexSection::CustomRenderers,
                },
                class: "header",
                "Custom Renderers"
            }
        }
        p {
            "If you are building a custom renderer, there were some breaking changes to hot reloading and rsx that you should be aware of:"
        }
        ul {
            li {
                "The CLI hot reloading format changed significantly. Custom renderers must switch from "
                code { "dioxus-hot-reload" }
                " to "
                code { "dioxus_devtools" }
                ". Renderers can connect to the hot reloading engine with the "
                "["
                " "
                "connect"
                " "
                "]"
                " "
                "("
                Link { to: "https://docs.rs/dioxus", "https://docs.rs/dioxus" }
                "-devtools/0.6.0/dioxus_devtools/fn.connect.html) function. See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/2258",
                    "https://github.com/DioxusLabs/dioxus/pull/2258"
                }
                " for more details."
            }
            li {
                "The format of custom elements was changed to improve autocomplete. The "
                code { "dioxus_elements" }
                " namespace must now contain each element as a module with a TAG_NAME and NAME_SPACE constant inside that module. Each attribute should be another constant in that module. The top-level "
                code { "dioxus_elements" }
                " module should contain a "
                code { "completions" }
                " module with a "
                code { "CompleteWithBraces" }
                " enum that re-exports each element the namespace supports for braces autocomplete. See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/2421",
                    "https://github.com/DioxusLabs/dioxus/pull/2421"
                }
                " for more details."
            }
            li {
                "The format for custom event handlers changed include "
                code { "eventname::call_with_explicit_closure" }
                " to provide better type inference for inline closures. See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/2437",
                    "https://github.com/DioxusLabs/dioxus/pull/2437"
                }
                " for more details"
            }
        }
        p { "If you are also using dioxus-html, there are a few more breaking changes:" }
        ul {
            li {
                "A "
                code { "file_size" }
                " method was added to the "
                code { "FileEngine" }
                " trait. Any custom renderers must implement this method. See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/2323/files",
                    "https://github.com/DioxusLabs/dioxus/pull/2323/files"
                }
                " for more details."
            }
            li {
                code { "HtmlEventConverter" }
                " has a new "
                code { "convert_resize_data" }
                " method which must be implemented by any custom renderers that use dioxus-html. See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/2479",
                    "https://github.com/DioxusLabs/dioxus/pull/2479"
                }
                " for more details"
            }
            li {
                "The web and native features were removed from the "
                code { "dioxus-html" }
                " crate. See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/3006",
                    "https://github.com/DioxusLabs/dioxus/pull/3006"
                }
                " for more details."
            }
            li {
                code { "dioxus_html::AttributeDiscription " }
                " was renamed to "
                code { "dioxus_html::AttributeDescription" }
                ". See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/2653",
                    "https://github.com/DioxusLabs/dioxus/pull/2653"
                }
                " for more details."
            }
        }
        h2 { id: "minor-breaking-changes",
            Link {
                to: BookRoute::MigrationIndex {
                    section: MigrationIndexSection::MinorBreakingChanges,
                },
                class: "header",
                "Minor Breaking Changes"
            }
        }
        p { "There were several more minor breaking changes in Dioxus 0.6:" }
        ul {
            li {
                "Many implicit features from dioxus crates were removed. These features were automatically generated by cargo and generally not functional. See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/2512",
                    "https://github.com/DioxusLabs/dioxus/pull/2512"
                }
                " for more details."
            }
            li {
                code { "dioxus_autofmt::write_block_out" }
                " accepts "
                code { "&CallBody" }
                " instead of "
                code { "CallBody" }
                ". See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/2573",
                    "https://github.com/DioxusLabs/dioxus/pull/2573"
                }
                " for more details."
            }
            li {
                "The "
                code { "panic_hook" }
                " feature which provides a console panic message for wasm panics was moved from the "
                code { "dioxus-web" }
                " crate to the "
                code { "dioxus-logger" }
                " crate. The handler is still provided by default. See "
                Link { to: "https://github.com/DioxusLabs/dioxus/pull/3302",
                    "https://github.com/DioxusLabs/dioxus/pull/3302"
                }
                " for more details."
            }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum ReferenceIndexSection {
    #[default]
    Empty,
    Reference,
}
impl std::str::FromStr for ReferenceIndexSection {
    type Err = ReferenceIndexSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "reference" => Ok(Self::Reference),
            _ => Err(ReferenceIndexSectionParseError),
        }
    }
}
impl std::fmt::Display for ReferenceIndexSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Reference => f.write_str("reference"),
        }
    }
}
#[derive(Debug)]
pub struct ReferenceIndexSectionParseError;
impl std::fmt::Display for ReferenceIndexSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str("Invalid section name. Expected one of ReferenceIndexSectionreference")?;
        Ok(())
    }
}
impl std::error::Error for ReferenceIndexSectionParseError {}
#[component(no_case_check)]
pub fn ReferenceIndex(section: ReferenceIndexSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "reference",
            Link {
                to: BookRoute::ReferenceIndex {
                    section: ReferenceIndexSection::Reference,
                },
                class: "header",
                "Reference"
            }
        }
        p {
            "This portion of the Dioxus Docs contains specific details about features that provide more depth than what is necessary for most reading."
        }
        ul {
            li {
                Link {
                    to: BookRoute::ReferenceRsx {
                        section: ReferenceRsxSection::Empty,
                    },
                    "RSX"
                }
            }
            li {
                Link {
                    to: BookRoute::ReferenceComponents {
                        section: ReferenceComponentsSection::Empty,
                    },
                    "Components"
                }
            }
            li {
                Link {
                    to: BookRoute::ReferenceComponentProps {
                        section: ReferenceComponentPropsSection::Empty,
                    },
                    "Props"
                }
            }
            li {
                Link {
                    to: BookRoute::ReferenceEventHandlers {
                        section: ReferenceEventHandlersSection::Empty,
                    },
                    "Event Handlers"
                }
            }
            li {
                Link {
                    to: BookRoute::ReferenceHooks {
                        section: ReferenceHooksSection::Empty,
                    },
                    "Hooks"
                }
            }
            li {
                Link {
                    to: BookRoute::ReferenceUserInput {
                        section: ReferenceUserInputSection::Empty,
                    },
                    "User Input"
                }
            }
            li {
                Link {
                    to: BookRoute::ReferenceContext {
                        section: ReferenceContextSection::Empty,
                    },
                    "Context"
                }
            }
            li {
                Link {
                    to: BookRoute::ReferenceDynamicRendering {
                        section: ReferenceDynamicRenderingSection::Empty,
                    },
                    "Dynamic Rendering"
                }
            }
            li {
                Link {
                    to: BookRoute::ReferenceRouter {
                        section: ReferenceRouterSection::Empty,
                    },
                    "Routing"
                }
            }
            li {
                Link {
                    to: BookRoute::ReferenceUseResource {
                        section: ReferenceUseResourceSection::Empty,
                    },
                    "Resource"
                }
            }
            li {
                Link {
                    to: BookRoute::ReferenceUseCoroutine {
                        section: ReferenceUseCoroutineSection::Empty,
                    },
                    "UseCoroutine"
                }
            }
            li {
                Link {
                    to: BookRoute::ReferenceSpawn {
                        section: ReferenceSpawnSection::Empty,
                    },
                    "Spawn"
                }
            }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum ReferenceHotreloadSection {
    #[default]
    Empty,
    DioxusHotReloadingReference,
    WhatCanBeHotReloaded,
    WhatCausesAFullRebuild,
}
impl std::str::FromStr for ReferenceHotreloadSection {
    type Err = ReferenceHotreloadSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "dioxus-hot-reloading-reference" => Ok(Self::DioxusHotReloadingReference),
            "what-can-be-hot-reloaded" => Ok(Self::WhatCanBeHotReloaded),
            "what-causes-a-full-rebuild" => Ok(Self::WhatCausesAFullRebuild),
            _ => Err(ReferenceHotreloadSectionParseError),
        }
    }
}
impl std::fmt::Display for ReferenceHotreloadSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::DioxusHotReloadingReference => f.write_str("dioxus-hot-reloading-reference"),
            Self::WhatCanBeHotReloaded => f.write_str("what-can-be-hot-reloaded"),
            Self::WhatCausesAFullRebuild => f.write_str("what-causes-a-full-rebuild"),
        }
    }
}
#[derive(Debug)]
pub struct ReferenceHotreloadSectionParseError;
impl std::fmt::Display for ReferenceHotreloadSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of ReferenceHotreloadSectiondioxus-hot-reloading-reference, what-can-be-hot-reloaded, what-causes-a-full-rebuild",
        )?;
        Ok(())
    }
}
impl std::error::Error for ReferenceHotreloadSectionParseError {}
#[component(no_case_check)]
pub fn ReferenceHotreload(section: ReferenceHotreloadSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "dioxus-hot-reloading-reference",
            Link {
                to: BookRoute::ReferenceHotreload {
                    section: ReferenceHotreloadSection::DioxusHotReloadingReference,
                },
                class: "header",
                "Dioxus Hot-Reloading Reference"
            }
        }
        p {
            "The Dioxus Hot-Reload is very powerful. When used properly, it is by-far the fastest tool to build apps with Rust."
        }
        p {
            "Dioxus 0.5 featured a slightly limited form of hot-reloading while Dioxus 0.6 drastically improved it."
        }
        blockquote {
            p {
                "Currently Dioxus cannot hot-reload "
                em { "Rust" }
                " code, only RSX markup. Usually, modifying Rust code requires a full rebuild."
            }
        }
        p {
            "We provide this text guide as a resource for the details of hot-reloading. This guide also has an accompanying video as well:"
        }
        p {
            class: "inline-html-block",
            dangerous_inner_html: "<iframe style=\"width: 100%\" height=\"500px\" class=\"centered-overflow\" src=\"https://www.youtube.com/embed/Q4Xzz8OJEoc\" title=\"Dioxus 0.6\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n",
        }
        h2 { id: "what-can-be-hot-reloaded",
            Link {
                to: BookRoute::ReferenceHotreload {
                    section: ReferenceHotreloadSection::WhatCanBeHotReloaded,
                },
                class: "header",
                "What can be hot-reloaded?"
            }
        }
        p { "Within RSX, all elements and their properties can be hot-reloaded." }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    div {{}}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        h2 { id: "what-causes-a-full-rebuild",
            Link {
                to: BookRoute::ReferenceHotreload {
                    section: ReferenceHotreloadSection::WhatCausesAFullRebuild,
                },
                class: "header",
                "What causes a full-rebuild?"
            }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum ReferenceRsxSection {
    #[default]
    Empty,
    DescribingTheUi,
    RsxFeatures,
    Attributes,
    ConditionalAttributes,
    CustomAttributes,
    SpecialAttributes,
    TheHtmlEscapeHatch,
    BooleanAttributes,
    Interpolation,
    Children,
    Fragments,
    Expressions,
    Loops,
    IfStatements,
}
impl std::str::FromStr for ReferenceRsxSection {
    type Err = ReferenceRsxSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "describing-the-ui" => Ok(Self::DescribingTheUi),
            "rsx-features" => Ok(Self::RsxFeatures),
            "attributes" => Ok(Self::Attributes),
            "conditional-attributes" => Ok(Self::ConditionalAttributes),
            "custom-attributes" => Ok(Self::CustomAttributes),
            "special-attributes" => Ok(Self::SpecialAttributes),
            "the-html-escape-hatch" => Ok(Self::TheHtmlEscapeHatch),
            "boolean-attributes" => Ok(Self::BooleanAttributes),
            "interpolation" => Ok(Self::Interpolation),
            "children" => Ok(Self::Children),
            "fragments" => Ok(Self::Fragments),
            "expressions" => Ok(Self::Expressions),
            "loops" => Ok(Self::Loops),
            "if-statements" => Ok(Self::IfStatements),
            _ => Err(ReferenceRsxSectionParseError),
        }
    }
}
impl std::fmt::Display for ReferenceRsxSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::DescribingTheUi => f.write_str("describing-the-ui"),
            Self::RsxFeatures => f.write_str("rsx-features"),
            Self::Attributes => f.write_str("attributes"),
            Self::ConditionalAttributes => f.write_str("conditional-attributes"),
            Self::CustomAttributes => f.write_str("custom-attributes"),
            Self::SpecialAttributes => f.write_str("special-attributes"),
            Self::TheHtmlEscapeHatch => f.write_str("the-html-escape-hatch"),
            Self::BooleanAttributes => f.write_str("boolean-attributes"),
            Self::Interpolation => f.write_str("interpolation"),
            Self::Children => f.write_str("children"),
            Self::Fragments => f.write_str("fragments"),
            Self::Expressions => f.write_str("expressions"),
            Self::Loops => f.write_str("loops"),
            Self::IfStatements => f.write_str("if-statements"),
        }
    }
}
#[derive(Debug)]
pub struct ReferenceRsxSectionParseError;
impl std::fmt::Display for ReferenceRsxSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of ReferenceRsxSectiondescribing-the-ui, rsx-features, attributes, conditional-attributes, custom-attributes, special-attributes, the-html-escape-hatch, boolean-attributes, interpolation, children, fragments, expressions, loops, if-statements",
        )?;
        Ok(())
    }
}
impl std::error::Error for ReferenceRsxSectionParseError {}
#[component(no_case_check)]
pub fn ReferenceRsx(section: ReferenceRsxSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "describing-the-ui",
            Link {
                to: BookRoute::ReferenceRsx {
                    section: ReferenceRsxSection::DescribingTheUi,
                },
                class: "header",
                "Describing the UI"
            }
        }
        p {
            "Dioxus is a "
            em { "declarative" }
            " framework. This means that instead of telling Dioxus what to do (e.g. to \"create an element\" or \"set the color to red\") we simply "
            em { "declare" }
            " what we want the UI to look like using RSX."
        }
        p { "You have already seen a simple example of RSX syntax in the \"hello world\" application:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// define a component that renders a div with the text &quot;Hello, world!&quot;\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ </span><span style=\"color:#ffee99;\">&quot;Hello, world!&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "hello_world_desktop.rs".to_string(),
        }
        p {
            "Here, we use the  "
            code { "rsx!" }
            " macro to "
            em { "declare" }
            " that we want a "
            code { "div" }
            " element, containing the text "
            code { "\"Hello, world!\"" }
            ". Dioxus takes the RSX and constructs a UI from it."
        }
        h2 { id: "rsx-features",
            Link {
                to: BookRoute::ReferenceRsx {
                    section: ReferenceRsxSection::RsxFeatures,
                },
                class: "header",
                "RSX Features"
            }
        }
        p {
            "RSX is very similar to HTML in that it describes elements with attributes and children. Here's an empty  "
            code { "button" }
            " element in RSX, as well as the resulting HTML:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    button {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// attributes / listeners\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// children\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#ffee99;\">&quot;Hello, World!&quot;\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "rsx_overview.rs".to_string(),
        }
        DemoFrame { rsx_overview::Button {} }
        h3 { id: "attributes",
            Link {
                to: BookRoute::ReferenceRsx {
                    section: ReferenceRsxSection::Attributes,
                },
                class: "header",
                "Attributes"
            }
        }
        p {
            "Attributes (and "
            Link {
                to: BookRoute::ReferenceEventHandlers {
                    section: ReferenceEventHandlersSection::Empty,
                },
                "event handlers"
            }
            ") modify the behavior or appearance of the element they are attached to. They are specified inside the "
            code { "{{}}" }
            " brackets, using the "
            code { "name: value" }
            " syntax. You can provide the value as a literal in the RSX:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    img {{\n</span><span style=\"color:#f8f8f2;\">        src: </span><span style=\"color:#ffee99;\">&quot;https://avatars.githubusercontent.com/u/79236386?s=200&amp;v=4&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">        class: </span><span style=\"color:#ffee99;\">&quot;primary_button&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">        width: </span><span style=\"color:#ffee99;\">&quot;10px&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "rsx_overview.rs".to_string(),
        }
        DemoFrame { rsx_overview::Attributes {} }
        p {
            "Some attributes, such as the  "
            code { "type" }
            " attribute for  "
            code { "input" }
            " elements won't work on their own in Rust. This is because  "
            code { "type" }
            " is a reserved Rust keyword. To get around this, Dioxus uses the  "
            code { "r#" }
            " specifier:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    input {{ r</span><span style=\"color:#f92672;\">#</span><span style=\"font-style:italic;color:#66d9ef;\">type</span><span style=\"color:#f8f8f2;\">: </span><span style=\"color:#ffee99;\">&quot;text&quot;</span><span style=\"color:#f8f8f2;\">, color: </span><span style=\"color:#ffee99;\">&quot;red&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "rsx_overview.rs".to_string(),
        }
        blockquote {
            p {
                "Note: All attributes defined in  "
                code { "dioxus-html" }
                " follow the snake_case naming convention. They transform their  "
                code { "snake_case" }
                " names to HTML's  "
                code { "camelCase" }
                " attributes."
            }
        }
        blockquote {
            p {
                "Note: Styles can be used directly outside of the  "
                code { "style:" }
                " attribute. In the above example,  "
                code { "color: \"red\"" }
                " is turned into  "
                code { "style=\"color: red\"" }
                "."
            }
        }
        h4 { id: "conditional-attributes",
            Link {
                to: BookRoute::ReferenceRsx {
                    section: ReferenceRsxSection::ConditionalAttributes,
                },
                class: "header",
                "Conditional Attributes"
            }
        }
        p {
            "You can also conditionally include attributes by using an if statement without an else branch. This is useful for adding an attribute only if a certain condition is met:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> large_font </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">true</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    div {{ class: </span><span style=\"color:#f92672;\">if</span><span style=\"color:#f8f8f2;\"> large_font {{ </span><span style=\"color:#ffee99;\">&quot;text-xl&quot; </span><span style=\"color:#f8f8f2;\">}}, </span><span style=\"color:#ffee99;\">&quot;Hello, World!&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "rsx_overview.rs".to_string(),
        }
        DemoFrame { rsx_overview::ConditionalAttributes {} }
        h4 { id: "custom-attributes",
            Link {
                to: BookRoute::ReferenceRsx {
                    section: ReferenceRsxSection::CustomAttributes,
                },
                class: "header",
                "Custom Attributes"
            }
        }
        p {
            "Dioxus has a pre-configured set of attributes that you can use. RSX is validated at compile time to make sure you didn't specify an invalid attribute. If you want to override this behavior with a custom attribute name, specify the attribute in quotes:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    div {{ </span><span style=\"color:#ffee99;\">&quot;style&quot;</span><span style=\"color:#f8f8f2;\">: </span><span style=\"color:#ffee99;\">&quot;width: 20px; height: 20px; background-color: red;&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "rsx_overview.rs".to_string(),
        }
        DemoFrame { rsx_overview::CustomAttributes {} }
        h3 { id: "special-attributes",
            Link {
                to: BookRoute::ReferenceRsx {
                    section: ReferenceRsxSection::SpecialAttributes,
                },
                class: "header",
                "Special Attributes"
            }
        }
        p { "While most attributes are simply passed on to the HTML, some have special behaviors." }
        h4 { id: "the-html-escape-hatch",
            Link {
                to: BookRoute::ReferenceRsx {
                    section: ReferenceRsxSection::TheHtmlEscapeHatch,
                },
                class: "header",
                "The HTML Escape Hatch"
            }
        }
        p {
            "If you're working with pre-rendered assets, output from templates, or output from a JS library, then you might want to pass HTML directly instead of going through Dioxus. In these instances, reach for  "
            code { "dangerous_inner_html" }
            "."
        }
        p {
            "For example, shipping a markdown-to-Dioxus converter might significantly bloat your final application size. Instead, you'll want to pre-render your markdown to HTML and then include the HTML directly in your output. We use this approach for the "
            Link { to: "https://dioxuslabs.com", "Dioxus homepage" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// this should come from a trusted source\n</span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> contents </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;live &lt;b&gt;dangerously&lt;/b&gt;&quot;</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    div {{ dangerous_inner_html: </span><span style=\"color:#ffee99;\">&quot;{{contents}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "dangerous_inner_html.rs".to_string(),
        }
        DemoFrame { dangerous_inner_html::App {} }
        blockquote {
            p {
                "Note! This attribute is called \"dangerous_inner_html\" because it is "
                strong { "dangerous" }
                " to pass it data you don't trust. If you're not careful, you can easily expose "
                Link { to: "https://en.wikipedia.org/wiki/Cross-site_scripting",
                    "cross-site scripting (XSS)"
                }
                " attacks to your users."
            }
            p {
                "If you're handling untrusted input, make sure to sanitize your HTML before passing it into  "
                code { "dangerous_inner_html" }
                " – or just pass it to a Text Element to escape any HTML tags."
            }
        }
        h4 { id: "boolean-attributes",
            Link {
                to: BookRoute::ReferenceRsx {
                    section: ReferenceRsxSection::BooleanAttributes,
                },
                class: "header",
                "Boolean Attributes"
            }
        }
        p {
            "Most attributes, when rendered, will be rendered exactly as the input you provided. However, some attributes are considered \"boolean\" attributes and just their presence determines whether they affect the output. For these attributes, a provided value of  "
            code { "\"false\"" }
            " will cause them to be removed from the target element."
        }
        p {
            "So this RSX wouldn't actually render the  "
            code { "hidden" }
            " attribute:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    div {{ hidden: </span><span style=\"color:#ff80f4;\">false</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;hello&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "boolean_attribute.rs".to_string(),
        }
        DemoFrame { boolean_attribute::App {} }
        p {
            "Not all attributes work like this however. "
            em { "Only the following attributes" }
            " have this behavior:"
        }
        ul {
            li {
                code { "allowfullscreen" }
            }
            li {
                code { "allowpaymentrequest" }
            }
            li {
                code { "async" }
            }
            li {
                code { "autofocus" }
            }
            li {
                code { "autoplay" }
            }
            li {
                code { "checked" }
            }
            li {
                code { "controls" }
            }
            li {
                code { "default" }
            }
            li {
                code { "defer" }
            }
            li {
                code { "disabled" }
            }
            li {
                code { "formnovalidate" }
            }
            li {
                code { "hidden" }
            }
            li {
                code { "ismap" }
            }
            li {
                code { "itemscope" }
            }
            li {
                code { "loop" }
            }
            li {
                code { "multiple" }
            }
            li {
                code { "muted" }
            }
            li {
                code { "nomodule" }
            }
            li {
                code { "novalidate" }
            }
            li {
                code { "open" }
            }
            li {
                code { "playsinline" }
            }
            li {
                code { "readonly" }
            }
            li {
                code { "required" }
            }
            li {
                code { "reversed" }
            }
            li {
                code { "selected" }
            }
            li {
                code { "truespeed" }
            }
        }
        p {
            "For any other attributes, a value of  "
            code { "\"false\"" }
            " will be sent directly to the DOM."
        }
        h3 { id: "interpolation",
            Link {
                to: BookRoute::ReferenceRsx {
                    section: ReferenceRsxSection::Interpolation,
                },
                class: "header",
                "Interpolation"
            }
        }
        p {
            "Similarly to how you can "
            Link { to: "https://doc.rust-lang.org/rust-by-example/hello/print/fmt.html",
                "format"
            }
            " Rust strings, you can also interpolate in RSX text. Use "
            code { "{{variable}}" }
            " to Display the value of a variable in a string, or "
            code { "{{variable:?}}" }
            " to use the Debug representation:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> coordinates </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ff80f4;\">42</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> country </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;es&quot;</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    div {{\n</span><span style=\"color:#f8f8f2;\">        class: </span><span style=\"color:#ffee99;\">&quot;country-{{country}}&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">        left: </span><span style=\"color:#ffee99;\">&quot;{{coordinates.0:?}}&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">        top: </span><span style=\"color:#ffee99;\">&quot;{{coordinates.1:?}}&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// arbitrary expressions are allowed,\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// as long as they don&#39;t contain `{{}}`\n</span><span style=\"color:#f8f8f2;\">        div {{ </span><span style=\"color:#ffee99;\">&quot;{{country.to_uppercase()}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        div {{ </span><span style=\"color:#ffee99;\">&quot;{{7*6}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// {{}} can be escaped with {{{{}}}}\n</span><span style=\"color:#f8f8f2;\">        div {{ </span><span style=\"color:#ffee99;\">&quot;{{{{}}}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "rsx_overview.rs".to_string(),
        }
        DemoFrame { rsx_overview::Formatting {} }
        h3 { id: "children",
            Link {
                to: BookRoute::ReferenceRsx {
                    section: ReferenceRsxSection::Children,
                },
                class: "header",
                "Children"
            }
        }
        p {
            "To add children to an element, put them inside the  "
            code { "{{}}" }
            " brackets after all attributes and listeners in the element. They can be other elements, text, or "
            Link {
                to: BookRoute::ReferenceComponents {
                    section: ReferenceComponentsSection::Empty,
                },
                "components"
            }
            ". For example, you could have an "
            code { "ol" }
            " (ordered list) element, containing 3 "
            code { "li" }
            " (list item) elements, each of which contains some text:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    ol {{\n</span><span style=\"color:#f8f8f2;\">        li {{ </span><span style=\"color:#ffee99;\">&quot;First Item&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        li {{ </span><span style=\"color:#ffee99;\">&quot;Second Item&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        li {{ </span><span style=\"color:#ffee99;\">&quot;Third Item&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "rsx_overview.rs".to_string(),
        }
        DemoFrame { rsx_overview::Children {} }
        h3 { id: "fragments",
            Link {
                to: BookRoute::ReferenceRsx {
                    section: ReferenceRsxSection::Fragments,
                },
                class: "header",
                "Fragments"
            }
        }
        p {
            "You can render multiple elements at the top level of  "
            code { "rsx!" }
            " and they will be automatically grouped."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    p {{ </span><span style=\"color:#ffee99;\">&quot;First Item&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    p {{ </span><span style=\"color:#ffee99;\">&quot;Second Item&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "rsx_overview.rs".to_string(),
        }
        DemoFrame { rsx_overview::ManyRoots {} }
        h3 { id: "expressions",
            Link {
                to: BookRoute::ReferenceRsx {
                    section: ReferenceRsxSection::Expressions,
                },
                class: "header",
                "Expressions"
            }
        }
        p {
            "You can include arbitrary Rust expressions as children within RSX by surrounding your expression with  "
            code { "{{}}" }
            "s. Any expression that implements "
            Link { to: "https://docs.rs/dioxus-core/0.3/dioxus_core/trait.IntoDynNode.html",
                "IntoDynNode"
            }
            " can be used within rsx. This is useful for displaying data from an "
            Link { to: "https://doc.rust-lang.org/stable/book/ch13-02-iterators.html#processing-a-series-of-items-with-iterators",
                "iterator"
            }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> text </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;Dioxus&quot;</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    span {{\n</span><span style=\"color:#f8f8f2;\">        {{text.</span><span style=\"color:#66d9ef;\">to_uppercase</span><span style=\"color:#f8f8f2;\">()}}\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// create a list of text from 0 to 9\n</span><span style=\"color:#f8f8f2;\">        {{(</span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f92672;\">..</span><span style=\"color:#ff80f4;\">10</span><span style=\"color:#f8f8f2;\">).</span><span style=\"color:#66d9ef;\">map</span><span style=\"color:#f8f8f2;\">(|</span><span style=\"font-style:italic;color:#fd971f;\">i</span><span style=\"color:#f8f8f2;\">| rsx! {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#ffee99;\">&quot;{{i}}&quot;\n</span><span style=\"color:#f8f8f2;\">        }})}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "rsx_overview.rs".to_string(),
        }
        DemoFrame { rsx_overview::Expression {} }
        h3 { id: "loops",
            Link {
                to: BookRoute::ReferenceRsx {
                    section: ReferenceRsxSection::Loops,
                },
                class: "header",
                "Loops"
            }
        }
        p { "In addition to iterators you can also use for loops directly within RSX:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// use a for loop where the body itself is RSX\n</span><span style=\"color:#f8f8f2;\">    div {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// create a list of text from 0 to 9\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">for</span><span style=\"color:#f8f8f2;\"> i </span><span style=\"color:#f92672;\">in </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f92672;\">..</span><span style=\"color:#ff80f4;\">3 </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#8c8c8c;\">// NOTE: the body of the loop is RSX not a rust statement\n</span><span style=\"color:#f8f8f2;\">            div {{ </span><span style=\"color:#ffee99;\">&quot;{{i}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// iterator equivalent\n</span><span style=\"color:#f8f8f2;\">    div {{\n</span><span style=\"color:#f8f8f2;\">        {{(</span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f92672;\">..</span><span style=\"color:#ff80f4;\">3</span><span style=\"color:#f8f8f2;\">).</span><span style=\"color:#66d9ef;\">map</span><span style=\"color:#f8f8f2;\">(|</span><span style=\"font-style:italic;color:#fd971f;\">i</span><span style=\"color:#f8f8f2;\">| rsx! {{\n</span><span style=\"color:#f8f8f2;\">            div {{ </span><span style=\"color:#ffee99;\">&quot;{{i}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }})}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "rsx_overview.rs".to_string(),
        }
        DemoFrame { rsx_overview::Loops {} }
        h3 { id: "if-statements",
            Link {
                to: BookRoute::ReferenceRsx {
                    section: ReferenceRsxSection::IfStatements,
                },
                class: "header",
                "If statements"
            }
        }
        p { "You can also use if statements without an else branch within RSX:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// use if statements without an else\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">if </span><span style=\"color:#ff80f4;\">true </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        div {{ </span><span style=\"color:#ffee99;\">&quot;true&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "rsx_overview.rs".to_string(),
        }
        DemoFrame { rsx_overview::IfStatements {} }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum ReferenceComponentsSection {
    #[default]
    Empty,
    Components,
}
impl std::str::FromStr for ReferenceComponentsSection {
    type Err = ReferenceComponentsSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "components" => Ok(Self::Components),
            _ => Err(ReferenceComponentsSectionParseError),
        }
    }
}
impl std::fmt::Display for ReferenceComponentsSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Components => f.write_str("components"),
        }
    }
}
#[derive(Debug)]
pub struct ReferenceComponentsSectionParseError;
impl std::fmt::Display for ReferenceComponentsSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str("Invalid section name. Expected one of ReferenceComponentsSectioncomponents")?;
        Ok(())
    }
}
impl std::error::Error for ReferenceComponentsSectionParseError {}
#[component(no_case_check)]
pub fn ReferenceComponents(section: ReferenceComponentsSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "components",
            Link {
                to: BookRoute::ReferenceComponents {
                    section: ReferenceComponentsSection::Components,
                },
                class: "header",
                "Components"
            }
        }
        p {
            "Just like you wouldn't want to write a complex program in a single, long,  "
            code { "main" }
            " function, you shouldn't build a complex UI in a single  "
            code { "App" }
            " function. Instead, you should break down the functionality of an app in logical parts called components."
        }
        p {
            "A component is a Rust function, named in UpperCamelCase, that either takes no parameters or a properties struct and returns an  "
            code { "Element" }
            " describing the UI it wants to render."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// define a component that renders a div with the text &quot;Hello, world!&quot;\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ </span><span style=\"color:#ffee99;\">&quot;Hello, world!&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "hello_world_desktop.rs".to_string(),
        }
        blockquote {
            p {
                "You'll probably want to add  "
                code { "#![allow(non_snake_case)]" }
                " to the top of your crate to avoid warnings about UpperCamelCase component names"
            }
        }
        p {
            "A Component is responsible for some rendering task – typically, rendering an isolated part of the user interface. For example, you could have an  "
            code { "About" }
            " component that renders a short description of Dioxus Labs:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">About</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        p {{\n</span><span style=\"color:#f8f8f2;\">            b {{ </span><span style=\"color:#ffee99;\">&quot;Dioxus Labs&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot; An Open Source project dedicated to making Rust UI wonderful.&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "components.rs".to_string(),
        }
        DemoFrame { components::About {} }
        p {
            "Then, you can render your component in another component, similarly to how elements are rendered:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        About {{}}\n</span><span style=\"color:#f8f8f2;\">        About {{}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "components.rs".to_string(),
        }
        DemoFrame { components::App {} }
        blockquote {
            p {
                "At this point, it might seem like components are nothing more than functions. However, as you learn more about the features of Dioxus, you'll see that they are actually more powerful!"
            }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum ReferenceComponentPropsSection {
    #[default]
    Empty,
    ComponentProps,
    Deriveprops,
    PropOptions,
    OptionalProps,
    ExplicitlyRequiredOption,
    DefaultProps,
    AutomaticConversionWithInto,
    TheComponentMacro,
    ComponentChildren,
    TheChildrenField,
}
impl std::str::FromStr for ReferenceComponentPropsSection {
    type Err = ReferenceComponentPropsSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "component-props" => Ok(Self::ComponentProps),
            "deriveprops" => Ok(Self::Deriveprops),
            "prop-options" => Ok(Self::PropOptions),
            "optional-props" => Ok(Self::OptionalProps),
            "explicitly-required-option" => Ok(Self::ExplicitlyRequiredOption),
            "default-props" => Ok(Self::DefaultProps),
            "automatic-conversion-with-into" => Ok(Self::AutomaticConversionWithInto),
            "the-component-macro" => Ok(Self::TheComponentMacro),
            "component-children" => Ok(Self::ComponentChildren),
            "the-children-field" => Ok(Self::TheChildrenField),
            _ => Err(ReferenceComponentPropsSectionParseError),
        }
    }
}
impl std::fmt::Display for ReferenceComponentPropsSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::ComponentProps => f.write_str("component-props"),
            Self::Deriveprops => f.write_str("deriveprops"),
            Self::PropOptions => f.write_str("prop-options"),
            Self::OptionalProps => f.write_str("optional-props"),
            Self::ExplicitlyRequiredOption => f.write_str("explicitly-required-option"),
            Self::DefaultProps => f.write_str("default-props"),
            Self::AutomaticConversionWithInto => f.write_str("automatic-conversion-with-into"),
            Self::TheComponentMacro => f.write_str("the-component-macro"),
            Self::ComponentChildren => f.write_str("component-children"),
            Self::TheChildrenField => f.write_str("the-children-field"),
        }
    }
}
#[derive(Debug)]
pub struct ReferenceComponentPropsSectionParseError;
impl std::fmt::Display for ReferenceComponentPropsSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of ReferenceComponentPropsSectioncomponent-props, deriveprops, prop-options, optional-props, explicitly-required-option, default-props, automatic-conversion-with-into, the-component-macro, component-children, the-children-field",
        )?;
        Ok(())
    }
}
impl std::error::Error for ReferenceComponentPropsSectionParseError {}
#[component(no_case_check)]
pub fn ReferenceComponentProps(
    section: ReferenceComponentPropsSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "component-props",
            Link {
                to: BookRoute::ReferenceComponentProps {
                    section: ReferenceComponentPropsSection::ComponentProps,
                },
                class: "header",
                "Component Props"
            }
        }
        p {
            "Just like you can pass arguments to a function or attributes to an element, you can pass props to a component that customize its behavior! The components we've seen so far didn't accept any props – so let's write some components that do."
        }
        h2 { id: "deriveprops",
            Link {
                to: BookRoute::ReferenceComponentProps {
                    section: ReferenceComponentPropsSection::Deriveprops,
                },
                class: "header",
                "derive(Props)"
            }
        }
        p {
            "Component props are a single struct annotated with  "
            code { "#[derive(PartialEq, Clone, Props)]" }
            ". For a component to accept props, the type of its argument must be  "
            code { "YourPropsStruct" }
            "."
        }
        p { "Example:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(PartialEq, Props, Clone)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">LikesProps {{\n</span><span style=\"color:#f8f8f2;\">    score: </span><span style=\"font-style:italic;color:#66d9ef;\">i32</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Likes</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">props</span><span style=\"color:#f8f8f2;\">: LikesProps) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;This post has &quot;\n</span><span style=\"color:#f8f8f2;\">            b {{ </span><span style=\"color:#ffee99;\">&quot;{{props.score}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot; likes&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "component_owned_props.rs".to_string(),
        }
        p {
            "You can then pass prop values to the component the same way you would pass attributes to an element:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{ Likes {{ score: </span><span style=\"color:#ff80f4;\">42 </span><span style=\"color:#f8f8f2;\">}} }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "component_owned_props.rs".to_string(),
        }
        DemoFrame { component_owned_props::App {} }
        h2 { id: "prop-options",
            Link {
                to: BookRoute::ReferenceComponentProps {
                    section: ReferenceComponentPropsSection::PropOptions,
                },
                class: "header",
                "Prop Options"
            }
        }
        p {
            "The  "
            code { "#[derive(Props)]" }
            " macro has some features that let you customize the behavior of props."
        }
        h3 { id: "optional-props",
            Link {
                to: BookRoute::ReferenceComponentProps {
                    section: ReferenceComponentPropsSection::OptionalProps,
                },
                class: "header",
                "Optional Props"
            }
        }
        p {
            "You can create optional fields by using the  "
            code { "Option<…>" }
            " type for a field:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(PartialEq, Clone, Props)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">OptionalProps {{\n</span><span style=\"color:#f8f8f2;\">    title: String,\n</span><span style=\"color:#f8f8f2;\">    subtitle: Option&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Title</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">props</span><span style=\"color:#f8f8f2;\">: OptionalProps) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        h1 {{ </span><span style=\"color:#ffee99;\">&quot;{{props.title}}: &quot;</span><span style=\"color:#f8f8f2;\">, {{props.subtitle.</span><span style=\"color:#66d9ef;\">unwrap_or_else</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ffee99;\">&quot;No subtitle provided&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">())}} }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "component_props_options.rs".to_string(),
        }
        p { "Then, you can choose to either provide them or not:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">Title {{ title: </span><span style=\"color:#ffee99;\">&quot;Some Title&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">Title {{ title: </span><span style=\"color:#ffee99;\">&quot;Some Title&quot;</span><span style=\"color:#f8f8f2;\">, subtitle: </span><span style=\"color:#ffee99;\">&quot;Some Subtitle&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#8c8c8c;\">// Providing an Option explicitly won&#39;t compile though:\n</span><span style=\"color:#8c8c8c;\">// Title {{\n</span><span style=\"color:#8c8c8c;\">//     title: &quot;Some Title&quot;,\n</span><span style=\"color:#8c8c8c;\">//     subtitle: None,\n</span><span style=\"color:#8c8c8c;\">// }},</span></pre>\n",
            name: "component_props_options.rs".to_string(),
        }
        h3 { id: "explicitly-required-option",
            Link {
                to: BookRoute::ReferenceComponentProps {
                    section: ReferenceComponentPropsSection::ExplicitlyRequiredOption,
                },
                class: "header",
                "Explicitly Required Option"
            }
        }
        p {
            "If you want to explicitly require an  "
            code { "Option" }
            ", and not an optional prop, you can annotate it with  "
            code { "#[props(!optional)]" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(PartialEq, Clone, Props)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">ExplicitOptionProps {{\n</span><span style=\"color:#f8f8f2;\">    title: String,\n</span><span style=\"color:#f8f8f2;\">    #[props(!optional)]\n</span><span style=\"color:#f8f8f2;\">    subtitle: Option&lt;String&gt;,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">ExplicitOption</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">props</span><span style=\"color:#f8f8f2;\">: ExplicitOptionProps) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        h1 {{ </span><span style=\"color:#ffee99;\">&quot;{{props.title}}: &quot;</span><span style=\"color:#f8f8f2;\">, {{props.subtitle.</span><span style=\"color:#66d9ef;\">unwrap_or_else</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ffee99;\">&quot;No subtitle provided&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">())}} }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "component_props_options.rs".to_string(),
        }
        p {
            "Then, you have to explicitly pass either  "
            code { "Some(\"str\")" }
            " or  "
            code { "None" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">ExplicitOption {{ title: </span><span style=\"color:#ffee99;\">&quot;Some Title&quot;</span><span style=\"color:#f8f8f2;\">, subtitle: </span><span style=\"font-style:italic;color:#66d9ef;\">None </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">ExplicitOption {{ title: </span><span style=\"color:#ffee99;\">&quot;Some Title&quot;</span><span style=\"color:#f8f8f2;\">, subtitle: </span><span style=\"font-style:italic;color:#66d9ef;\">Some</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;Some Title&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">()) }}\n</span><span style=\"color:#8c8c8c;\">// This won&#39;t compile:\n</span><span style=\"color:#8c8c8c;\">// ExplicitOption {{\n</span><span style=\"color:#8c8c8c;\">//     title: &quot;Some Title&quot;,\n</span><span style=\"color:#8c8c8c;\">// }},</span></pre>\n",
            name: "component_props_options.rs".to_string(),
        }
        h3 { id: "default-props",
            Link {
                to: BookRoute::ReferenceComponentProps {
                    section: ReferenceComponentPropsSection::DefaultProps,
                },
                class: "header",
                "Default Props"
            }
        }
        p {
            "You can use  "
            code { "#[props(default = 42)]" }
            " to make a field optional and specify its default value:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(PartialEq, Props, Clone)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">DefaultProps {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// default to 42 when not provided\n</span><span style=\"color:#f8f8f2;\">    #[props(default = 42)]\n</span><span style=\"color:#f8f8f2;\">    number: </span><span style=\"font-style:italic;color:#66d9ef;\">i64</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">DefaultComponent</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">props</span><span style=\"color:#f8f8f2;\">: DefaultProps) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{ h1 {{ </span><span style=\"color:#ffee99;\">&quot;{{props.number}}&quot; </span><span style=\"color:#f8f8f2;\">}} }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "component_props_options.rs".to_string(),
        }
        p { "Then, similarly to optional props, you don't have to provide it:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">DefaultComponent {{ number: </span><span style=\"color:#ff80f4;\">5 </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">DefaultComponent {{}}</span></pre>\n",
            name: "component_props_options.rs".to_string(),
        }
        h3 { id: "automatic-conversion-with-into",
            Link {
                to: BookRoute::ReferenceComponentProps {
                    section: ReferenceComponentPropsSection::AutomaticConversionWithInto,
                },
                class: "header",
                "Automatic Conversion with into"
            }
        }
        p {
            "It is common for Rust functions to accept  "
            code { "impl Into<SomeType>" }
            " rather than just  "
            code { "SomeType" }
            " to support a wider range of parameters. If you want similar functionality with props, you can use  "
            code { "#[props(into)]" }
            ". For example, you could add it on a  "
            code { "String" }
            " prop – and  "
            code { "&str" }
            " will also be automatically accepted, as it can be converted into  "
            code { "String" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(PartialEq, Props, Clone)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">IntoProps {{\n</span><span style=\"color:#f8f8f2;\">    #[props(into)]\n</span><span style=\"color:#f8f8f2;\">    string: String,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">IntoComponent</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">props</span><span style=\"color:#f8f8f2;\">: IntoProps) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{ h1 {{ </span><span style=\"color:#ffee99;\">&quot;{{props.string}}&quot; </span><span style=\"color:#f8f8f2;\">}} }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "component_props_options.rs".to_string(),
        }
        p { "Then, you can use it so:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">IntoComponent {{ string: </span><span style=\"color:#ffee99;\">&quot;some &amp;str&quot; </span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "component_props_options.rs".to_string(),
        }
        h2 { id: "the-component-macro",
            Link {
                to: BookRoute::ReferenceComponentProps {
                    section: ReferenceComponentPropsSection::TheComponentMacro,
                },
                class: "header",
                "The component macro"
            }
        }
        p {
            "So far, every Component function we've seen had a corresponding ComponentProps struct to pass in props. This was quite verbose... Wouldn't it be nice to have props as simple function arguments? Then we wouldn't need to define a Props struct, and instead of typing  "
            code { "props.whatever" }
            ", we could just use  "
            code { "whatever" }
            " directly!"
        }
        p {
            code { "component" }
            " allows you to do just that. Instead of typing the \"full\" version:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(Props, Clone, PartialEq)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">TitleCardProps {{\n</span><span style=\"color:#f8f8f2;\">    title: String,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">TitleCard</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">props</span><span style=\"color:#f8f8f2;\">: TitleCardProps) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx!{{\n</span><span style=\"color:#f8f8f2;\">        h1 {{ </span><span style=\"color:#ffee99;\">&quot;{{props.title}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "...you can define a function that accepts props as arguments. Then, just annotate it with  "
            code { "#[component]" }
            ", and the macro will turn it into a regular Component for you:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">TitleCard</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">title</span><span style=\"color:#f8f8f2;\">: String) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx!{{\n</span><span style=\"color:#f8f8f2;\">        h1 {{ </span><span style=\"color:#ffee99;\">&quot;{{title}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        blockquote {
            p {
                "While the new Component is shorter and easier to read, this macro should not be used by library authors since you have less control over Prop documentation."
            }
        }
        h2 { id: "component-children",
            Link {
                to: BookRoute::ReferenceComponentProps {
                    section: ReferenceComponentPropsSection::ComponentChildren,
                },
                class: "header",
                "Component Children"
            }
        }
        p {
            "In some cases, you may wish to create a component that acts as a container for some other content, without the component needing to know what that content is. To achieve this, create a prop of type  "
            code { "Element" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(PartialEq, Clone, Props)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">ClickableProps {{\n</span><span style=\"color:#f8f8f2;\">    href: String,\n</span><span style=\"color:#f8f8f2;\">    body: Element,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Clickable</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">props</span><span style=\"color:#f8f8f2;\">: ClickableProps) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        a {{ href: </span><span style=\"color:#ffee99;\">&quot;{{props.href}}&quot;</span><span style=\"color:#f8f8f2;\">, class: </span><span style=\"color:#ffee99;\">&quot;fancy-button&quot;</span><span style=\"color:#f8f8f2;\">, {{props.body}} }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "component_element_props.rs".to_string(),
        }
        p {
            "Then, when rendering the component, you can pass in the output of  "
            code { "rsx!{{...}}" }
            ": "
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    Clickable {{\n</span><span style=\"color:#f8f8f2;\">        href: </span><span style=\"color:#ffee99;\">&quot;https://www.youtube.com/watch?v=C-M2hs3sXGo&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">        body: rsx! {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;How to &quot;</span><span style=\"color:#f8f8f2;\"> i {{ </span><span style=\"color:#ffee99;\">&quot;not&quot; </span><span style=\"color:#f8f8f2;\">}} </span><span style=\"color:#ffee99;\">&quot; be seen&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "component_element_props.rs".to_string(),
        }
        blockquote {
            p {
                "Warning: While it may compile, do not include the same  "
                code { "Element" }
                " more than once in the RSX. The resulting behavior is unspecified."
            }
        }
        h3 { id: "the-children-field",
            Link {
                to: BookRoute::ReferenceComponentProps {
                    section: ReferenceComponentPropsSection::TheChildrenField,
                },
                class: "header",
                "The children field"
            }
        }
        p {
            "Rather than passing the RSX through a regular prop, you may wish to accept children similarly to how elements can have children. The \"magic\"  "
            code { "children" }
            " prop lets you achieve this:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(PartialEq, Clone, Props)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">ClickableProps {{\n</span><span style=\"color:#f8f8f2;\">    href: String,\n</span><span style=\"color:#f8f8f2;\">    children: Element,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Clickable</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">props</span><span style=\"color:#f8f8f2;\">: ClickableProps) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        a {{ href: </span><span style=\"color:#ffee99;\">&quot;{{props.href}}&quot;</span><span style=\"color:#f8f8f2;\">, class: </span><span style=\"color:#ffee99;\">&quot;fancy-button&quot;</span><span style=\"color:#f8f8f2;\">, {{props.children}} }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "component_children.rs".to_string(),
        }
        p {
            "This makes using the component much simpler: simply put the RSX inside the  "
            code { "{{}}" }
            " brackets – and there is no need for a  "
            code { "render" }
            " call or another macro!"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    Clickable {{ href: </span><span style=\"color:#ffee99;\">&quot;https://www.youtube.com/watch?v=C-M2hs3sXGo&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#ffee99;\">&quot;How to &quot;\n</span><span style=\"color:#f8f8f2;\">        i {{ </span><span style=\"color:#ffee99;\">&quot;not&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#ffee99;\">&quot; be seen&quot;\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "component_children.rs".to_string(),
        }
        DemoFrame { component_children::App {} }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum ReferenceEventHandlersSection {
    #[default]
    Empty,
    EventHandlers,
    TheEventObject,
    EventPropagation,
    PreventDefault,
    HandlerProps,
    CustomData,
    ReturningAValueFromAnEventHandler,
}
impl std::str::FromStr for ReferenceEventHandlersSection {
    type Err = ReferenceEventHandlersSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "event-handlers" => Ok(Self::EventHandlers),
            "the-event-object" => Ok(Self::TheEventObject),
            "event-propagation" => Ok(Self::EventPropagation),
            "prevent-default" => Ok(Self::PreventDefault),
            "handler-props" => Ok(Self::HandlerProps),
            "custom-data" => Ok(Self::CustomData),
            "returning-a-value-from-an-event-handler" => {
                Ok(Self::ReturningAValueFromAnEventHandler)
            }
            _ => Err(ReferenceEventHandlersSectionParseError),
        }
    }
}
impl std::fmt::Display for ReferenceEventHandlersSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::EventHandlers => f.write_str("event-handlers"),
            Self::TheEventObject => f.write_str("the-event-object"),
            Self::EventPropagation => f.write_str("event-propagation"),
            Self::PreventDefault => f.write_str("prevent-default"),
            Self::HandlerProps => f.write_str("handler-props"),
            Self::CustomData => f.write_str("custom-data"),
            Self::ReturningAValueFromAnEventHandler => {
                f.write_str("returning-a-value-from-an-event-handler")
            }
        }
    }
}
#[derive(Debug)]
pub struct ReferenceEventHandlersSectionParseError;
impl std::fmt::Display for ReferenceEventHandlersSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of ReferenceEventHandlersSectionevent-handlers, the-event-object, event-propagation, prevent-default, handler-props, custom-data, returning-a-value-from-an-event-handler",
        )?;
        Ok(())
    }
}
impl std::error::Error for ReferenceEventHandlersSectionParseError {}
#[component(no_case_check)]
pub fn ReferenceEventHandlers(section: ReferenceEventHandlersSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "event-handlers",
            Link {
                to: BookRoute::ReferenceEventHandlers {
                    section: ReferenceEventHandlersSection::EventHandlers,
                },
                class: "header",
                "Event Handlers"
            }
        }
        p {
            "Event handlers are used to respond to user actions. For example, an event handler could be triggered when the user clicks, scrolls, moves the mouse, or types a character."
        }
        p {
            "Event handlers are attached to elements. For example, we usually don't care about all the clicks that happen within an app, only those on a particular button."
        }
        p {
            "Event handlers are similar to regular attributes, but their name usually starts with  "
            code { "on" }
            "- and they accept closures as values. The closure will be called whenever the event it listens for is triggered and will be passed that event."
        }
        p {
            "For example, to handle clicks on an element, we can specify an  "
            code { "onclick" }
            " handler:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    button {{ onclick: </span><span style=\"color:#f92672;\">move |</span><span style=\"color:#f8f8f2;\">event</span><span style=\"color:#f92672;\">| </span><span style=\"color:#f8f8f2;\">log::info</span><span style=\"color:#f92672;\">!</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;Clicked! Event: {{event:?}}&quot;</span><span style=\"color:#f8f8f2;\">), </span><span style=\"color:#ffee99;\">&quot;click me!&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "event_click.rs".to_string(),
        }
        DemoFrame { event_click::App {} }
        h2 { id: "the-event-object",
            Link {
                to: BookRoute::ReferenceEventHandlers {
                    section: ReferenceEventHandlersSection::TheEventObject,
                },
                class: "header",
                "The Event object"
            }
        }
        p {
            "Event handlers receive an "
            Link { to: "https://docs.rs/dioxus-core/latest/dioxus_core/struct.Event.html",
                code { "Event" }
            }
            " object containing information about the event. Different types of events contain different types of data. For example, mouse-related events contain "
            Link { to: "https://docs.rs/dioxus/latest/dioxus/events/struct.MouseData.html",
                code { "MouseData" }
            }
            ", which tells you things like where the mouse was clicked and what mouse buttons were used."
        }
        p { "In the example above, this event data was logged to the terminal:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">Clicked</span><span style=\"color:#f92672;\">!</span><span style=\"color:#f8f8f2;\"> Event: UiEvent {{ bubble_state: Cell {{ value: </span><span style=\"color:#ff80f4;\">true </span><span style=\"color:#f8f8f2;\">}}, data: MouseData {{ coordinates: Coordinates {{ screen: (</span><span style=\"color:#ff80f4;\">242.0</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ff80f4;\">256.0</span><span style=\"color:#f8f8f2;\">), client: (</span><span style=\"color:#ff80f4;\">26.0</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ff80f4;\">17.0</span><span style=\"color:#f8f8f2;\">), element: (</span><span style=\"color:#ff80f4;\">16.0</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ff80f4;\">7.0</span><span style=\"color:#f8f8f2;\">), page: (</span><span style=\"color:#ff80f4;\">26.0</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ff80f4;\">17.0</span><span style=\"color:#f8f8f2;\">) }}, modifiers: (empty), held_buttons: EnumSet(), trigger_button: </span><span style=\"font-style:italic;color:#66d9ef;\">Some</span><span style=\"color:#f8f8f2;\">(Primary) }} }}\n</span><span style=\"color:#f8f8f2;\">Clicked</span><span style=\"color:#f92672;\">!</span><span style=\"color:#f8f8f2;\"> Event: UiEvent {{ bubble_state: Cell {{ value: </span><span style=\"color:#ff80f4;\">true </span><span style=\"color:#f8f8f2;\">}}, data: MouseData {{ coordinates: Coordinates {{ screen: (</span><span style=\"color:#ff80f4;\">242.0</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ff80f4;\">256.0</span><span style=\"color:#f8f8f2;\">), client: (</span><span style=\"color:#ff80f4;\">26.0</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ff80f4;\">17.0</span><span style=\"color:#f8f8f2;\">), element: (</span><span style=\"color:#ff80f4;\">16.0</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ff80f4;\">7.0</span><span style=\"color:#f8f8f2;\">), page: (</span><span style=\"color:#ff80f4;\">26.0</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ff80f4;\">17.0</span><span style=\"color:#f8f8f2;\">) }}, modifiers: (empty), held_buttons: EnumSet(), trigger_button: </span><span style=\"font-style:italic;color:#66d9ef;\">Some</span><span style=\"color:#f8f8f2;\">(Primary) }} }}</span></pre>\n",
        }
        p {
            "To learn what the different event types for HTML provide, read the "
            Link { to: "https://docs.rs/dioxus-html/latest/dioxus_html/events/index.html",
                "events module docs"
            }
            "."
        }
        h3 { id: "event-propagation",
            Link {
                to: BookRoute::ReferenceEventHandlers {
                    section: ReferenceEventHandlersSection::EventPropagation,
                },
                class: "header",
                "Event propagation"
            }
        }
        p {
            "Some events will trigger first on the element the event originated at upward. For example, a click event on a  "
            code { "button" }
            " inside a  "
            code { "div" }
            " would first trigger the button's event listener and then the div's event listener."
        }
        blockquote {
            p {
                "For more information about event propagation see "
                Link { to: "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#event_bubbling",
                    "the mdn docs on event bubbling"
                }
            }
        }
        p {
            "If you want to prevent this behavior, you can call  "
            code { "stop_propagation()" }
            " on the event:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    div {{ onclick: </span><span style=\"color:#f92672;\">move |</span><span style=\"color:#f8f8f2;\">_event</span><span style=\"color:#f92672;\">| </span><span style=\"color:#f8f8f2;\">{{}},\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#ffee99;\">&quot;outer&quot;\n</span><span style=\"color:#f8f8f2;\">        button {{\n</span><span style=\"color:#f8f8f2;\">            onclick: </span><span style=\"color:#f92672;\">move |</span><span style=\"color:#f8f8f2;\">event</span><span style=\"color:#f92672;\">| </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">                event.</span><span style=\"color:#66d9ef;\">stop_propagation</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">            }},\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;inner&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "event_nested.rs".to_string(),
        }
        h2 { id: "prevent-default",
            Link {
                to: BookRoute::ReferenceEventHandlers {
                    section: ReferenceEventHandlersSection::PreventDefault,
                },
                class: "header",
                "Prevent Default"
            }
        }
        p {
            "Some events have a default behavior. For keyboard events, this might be entering the typed character. For mouse events, this might be selecting some text."
        }
        p {
            "In some instances, might want to avoid this default behavior. For this, you can add the  "
            code { "prevent_default" }
            " attribute with the name of the handler whose default behavior you want to stop. This attribute can be used for multiple handlers using their name separated by spaces:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    a {{\n</span><span style=\"color:#f8f8f2;\">        href: </span><span style=\"color:#ffee99;\">&quot;https://example.com&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">        onclick: |</span><span style=\"font-style:italic;color:#fd971f;\">evt</span><span style=\"color:#f8f8f2;\">| {{\n</span><span style=\"color:#f8f8f2;\">            evt.</span><span style=\"color:#66d9ef;\">prevent_default</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">            log::info</span><span style=\"color:#f92672;\">!</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;link clicked&quot;</span><span style=\"color:#f8f8f2;\">)\n</span><span style=\"color:#f8f8f2;\">        }},\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#ffee99;\">&quot;example.com&quot;\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "event_prevent_default.rs".to_string(),
        }
        DemoFrame { event_prevent_default::App {} }
        p { "Any event handlers will still be called." }
        h2 { id: "handler-props",
            Link {
                to: BookRoute::ReferenceEventHandlers {
                    section: ReferenceEventHandlersSection::HandlerProps,
                },
                class: "header",
                "Handler Props"
            }
        }
        p {
            "Sometimes, you might want to make a component that accepts an event handler. A simple example would be a  "
            code { "FancyButton" }
            " component, which accepts an  "
            code { "onclick" }
            " handler:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(PartialEq, Clone, Props)]\n</span><span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">FancyButtonProps {{\n</span><span style=\"color:#f8f8f2;\">    onclick: EventHandler&lt;MouseEvent&gt;,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">FancyButton</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">props</span><span style=\"color:#f8f8f2;\">: FancyButtonProps) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        button {{\n</span><span style=\"color:#f8f8f2;\">            class: </span><span style=\"color:#ffee99;\">&quot;fancy-button&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            onclick: </span><span style=\"color:#f92672;\">move |</span><span style=\"color:#f8f8f2;\">evt</span><span style=\"color:#f92672;\">|</span><span style=\"color:#f8f8f2;\"> props.onclick.</span><span style=\"color:#66d9ef;\">call</span><span style=\"color:#f8f8f2;\">(evt),\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;click me pls.&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "event_handler_prop.rs".to_string(),
        }
        p { "Then, you can use it like any other handler:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    FancyButton {{\n</span><span style=\"color:#f8f8f2;\">        onclick: </span><span style=\"color:#f92672;\">move |</span><span style=\"color:#f8f8f2;\">event</span><span style=\"color:#f92672;\">| </span><span style=\"color:#f8f8f2;\">println!(</span><span style=\"color:#ffee99;\">&quot;Clicked! </span><span style=\"color:#ff80f4;\">{{event:?}}</span><span style=\"color:#ffee99;\">&quot;</span><span style=\"color:#f8f8f2;\">),\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "event_handler_prop.rs".to_string(),
        }
        blockquote {
            p {
                "Note: just like any other attribute, you can name the handlers anything you want! Any closure you pass in will automatically be turned into an  "
                code { "EventHandler" }
                "."
            }
        }
        h2 { id: "custom-data",
            Link {
                to: BookRoute::ReferenceEventHandlers {
                    section: ReferenceEventHandlersSection::CustomData,
                },
                class: "header",
                "Custom Data"
            }
        }
        p {
            "Event Handlers are generic over any type, so you can pass in any data you want to them, e.g:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">ComplexData(</span><span style=\"font-style:italic;color:#66d9ef;\">i32</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[derive(PartialEq, Clone, Props)]\n</span><span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">CustomFancyButtonProps {{\n</span><span style=\"color:#f8f8f2;\">    onclick: EventHandler&lt;ComplexData&gt;,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">CustomFancyButton</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">props</span><span style=\"color:#f8f8f2;\">: CustomFancyButtonProps) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        button {{\n</span><span style=\"color:#f8f8f2;\">            class: </span><span style=\"color:#ffee99;\">&quot;fancy-button&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> props.onclick.</span><span style=\"color:#66d9ef;\">call</span><span style=\"color:#f8f8f2;\">(ComplexData(</span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">)),\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;click me pls.&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "event_handler_prop.rs".to_string(),
        }
        h2 { id: "returning-a-value-from-an-event-handler",
            Link {
                to: BookRoute::ReferenceEventHandlers {
                    section: ReferenceEventHandlersSection::ReturningAValueFromAnEventHandler,
                },
                class: "header",
                "Returning a value from an event handler"
            }
        }
        p {
            "If you want to accept a closure like an event handler that returns a value, you can use the  "
            code { "Callback" }
            " type. The callback type accepts two generic arguments,  "
            code { "I" }
            ", the input type, and  "
            code { "O" }
            ", the output type. Just like  "
            code { "EventHandler" }
            ",  "
            code { "Callback" }
            " is automatically converted in props and can be easily copied into anywhere in your component:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(PartialEq, Clone, Props)]\n</span><span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">CounterProps {{\n</span><span style=\"color:#f8f8f2;\">    modify: Callback&lt;</span><span style=\"font-style:italic;color:#66d9ef;\">u32</span><span style=\"color:#f8f8f2;\">, </span><span style=\"font-style:italic;color:#66d9ef;\">u32</span><span style=\"color:#f8f8f2;\">&gt;,\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Counter</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">props</span><span style=\"color:#f8f8f2;\">: CounterProps) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        button {{\n</span><span style=\"color:#f8f8f2;\">            onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> count.</span><span style=\"color:#66d9ef;\">set</span><span style=\"color:#f8f8f2;\">(props.modify.</span><span style=\"color:#66d9ef;\">call</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#66d9ef;\">count</span><span style=\"color:#f8f8f2;\">())),\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;double&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">        div {{ </span><span style=\"color:#ffee99;\">&quot;count: {{count}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "event_handler_prop.rs".to_string(),
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum ReferenceHooksSection {
    #[default]
    Empty,
    HooksAndComponentState,
    UseSignalHook,
    RulesOfHooks,
    NoHooksInConditionals,
    NoHooksInClosures,
    NoHooksInLoops,
    AdditionalResources,
}
impl std::str::FromStr for ReferenceHooksSection {
    type Err = ReferenceHooksSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "hooks-and-component-state" => Ok(Self::HooksAndComponentState),
            "use-signal-hook" => Ok(Self::UseSignalHook),
            "rules-of-hooks" => Ok(Self::RulesOfHooks),
            "no-hooks-in-conditionals" => Ok(Self::NoHooksInConditionals),
            "no-hooks-in-closures" => Ok(Self::NoHooksInClosures),
            "no-hooks-in-loops" => Ok(Self::NoHooksInLoops),
            "additional-resources" => Ok(Self::AdditionalResources),
            _ => Err(ReferenceHooksSectionParseError),
        }
    }
}
impl std::fmt::Display for ReferenceHooksSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::HooksAndComponentState => f.write_str("hooks-and-component-state"),
            Self::UseSignalHook => f.write_str("use-signal-hook"),
            Self::RulesOfHooks => f.write_str("rules-of-hooks"),
            Self::NoHooksInConditionals => f.write_str("no-hooks-in-conditionals"),
            Self::NoHooksInClosures => f.write_str("no-hooks-in-closures"),
            Self::NoHooksInLoops => f.write_str("no-hooks-in-loops"),
            Self::AdditionalResources => f.write_str("additional-resources"),
        }
    }
}
#[derive(Debug)]
pub struct ReferenceHooksSectionParseError;
impl std::fmt::Display for ReferenceHooksSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of ReferenceHooksSectionhooks-and-component-state, use-signal-hook, rules-of-hooks, no-hooks-in-conditionals, no-hooks-in-closures, no-hooks-in-loops, additional-resources",
        )?;
        Ok(())
    }
}
impl std::error::Error for ReferenceHooksSectionParseError {}
#[component(no_case_check)]
pub fn ReferenceHooks(section: ReferenceHooksSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "hooks-and-component-state",
            Link {
                to: BookRoute::ReferenceHooks {
                    section: ReferenceHooksSection::HooksAndComponentState,
                },
                class: "header",
                "Hooks and component state"
            }
        }
        p {
            "So far, our components have had no state like a normal Rust function. However, in a UI component, it is often useful to have stateful functionality to build user interactions. For example, you might want to track whether the user has opened a drop-down and render different things accordingly."
        }
        p {
            "Hooks allow us to create state in our components. Hooks are Rust functions you call in a constant order in a component that add additional functionality to the component."
        }
        p {
            "Dioxus provides many built-in hooks, but if those hooks don't fit your specific use case, you also can "
            Link {
                to: BookRoute::CookbookStateCustomHooksIndex {
                    section: CookbookStateCustomHooksIndexSection::Empty,
                },
                "create your own hook"
            }
        }
        h2 { id: "use-signal-hook",
            Link {
                to: BookRoute::ReferenceHooks {
                    section: ReferenceHooksSection::UseSignalHook,
                },
                class: "header",
                "use_signal hook"
            }
        }
        p {
            Link { to: "https://docs.rs/dioxus/latest/dioxus/prelude/fn.use_signal.html",
                code { "use_signal" }
            }
            " is one of the simplest hooks."
        }
        ul {
            li {
                "You provide a closure that determines the initial value: "
                code { "let mut count = use_signal(|| 0);" }
            }
            li {
                code { "use_signal" }
                " gives you the current value, and a way to write to the value"
            }
            li {
                "When the value updates, "
                code { "use_signal" }
                " makes the component re-render (along with any other component that references it), and then provides you with the new value."
            }
        }
        p {
            "For example, you might have seen the counter example, in which state (a number) is tracked using the  "
            code { "use_signal" }
            " hook:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// count will be initialized to 0 the first time the component is rendered\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        h1 {{ </span><span style=\"color:#ffee99;\">&quot;High-Five counter: {{count}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        button {{ onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">+= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;Up high!&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        button {{ onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> count </span><span style=\"color:#f92672;\">-= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;Down low!&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "hooks_counter.rs".to_string(),
        }
        DemoFrame { hooks_counter::App {} }
        p {
            "Every time the component's state changes, it re-renders, and the component function is called, so you can describe what you want the new UI to look like. You don't have to worry about \"changing\" anything – describe what you want in terms of the state, and Dioxus will take care of the rest!"
        }
        blockquote {
            p {
                code { "use_signal" }
                " returns your value wrapped in a smart pointer of type "
                Link { to: "https://docs.rs/dioxus/latest/dioxus/prelude/struct.Signal.html",
                    code { "Signal" }
                }
                " that is "
                code { "Copy" }
                ". This is why you can both read the value and update it, even within an event handler."
            }
        }
        p { "You can use multiple hooks in the same component if you want:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> count_a </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> count_b </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        h1 {{ </span><span style=\"color:#ffee99;\">&quot;Counter_a: {{count_a}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        button {{ onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> count_a </span><span style=\"color:#f92672;\">+= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;a++&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        button {{ onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> count_a </span><span style=\"color:#f92672;\">-= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;a--&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        h1 {{ </span><span style=\"color:#ffee99;\">&quot;Counter_b: {{count_b}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        button {{ onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> count_b </span><span style=\"color:#f92672;\">+= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;b++&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        button {{ onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> count_b </span><span style=\"color:#f92672;\">-= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;b--&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "hooks_counter_two_state.rs".to_string(),
        }
        DemoFrame { hooks_counter_two_state::App {} }
        p {
            "You can also use  "
            code { "use_signal" }
            " to store more complex state, like a Vec. You can read and write to the state with the  "
            code { "read" }
            " and  "
            code { "write" }
            " methods:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> list </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#66d9ef;\">Vec</span><span style=\"color:#f8f8f2;\">::new);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        p {{ </span><span style=\"color:#ffee99;\">&quot;Current list: {{list:?}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        button {{\n</span><span style=\"color:#f8f8f2;\">            onclick: </span><span style=\"color:#f92672;\">move |</span><span style=\"color:#f8f8f2;\">event</span><span style=\"color:#f92672;\">| </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">                </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> list_len </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> list.</span><span style=\"color:#66d9ef;\">len</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">                list.</span><span style=\"color:#66d9ef;\">push</span><span style=\"color:#f8f8f2;\">(list_len);\n</span><span style=\"color:#f8f8f2;\">                list.</span><span style=\"color:#66d9ef;\">push</span><span style=\"color:#f8f8f2;\">(list_len);\n</span><span style=\"color:#f8f8f2;\">            }},\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;Add two elements!&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "hooks_use_signal.rs".to_string(),
        }
        DemoFrame { hooks_use_signal::App {} }
        h2 { id: "rules-of-hooks",
            Link {
                to: BookRoute::ReferenceHooks {
                    section: ReferenceHooksSection::RulesOfHooks,
                },
                class: "header",
                "Rules of hooks"
            }
        }
        p {
            "The above example might seem a bit magic since Rust functions are typically not associated with state. Dioxus allows hooks to maintain state across renders through a hidden scope that is associated with the component."
        }
        p {
            "But how can Dioxus differentiate between multiple hooks in the same component? As you saw in the second example, both  "
            code { "use_signal" }
            " functions were called with the same parameters, so how come they can return different things when the counters are different?"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> count_a </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> count_b </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);</span></pre>\n",
            name: "hooks_counter_two_state.rs".to_string(),
        }
        p {
            "This is only possible because the two hooks are always called in the same order, so Dioxus knows which is which. Because the order you call hooks matters, you must follow certain rules when using hooks:"
        }
        ol {
            li { "Hooks may be only used in components or other hooks (we'll get to that later)." }
            li { "On every call to a component function." }
            li {
                "The same hooks must be called (except in the case of early returns, as explained later in the "
                Link {
                    to: BookRoute::CookbookErrorHandling {
                        section: CookbookErrorHandlingSection::Empty,
                    },
                    "Error Handling chapter"
                }
                ")."
            }
            li { "In the same order." }
            li {
                "Hook names should start with "
                code { "use_" }
                " so you don't accidentally confuse them with regular"
                " "
                "functions ("
                code { "use_signal()" }
                ", "
                code { "use_signal()" }
                ", "
                code { "use_resource()" }
                ", etc...)."
            }
        }
        p { "These rules mean that there are certain things you can't do with hooks:" }
        h3 { id: "no-hooks-in-conditionals",
            Link {
                to: BookRoute::ReferenceHooks {
                    section: ReferenceHooksSection::NoHooksInConditionals,
                },
                class: "header",
                "No hooks in conditionals"
            }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// ❌ don&#39;t call hooks in conditionals!\n</span><span style=\"color:#8c8c8c;\">// We must ensure that the same hooks will be called every time\n</span><span style=\"color:#8c8c8c;\">// But `if` statements only run if the conditional is true!\n</span><span style=\"color:#8c8c8c;\">// So we might violate rule 2.\n</span><span style=\"color:#f92672;\">if</span><span style=\"color:#f8f8f2;\"> you_are_happy </span><span style=\"color:#f92672;\">&amp;&amp;</span><span style=\"color:#f8f8f2;\"> you_know_it {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> something </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ffee99;\">&quot;hands&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">    println!(</span><span style=\"color:#ffee99;\">&quot;clap your </span><span style=\"color:#ff80f4;\">{{something}}</span><span style=\"color:#ffee99;\">&quot;</span><span style=\"color:#f8f8f2;\">)\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// ✅ instead, *always* call use_signal\n</span><span style=\"color:#8c8c8c;\">// You can put other stuff in the conditional though\n</span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> something </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ffee99;\">&quot;hands&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f92672;\">if</span><span style=\"color:#f8f8f2;\"> you_are_happy </span><span style=\"color:#f92672;\">&amp;&amp;</span><span style=\"color:#f8f8f2;\"> you_know_it {{\n</span><span style=\"color:#f8f8f2;\">    println!(</span><span style=\"color:#ffee99;\">&quot;clap your </span><span style=\"color:#ff80f4;\">{{something}}</span><span style=\"color:#ffee99;\">&quot;</span><span style=\"color:#f8f8f2;\">)\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "hooks_bad.rs".to_string(),
        }
        h3 { id: "no-hooks-in-closures",
            Link {
                to: BookRoute::ReferenceHooks {
                    section: ReferenceHooksSection::NoHooksInClosures,
                },
                class: "header",
                "No hooks in closures"
            }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// ❌ don&#39;t call hooks inside closures!\n</span><span style=\"color:#8c8c8c;\">// We can&#39;t guarantee that the closure, if used, will be called in the same order every time\n</span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#a6e22e;\">_a </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">|| {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> b </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">b</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">}};\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// ✅ instead, move hook `b` outside\n</span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> b </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#a6e22e;\">_a </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">|| </span><span style=\"color:#66d9ef;\">b</span><span style=\"color:#f8f8f2;\">();</span></pre>\n",
            name: "hooks_bad.rs".to_string(),
        }
        h3 { id: "no-hooks-in-loops",
            Link {
                to: BookRoute::ReferenceHooks {
                    section: ReferenceHooksSection::NoHooksInLoops,
                },
                class: "header",
                "No hooks in loops"
            }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// `names` is a Vec&lt;&amp;str&gt;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// ❌ Do not use hooks in loops!\n</span><span style=\"color:#8c8c8c;\">// In this case, if the length of the Vec changes, we break rule 2\n</span><span style=\"color:#f92672;\">for</span><span style=\"color:#f8f8f2;\"> _name </span><span style=\"color:#f92672;\">in &amp;</span><span style=\"color:#f8f8f2;\">names {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> is_selected </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">false</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">    println!(</span><span style=\"color:#ffee99;\">&quot;selected: </span><span style=\"color:#ff80f4;\">{{is_selected}}</span><span style=\"color:#ffee99;\">&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// ✅ Instead, use a hashmap with use_signal\n</span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> selection_map </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(HashMap::&lt;</span><span style=\"color:#f92672;\">&amp;</span><span style=\"font-style:italic;color:#66d9ef;\">str</span><span style=\"color:#f8f8f2;\">, </span><span style=\"font-style:italic;color:#66d9ef;\">bool</span><span style=\"color:#f8f8f2;\">&gt;::new);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">for</span><span style=\"color:#f8f8f2;\"> name </span><span style=\"color:#f92672;\">in &amp;</span><span style=\"color:#f8f8f2;\">names {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> is_selected </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> selection_map.</span><span style=\"color:#66d9ef;\">read</span><span style=\"color:#f8f8f2;\">()[name];\n</span><span style=\"color:#f8f8f2;\">    println!(</span><span style=\"color:#ffee99;\">&quot;selected: </span><span style=\"color:#ff80f4;\">{{is_selected}}</span><span style=\"color:#ffee99;\">&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "hooks_bad.rs".to_string(),
        }
        h2 { id: "additional-resources",
            Link {
                to: BookRoute::ReferenceHooks {
                    section: ReferenceHooksSection::AdditionalResources,
                },
                class: "header",
                "Additional resources"
            }
        }
        ul {
            li {
                Link { to: "https://docs.rs/dioxus-hooks/latest/dioxus_hooks/", "dioxus_hooks API docs" }
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/hooks",
                    "dioxus_hooks source code"
                }
            }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum ReferenceUserInputSection {
    #[default]
    Empty,
    UserInput,
    ControlledInputs,
    UncontrolledInputs,
    HandlingFiles,
}
impl std::str::FromStr for ReferenceUserInputSection {
    type Err = ReferenceUserInputSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "user-input" => Ok(Self::UserInput),
            "controlled-inputs" => Ok(Self::ControlledInputs),
            "uncontrolled-inputs" => Ok(Self::UncontrolledInputs),
            "handling-files" => Ok(Self::HandlingFiles),
            _ => Err(ReferenceUserInputSectionParseError),
        }
    }
}
impl std::fmt::Display for ReferenceUserInputSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::UserInput => f.write_str("user-input"),
            Self::ControlledInputs => f.write_str("controlled-inputs"),
            Self::UncontrolledInputs => f.write_str("uncontrolled-inputs"),
            Self::HandlingFiles => f.write_str("handling-files"),
        }
    }
}
#[derive(Debug)]
pub struct ReferenceUserInputSectionParseError;
impl std::fmt::Display for ReferenceUserInputSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of ReferenceUserInputSectionuser-input, controlled-inputs, uncontrolled-inputs, handling-files",
        )?;
        Ok(())
    }
}
impl std::error::Error for ReferenceUserInputSectionParseError {}
#[component(no_case_check)]
pub fn ReferenceUserInput(section: ReferenceUserInputSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "user-input",
            Link {
                to: BookRoute::ReferenceUserInput {
                    section: ReferenceUserInputSection::UserInput,
                },
                class: "header",
                "User Input"
            }
        }
        p {
            "Interfaces often need to provide a way to input data: e.g. text, numbers, checkboxes, etc. In Dioxus, there are two ways you can work with user input."
        }
        h2 { id: "controlled-inputs",
            Link {
                to: BookRoute::ReferenceUserInput {
                    section: ReferenceUserInputSection::ControlledInputs,
                },
                class: "header",
                "Controlled Inputs"
            }
        }
        p {
            "With controlled inputs, you are directly in charge of the state of the input. This gives you a lot of flexibility, and makes it easy to keep things in sync. For example, this is how you would create a controlled text input:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> name </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ffee99;\">&quot;bob&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">());\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        input {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#8c8c8c;\">// we tell the component what to render\n</span><span style=\"color:#f8f8f2;\">            value: </span><span style=\"color:#ffee99;\">&quot;{{name}}&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#8c8c8c;\">// and what to do when the value changes\n</span><span style=\"color:#f8f8f2;\">            oninput: </span><span style=\"color:#f92672;\">move |</span><span style=\"color:#f8f8f2;\">event</span><span style=\"color:#f92672;\">|</span><span style=\"color:#f8f8f2;\"> name.</span><span style=\"color:#66d9ef;\">set</span><span style=\"color:#f8f8f2;\">(event.</span><span style=\"color:#66d9ef;\">value</span><span style=\"color:#f8f8f2;\">())\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "input_controlled.rs".to_string(),
        }
        DemoFrame { input_controlled::App {} }
        p { "Notice the flexibility – you can:" }
        ul {
            li { "Also display the same contents in another element, and they will be in sync" }
            li { "Transform the input every time it is modified (e.g. to make sure it is upper case)" }
            li { "Validate the input every time it changes" }
            li {
                "Have custom logic happening when the input changes (e.g. network request for autocompletion)"
            }
            li {
                "Programmatically change the value (e.g. a \"randomize\" button that fills the input with nonsense)"
            }
        }
        h2 { id: "uncontrolled-inputs",
            Link {
                to: BookRoute::ReferenceUserInput {
                    section: ReferenceUserInputSection::UncontrolledInputs,
                },
                class: "header",
                "Uncontrolled Inputs"
            }
        }
        p {
            "As an alternative to controlled inputs, you can simply let the platform keep track of the input values. If we don't tell a HTML input what content it should have, it will be editable anyway (this is built into the browser). This approach can be more performant, but less flexible. For example, it's harder to keep the input in sync with another element."
        }
        p {
            "Since you don't necessarily have the current value of the uncontrolled input in state, you can access it either by listening to  "
            code { "oninput" }
            " events (similarly to controlled components), or, if the input is part of a form, you can access the form data in the form events (e.g.  "
            code { "oninput" }
            " or  "
            code { "onsubmit" }
            "):"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        form {{ onsubmit: </span><span style=\"color:#f92672;\">move |</span><span style=\"color:#f8f8f2;\">event</span><span style=\"color:#f92672;\">| </span><span style=\"color:#f8f8f2;\">{{ log::info</span><span style=\"color:#f92672;\">!</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;Submitted! {{event:?}}&quot;</span><span style=\"color:#f8f8f2;\">) }},\n</span><span style=\"color:#f8f8f2;\">            input {{ name: </span><span style=\"color:#ffee99;\">&quot;name&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">            input {{ name: </span><span style=\"color:#ffee99;\">&quot;age&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">            input {{ name: </span><span style=\"color:#ffee99;\">&quot;date&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">            input {{ r</span><span style=\"color:#f92672;\">#</span><span style=\"font-style:italic;color:#66d9ef;\">type</span><span style=\"color:#f8f8f2;\">: </span><span style=\"color:#ffee99;\">&quot;submit&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "input_uncontrolled.rs".to_string(),
        }
        DemoFrame { input_uncontrolled::App {} }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">Submitted</span><span style=\"color:#f92672;\">!</span><span style=\"color:#f8f8f2;\"> UiEvent {{ data: FormData {{ value: </span><span style=\"color:#ffee99;\">&quot;&quot;</span><span style=\"color:#f8f8f2;\">, values: {{</span><span style=\"color:#ffee99;\">&quot;age&quot;</span><span style=\"color:#f8f8f2;\">: </span><span style=\"color:#ffee99;\">&quot;very old&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;date&quot;</span><span style=\"color:#f8f8f2;\">: </span><span style=\"color:#ffee99;\">&quot;1966&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;name&quot;</span><span style=\"color:#f8f8f2;\">: </span><span style=\"color:#ffee99;\">&quot;Fred&quot;</span><span style=\"color:#f8f8f2;\">}} }} }}</span></pre>\n" }
        h2 { id: "handling-files",
            Link {
                to: BookRoute::ReferenceUserInput {
                    section: ReferenceUserInputSection::HandlingFiles,
                },
                class: "header",
                "Handling files"
            }
        }
        p {
            "You can insert a file picker by using an input element of type  "
            code { "file" }
            ". This element supports the  "
            code { "multiple" }
            " attribute, to let you pick more files at the same time. You can select a folder by adding the  "
            code { "directory" }
            " attribute: Dioxus will map this attribute to browser specific attributes, because there is no standardized way to allow a directory to be selected."
        }
        p {
            code { "type" }
            " is a Rust keyword, so when specifying the type of the input field, you have to write it as  "
            code { "r#type:\"file\"" }
            "."
        }
        p {
            "Extracting the selected files is a bit different from what you may typically use in Javascript."
        }
        p {
            "The  "
            code { "FormData" }
            " event contains a  "
            code { "files" }
            " field with data about the uploaded files. This field contains a  "
            code { "FileEngine" }
            " struct which lets you fetch the filenames selected by the user. This example saves the filenames of the selected files to a  "
            code { "Vec" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">App</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> filenames: Signal&lt;Vec&lt;String&gt;&gt; </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#66d9ef;\">Vec</span><span style=\"color:#f8f8f2;\">::new);\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        input {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#8c8c8c;\">// tell the input to pick a file\n</span><span style=\"color:#f8f8f2;\">            r</span><span style=\"color:#f92672;\">#</span><span style=\"font-style:italic;color:#66d9ef;\">type</span><span style=\"color:#f8f8f2;\">: </span><span style=\"color:#ffee99;\">&quot;file&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#8c8c8c;\">// list the accepted extensions\n</span><span style=\"color:#f8f8f2;\">            accept: </span><span style=\"color:#ffee99;\">&quot;.txt,.rs&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#8c8c8c;\">// pick multiple files\n</span><span style=\"color:#f8f8f2;\">            multiple: </span><span style=\"color:#ff80f4;\">true</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            onchange: </span><span style=\"color:#f92672;\">move |</span><span style=\"color:#f8f8f2;\">evt</span><span style=\"color:#f92672;\">| </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">                </span><span style=\"color:#f92672;\">if </span><span style=\"font-style:italic;color:#66d9ef;\">let Some</span><span style=\"color:#f8f8f2;\">(file_engine) </span><span style=\"color:#f92672;\">= &amp;</span><span style=\"color:#f8f8f2;\">evt.</span><span style=\"color:#66d9ef;\">files</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">                    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> files </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> file_engine.</span><span style=\"color:#66d9ef;\">files</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">                    </span><span style=\"color:#f92672;\">for</span><span style=\"color:#f8f8f2;\"> file_name </span><span style=\"color:#f92672;\">in</span><span style=\"color:#f8f8f2;\"> files {{\n</span><span style=\"color:#f8f8f2;\">                        filenames.</span><span style=\"color:#66d9ef;\">write</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#66d9ef;\">push</span><span style=\"color:#f8f8f2;\">(file_name);\n</span><span style=\"color:#f8f8f2;\">                    }}\n</span><span style=\"color:#f8f8f2;\">                }}\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "input_fileengine.rs".to_string(),
        }
        p {
            "If you're planning to read the file content, you need to do it asynchronously, to keep the rest of the UI interactive. This example event handler loads the content of the selected files in an async closure:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">onchange: </span><span style=\"color:#f92672;\">move |</span><span style=\"color:#f8f8f2;\">evt</span><span style=\"color:#f92672;\">| </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">    async </span><span style=\"color:#f92672;\">move </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">if </span><span style=\"font-style:italic;color:#66d9ef;\">let Some</span><span style=\"color:#f8f8f2;\">(file_engine) </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> evt.</span><span style=\"color:#66d9ef;\">files</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> files </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> file_engine.</span><span style=\"color:#66d9ef;\">files</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#f92672;\">for</span><span style=\"color:#f8f8f2;\"> file_name </span><span style=\"color:#f92672;\">in &amp;</span><span style=\"color:#f8f8f2;\">files {{\n</span><span style=\"color:#f8f8f2;\">                </span><span style=\"color:#f92672;\">if </span><span style=\"font-style:italic;color:#66d9ef;\">let Some</span><span style=\"color:#f8f8f2;\">(file) </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> file_engine.</span><span style=\"color:#66d9ef;\">read_file_to_string</span><span style=\"color:#f8f8f2;\">(file_name).await\n</span><span style=\"color:#f8f8f2;\">                {{\n</span><span style=\"color:#f8f8f2;\">                    files_uploaded.</span><span style=\"color:#66d9ef;\">write</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#66d9ef;\">push</span><span style=\"color:#f8f8f2;\">(file);\n</span><span style=\"color:#f8f8f2;\">                }}\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "input_fileengine_async.rs".to_string(),
        }
        p {
            "Lastly, this example shows you how to select a folder, by setting the  "
            code { "directory" }
            " attribute to  "
            code { "true" }
            "."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">input {{\n</span><span style=\"color:#f8f8f2;\">    r</span><span style=\"color:#f92672;\">#</span><span style=\"font-style:italic;color:#66d9ef;\">type</span><span style=\"color:#f8f8f2;\">: </span><span style=\"color:#ffee99;\">&quot;file&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// Select a folder by setting the directory attribute\n</span><span style=\"color:#f8f8f2;\">    directory: </span><span style=\"color:#ff80f4;\">true</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">    onchange: </span><span style=\"color:#f92672;\">move |</span><span style=\"color:#f8f8f2;\">evt</span><span style=\"color:#f92672;\">| </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">if </span><span style=\"font-style:italic;color:#66d9ef;\">let Some</span><span style=\"color:#f8f8f2;\">(file_engine) </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> evt.</span><span style=\"color:#66d9ef;\">files</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> files </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> file_engine.</span><span style=\"color:#66d9ef;\">files</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#f92672;\">for</span><span style=\"color:#f8f8f2;\"> file_name </span><span style=\"color:#f92672;\">in</span><span style=\"color:#f8f8f2;\"> files {{\n</span><span style=\"color:#f8f8f2;\">                println!(</span><span style=\"color:#ffee99;\">&quot;</span><span style=\"color:#ff80f4;\">{{}}</span><span style=\"color:#ffee99;\">&quot;</span><span style=\"color:#f8f8f2;\">, file_name);\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "input_fileengine_folder.rs".to_string(),
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum ReferenceContextSection {
    #[default]
    Empty,
    SharingState,
    LiftingState,
    UsingSharedState,
}
impl std::str::FromStr for ReferenceContextSection {
    type Err = ReferenceContextSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "sharing-state" => Ok(Self::SharingState),
            "lifting-state" => Ok(Self::LiftingState),
            "using-shared-state" => Ok(Self::UsingSharedState),
            _ => Err(ReferenceContextSectionParseError),
        }
    }
}
impl std::fmt::Display for ReferenceContextSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::SharingState => f.write_str("sharing-state"),
            Self::LiftingState => f.write_str("lifting-state"),
            Self::UsingSharedState => f.write_str("using-shared-state"),
        }
    }
}
#[derive(Debug)]
pub struct ReferenceContextSectionParseError;
impl std::fmt::Display for ReferenceContextSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of ReferenceContextSectionsharing-state, lifting-state, using-shared-state",
        )?;
        Ok(())
    }
}
impl std::error::Error for ReferenceContextSectionParseError {}
#[component(no_case_check)]
pub fn ReferenceContext(section: ReferenceContextSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "sharing-state",
            Link {
                to: BookRoute::ReferenceContext {
                    section: ReferenceContextSection::SharingState,
                },
                class: "header",
                "Sharing State"
            }
        }
        p {
            "Often, multiple components need to access the same state. Depending on your needs, there are several ways to implement this."
        }
        h2 { id: "lifting-state",
            Link {
                to: BookRoute::ReferenceContext {
                    section: ReferenceContextSection::LiftingState,
                },
                class: "header",
                "Lifting State"
            }
        }
        p {
            "One approach to share state between components is to \"lift\" it up to the nearest common ancestor. This means putting the  "
            code { "use_signal" }
            " hook in a parent component, and passing the needed values down as props."
        }
        p {
            "Suppose we want to build a meme editor. We want to have an input to edit the meme caption, but also a preview of the meme with the caption. Logically, the meme and the input are 2 separate components, but they need access to the same state (the current caption)."
        }
        blockquote {
            p {
                "Of course, in this simple example, we could write everything in one component – but it is better to split everything out in smaller components to make the code more reusable, maintainable, and performant (this is even more important for larger, complex apps)."
            }
        }
        p {
            "We start with a  "
            code { "Meme" }
            " component, responsible for rendering a meme with a given caption:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Meme</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">caption</span><span style=\"color:#f8f8f2;\">: String) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> container_style </span><span style=\"color:#f92672;\">= </span><span style=\"font-style:italic;color:#66d9ef;\">r</span><span style=\"color:#ffee99;\">#&quot;\n</span><span style=\"color:#ffee99;\">        position: relative;\n</span><span style=\"color:#ffee99;\">        width: fit-content;\n</span><span style=\"color:#ffee99;\">    &quot;#</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> caption_container_style </span><span style=\"color:#f92672;\">= </span><span style=\"font-style:italic;color:#66d9ef;\">r</span><span style=\"color:#ffee99;\">#&quot;\n</span><span style=\"color:#ffee99;\">        position: absolute;\n</span><span style=\"color:#ffee99;\">        bottom: 0;\n</span><span style=\"color:#ffee99;\">        left: 0;\n</span><span style=\"color:#ffee99;\">        right: 0;\n</span><span style=\"color:#ffee99;\">        padding: 16px 8px;\n</span><span style=\"color:#ffee99;\">    &quot;#</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> caption_style </span><span style=\"color:#f92672;\">= </span><span style=\"font-style:italic;color:#66d9ef;\">r</span><span style=\"color:#ffee99;\">&quot;\n</span><span style=\"color:#ffee99;\">        font-size: 32px;\n</span><span style=\"color:#ffee99;\">        margin: 0;\n</span><span style=\"color:#ffee99;\">        color: white;\n</span><span style=\"color:#ffee99;\">        text-align: center;\n</span><span style=\"color:#ffee99;\">    &quot;</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ style: </span><span style=\"color:#ffee99;\">&quot;{{container_style}}&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            img {{ src: </span><span style=\"color:#ffee99;\">&quot;https://i.imgflip.com/2zh47r.jpg&quot;</span><span style=\"color:#f8f8f2;\">, height: </span><span style=\"color:#ffee99;\">&quot;500px&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">            div {{ style: </span><span style=\"color:#ffee99;\">&quot;{{caption_container_style}}&quot;</span><span style=\"color:#f8f8f2;\">, p {{ style: </span><span style=\"color:#ffee99;\">&quot;{{caption_style}}&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;{{caption}}&quot; </span><span style=\"color:#f8f8f2;\">}} }}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "meme_editor.rs".to_string(),
        }
        blockquote {
            p {
                "Note that the  "
                code { "Meme" }
                " component is unaware where the caption is coming from – it could be stored in  "
                code { "use_signal" }
                ", or a constant. This ensures that it is very reusable – the same component can be used for a meme gallery without any changes!"
            }
        }
        p {
            "We also create a caption editor, completely decoupled from the meme. The caption editor must not store the caption itself – otherwise, how will we provide it to the  "
            code { "Meme" }
            " component? Instead, it should accept the current caption as a prop, as well as an event handler to delegate input events to:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">CaptionEditor</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">caption</span><span style=\"color:#f8f8f2;\">: String, </span><span style=\"font-style:italic;color:#fd971f;\">oninput</span><span style=\"color:#f8f8f2;\">: EventHandler&lt;FormEvent&gt;) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> input_style </span><span style=\"color:#f92672;\">= </span><span style=\"font-style:italic;color:#66d9ef;\">r</span><span style=\"color:#ffee99;\">&quot;\n</span><span style=\"color:#ffee99;\">        border: none;\n</span><span style=\"color:#ffee99;\">        background: cornflowerblue;\n</span><span style=\"color:#ffee99;\">        padding: 8px 16px;\n</span><span style=\"color:#ffee99;\">        margin: 0;\n</span><span style=\"color:#ffee99;\">        border-radius: 4px;\n</span><span style=\"color:#ffee99;\">        color: white;\n</span><span style=\"color:#ffee99;\">    &quot;</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        input {{\n</span><span style=\"color:#f8f8f2;\">            style: </span><span style=\"color:#ffee99;\">&quot;{{input_style}}&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            value: </span><span style=\"color:#ffee99;\">&quot;{{caption}}&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            oninput: </span><span style=\"color:#f92672;\">move |</span><span style=\"color:#f8f8f2;\">event</span><span style=\"color:#f92672;\">|</span><span style=\"color:#f8f8f2;\"> oninput.</span><span style=\"color:#66d9ef;\">call</span><span style=\"color:#f8f8f2;\">(event)\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "meme_editor.rs".to_string(),
        }
        p {
            "Finally, a third component will render the other two as children. It will be responsible for keeping the state and passing down the relevant props."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">MemeEditor</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> container_style </span><span style=\"color:#f92672;\">= </span><span style=\"font-style:italic;color:#66d9ef;\">r</span><span style=\"color:#ffee99;\">&quot;\n</span><span style=\"color:#ffee99;\">        display: flex;\n</span><span style=\"color:#ffee99;\">        flex-direction: column;\n</span><span style=\"color:#ffee99;\">        gap: 16px;\n</span><span style=\"color:#ffee99;\">        margin: 0 auto;\n</span><span style=\"color:#ffee99;\">        width: fit-content;\n</span><span style=\"color:#ffee99;\">    &quot;</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> caption </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ffee99;\">&quot;me waiting for my rust code to compile&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">());\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ style: </span><span style=\"color:#ffee99;\">&quot;{{container_style}}&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            h1 {{ </span><span style=\"color:#ffee99;\">&quot;Meme Editor&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">            Meme {{ caption: caption }}\n</span><span style=\"color:#f8f8f2;\">            CaptionEditor {{ caption: caption, oninput: </span><span style=\"color:#f92672;\">move |</span><span style=\"color:#f8f8f2;\">event: FormEvent</span><span style=\"color:#f92672;\">|</span><span style=\"color:#f8f8f2;\"> caption.</span><span style=\"color:#66d9ef;\">set</span><span style=\"color:#f8f8f2;\">(event.</span><span style=\"color:#66d9ef;\">value</span><span style=\"color:#f8f8f2;\">()) }}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "meme_editor.rs".to_string(),
        }
        p {
            img {
                src: asset!(
                    "/assets/static/meme_editor_screenshot.png", ImageAssetOptions::new().with_avif()
                ),
                alt: "Meme Editor Screenshot: An old plastic skeleton sitting on a park bench. Caption: \"me waiting for a language feature\"",
                title: "",
            }
        }
        h2 { id: "using-shared-state",
            Link {
                to: BookRoute::ReferenceContext {
                    section: ReferenceContextSection::UsingSharedState,
                },
                class: "header",
                "Using Shared State"
            }
        }
        p {
            "Sometimes, some state needs to be shared between multiple components far down the tree, and passing it down through props is very inconvenient."
        }
        p {
            "Suppose now that we want to implement a dark mode toggle for our app. To achieve this, we will make every component select styling depending on whether dark mode is enabled or not."
        }
        blockquote {
            p {
                "Note: we're choosing this approach for the sake of an example. There are better ways to implement dark mode (e.g. using CSS variables). Let's pretend CSS variables don't exist – welcome to 2013!"
            }
        }
        p {
            "Now, we could write another  "
            code { "use_signal" }
            " in the top component, and pass  "
            code { "is_dark_mode" }
            " down to every component through props. But think about what will happen as the app grows in complexity – almost every component that renders any CSS is going to need to know if dark mode is enabled or not – so they'll all need the same dark mode prop. And every parent component will need to pass it down to them. Imagine how messy and verbose that would get, especially if we had components several levels deep!"
        }
        p {
            "Dioxus offers a better solution than this \"prop drilling\" – providing context. The "
            Link { to: "https://docs.rs/dioxus-hooks/latest/dioxus_hooks/fn.use_context_provider.html",
                code { "use_context_provider" }
            }
            " hook provides any Clone context (including Signals!) to any child components. Child components can use the "
            Link { to: "https://docs.rs/dioxus-hooks/latest/dioxus_hooks/fn.use_context.html",
                code { "use_context" }
            }
            " hook to get that context and if it is a Signal, they can read and write to it."
        }
        p { "First, we have to create a struct for our dark mode configuration:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">#[derive(Clone, Copy)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">struct </span><span style=\"color:#f8f8f2;\">DarkMode(</span><span style=\"font-style:italic;color:#66d9ef;\">bool</span><span style=\"color:#f8f8f2;\">);</span></pre>\n",
            name: "meme_editor_dark_mode.rs".to_string(),
        }
        p {
            "Now, in a top-level component (like  "
            code { "App" }
            "), we can provide the  "
            code { "DarkMode" }
            " context to all children components:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#66d9ef;\">use_context_provider</span><span style=\"color:#f8f8f2;\">(|| Signal::new(DarkMode(</span><span style=\"color:#ff80f4;\">false</span><span style=\"color:#f8f8f2;\">)));</span></pre>\n",
            name: "meme_editor_dark_mode.rs".to_string(),
        }
        p {
            "As a result, any child component of  "
            code { "App" }
            " (direct or not), can access the  "
            code { "DarkMode" }
            " context."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> dark_mode_context </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">use_context::&lt;Signal&lt;DarkMode&gt;&gt;();</span></pre>\n",
            name: "meme_editor_dark_mode.rs".to_string(),
        }
        blockquote {
            p {
                code { "use_context" }
                " returns  "
                code { "Signal<DarkMode>" }
                " here, because the Signal was provided by the parent. If the context hadn't been provided  "
                code { "use_context" }
                " would have panicked."
            }
        }
        p {
            "If you have a component where the context might or not be provided, you might want to use  "
            code { "try_consume_context" }
            "instead, so you can handle the  "
            code { "None" }
            " case. The drawback of this method is that it will not memoize the value between renders, so it won't be as as efficient as  "
            code { "use_context" }
            ", you could do it yourself with  "
            code { "use_hook" }
            " though."
        }
        p {
            "For example, here's how we would implement the dark mode toggle, which both reads the context (to determine what color it should render) and writes to it (to toggle dark mode):"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">pub </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">DarkModeToggle</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> dark_mode </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">use_context::&lt;Signal&lt;DarkMode&gt;&gt;();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> style </span><span style=\"color:#f92672;\">= if </span><span style=\"color:#66d9ef;\">dark_mode</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#ff80f4;\">0 </span><span style=\"color:#f8f8f2;\">{{ </span><span style=\"color:#ffee99;\">&quot;color:white&quot; </span><span style=\"color:#f8f8f2;\">}} </span><span style=\"color:#f92672;\">else </span><span style=\"color:#f8f8f2;\">{{ </span><span style=\"color:#ffee99;\">&quot;&quot; </span><span style=\"color:#f8f8f2;\">}};\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        label {{ style: </span><span style=\"color:#ffee99;\">&quot;{{style}}&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;Dark Mode&quot;\n</span><span style=\"color:#f8f8f2;\">            input {{\n</span><span style=\"color:#f8f8f2;\">                r</span><span style=\"color:#f92672;\">#</span><span style=\"font-style:italic;color:#66d9ef;\">type</span><span style=\"color:#f8f8f2;\">: </span><span style=\"color:#ffee99;\">&quot;checkbox&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">                oninput: </span><span style=\"color:#f92672;\">move |</span><span style=\"color:#f8f8f2;\">event</span><span style=\"color:#f92672;\">| </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">                    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> is_enabled </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> event.</span><span style=\"color:#66d9ef;\">value</span><span style=\"color:#f8f8f2;\">() </span><span style=\"color:#f92672;\">== </span><span style=\"color:#ffee99;\">&quot;true&quot;</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">                    dark_mode.</span><span style=\"color:#66d9ef;\">write</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#ff80f4;\">0 </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> is_enabled;\n</span><span style=\"color:#f8f8f2;\">                }}\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "meme_editor_dark_mode.rs".to_string(),
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum ReferenceDynamicRenderingSection {
    #[default]
    Empty,
    DynamicRendering,
    ConditionalRendering,
    ImprovingTheIfElseExample,
    InspectingElementProps,
    RenderingNothing,
    RenderingLists,
    InlineForLoops,
    TheKeyAttribute,
}
impl std::str::FromStr for ReferenceDynamicRenderingSection {
    type Err = ReferenceDynamicRenderingSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "dynamic-rendering" => Ok(Self::DynamicRendering),
            "conditional-rendering" => Ok(Self::ConditionalRendering),
            "improving-the-if-else-example" => Ok(Self::ImprovingTheIfElseExample),
            "inspecting-element-props" => Ok(Self::InspectingElementProps),
            "rendering-nothing" => Ok(Self::RenderingNothing),
            "rendering-lists" => Ok(Self::RenderingLists),
            "inline-for-loops" => Ok(Self::InlineForLoops),
            "the-key-attribute" => Ok(Self::TheKeyAttribute),
            _ => Err(ReferenceDynamicRenderingSectionParseError),
        }
    }
}
impl std::fmt::Display for ReferenceDynamicRenderingSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::DynamicRendering => f.write_str("dynamic-rendering"),
            Self::ConditionalRendering => f.write_str("conditional-rendering"),
            Self::ImprovingTheIfElseExample => f.write_str("improving-the-if-else-example"),
            Self::InspectingElementProps => f.write_str("inspecting-element-props"),
            Self::RenderingNothing => f.write_str("rendering-nothing"),
            Self::RenderingLists => f.write_str("rendering-lists"),
            Self::InlineForLoops => f.write_str("inline-for-loops"),
            Self::TheKeyAttribute => f.write_str("the-key-attribute"),
        }
    }
}
#[derive(Debug)]
pub struct ReferenceDynamicRenderingSectionParseError;
impl std::fmt::Display for ReferenceDynamicRenderingSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of ReferenceDynamicRenderingSectiondynamic-rendering, conditional-rendering, improving-the-if-else-example, inspecting-element-props, rendering-nothing, rendering-lists, inline-for-loops, the-key-attribute",
        )?;
        Ok(())
    }
}
impl std::error::Error for ReferenceDynamicRenderingSectionParseError {}
#[component(no_case_check)]
pub fn ReferenceDynamicRendering(
    section: ReferenceDynamicRenderingSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "dynamic-rendering",
            Link {
                to: BookRoute::ReferenceDynamicRendering {
                    section: ReferenceDynamicRenderingSection::DynamicRendering,
                },
                class: "header",
                "Dynamic Rendering"
            }
        }
        p {
            "Sometimes you want to render different things depending on the state/props. With Dioxus, just describe what you want to see using Rust control flow – the framework will take care of making the necessary changes on the fly if the state or props change!"
        }
        h2 { id: "conditional-rendering",
            Link {
                to: BookRoute::ReferenceDynamicRendering {
                    section: ReferenceDynamicRenderingSection::ConditionalRendering,
                },
                class: "header",
                "Conditional Rendering"
            }
        }
        p {
            "To render different elements based on a condition, you could use an  "
            code { "if-else" }
            " statement:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">if</span><span style=\"color:#f8f8f2;\"> is_logged_in {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#ffee99;\">&quot;Welcome!&quot;\n</span><span style=\"color:#f8f8f2;\">        button {{ onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> log_out.</span><span style=\"color:#66d9ef;\">call</span><span style=\"color:#f8f8f2;\">(()), </span><span style=\"color:#ffee99;\">&quot;Log Out&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}} </span><span style=\"color:#f92672;\">else </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        button {{ onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> log_in.</span><span style=\"color:#66d9ef;\">call</span><span style=\"color:#f8f8f2;\">(()), </span><span style=\"color:#ffee99;\">&quot;Log In&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "conditional_rendering.rs".to_string(),
        }
        DemoFrame { conditional_rendering::App {} }
        blockquote {
            p {
                "You could also use  "
                code { "match" }
                " statements, or any Rust function to conditionally render different things."
            }
        }
        h3 { id: "improving-the-if-else-example",
            Link {
                to: BookRoute::ReferenceDynamicRendering {
                    section: ReferenceDynamicRenderingSection::ImprovingTheIfElseExample,
                },
                class: "header",
                "Improving the if-else Example"
            }
        }
        p {
            "You may have noticed some repeated code in the  "
            code { "if-else" }
            " example above. Repeating code like this is both bad for maintainability and performance. Dioxus will skip diffing static elements like the button, but when switching between multiple  "
            code { "rsx" }
            " calls it cannot perform this optimization. For this example either approach is fine, but for components with large parts that are reused between conditionals, it can be more of an issue."
        }
        p {
            "We can improve this example by splitting up the dynamic parts and inserting them where they are needed."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// We only render the welcome message if we are logged in\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// You can use if statements in the middle of a render block to conditionally render elements\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">if</span><span style=\"color:#f8f8f2;\"> is_logged_in {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// Notice the body of this if statement is rsx code, not an expression\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#ffee99;\">&quot;Welcome!&quot;\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">    button {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// depending on the value of `is_logged_in`, we will call a different event handler\n</span><span style=\"color:#f8f8f2;\">        onclick: </span><span style=\"color:#f92672;\">move |_| if</span><span style=\"color:#f8f8f2;\"> is_logged_in {{ log_out.</span><span style=\"color:#66d9ef;\">call</span><span style=\"color:#f8f8f2;\">(()) }} </span><span style=\"color:#f92672;\">else </span><span style=\"color:#f8f8f2;\">{{ log_in.</span><span style=\"color:#66d9ef;\">call</span><span style=\"color:#f8f8f2;\">(()) }},\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">if</span><span style=\"color:#f8f8f2;\"> is_logged_in {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#8c8c8c;\">// if we are logged in, the button should say &quot;Log Out&quot;\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;Log Out&quot;\n</span><span style=\"color:#f8f8f2;\">        }} </span><span style=\"color:#f92672;\">else </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#8c8c8c;\">// if we are not logged in, the button should say &quot;Log In&quot;\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#ffee99;\">&quot;Log In&quot;\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "conditional_rendering.rs".to_string(),
        }
        DemoFrame { conditional_rendering::LogInImprovedApp {} }
        h3 { id: "inspecting-element-props",
            Link {
                to: BookRoute::ReferenceDynamicRendering {
                    section: ReferenceDynamicRenderingSection::InspectingElementProps,
                },
                class: "header",
                "Inspecting Element props"
            }
        }
        p {
            "Since  "
            code { "Element" }
            " is a  "
            code { "Option<VNode>" }
            ", components accepting  "
            code { "Element" }
            " as a prop can inspect its contents, and render different things based on that. Example:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Clickable</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">props</span><span style=\"color:#f8f8f2;\">: ClickableProps) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ class: </span><span style=\"color:#ffee99;\">&quot;wrapper&quot;</span><span style=\"color:#f8f8f2;\">, {{props.children}} }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "component_children_inspect.rs".to_string(),
        }
        p {
            "You can't mutate the  "
            code { "Element" }
            ", but if you need a modified version of it, you can construct a new one based on its attributes/children/etc."
        }
        h2 { id: "rendering-nothing",
            Link {
                to: BookRoute::ReferenceDynamicRendering {
                    section: ReferenceDynamicRenderingSection::RenderingNothing,
                },
                class: "header",
                "Rendering Nothing"
            }
        }
        p {
            "To render nothing, you can return  "
            code { "None" }
            " from a component. This is useful if you want to conditionally hide something:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">if</span><span style=\"color:#f8f8f2;\"> is_logged_in {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">return </span><span style=\"color:#f8f8f2;\">rsx!();\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    p {{ </span><span style=\"color:#ffee99;\">&quot;You must be logged in to comment&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "conditional_rendering.rs".to_string(),
        }
        DemoFrame { conditional_rendering::LogInWarningApp {} }
        p {
            "This works because the  "
            code { "Element" }
            " type is just an alias for  "
            code { "Option<VNode>" }
        }
        blockquote {
            p {
                "Again, you may use a different method to conditionally return  "
                code { "None" }
                ". For example the boolean's "
                Link { to: "https://doc.rust-lang.org/std/primitive.bool.html#method.then",
                    code { "then()" }
                }
                " function could be used."
            }
        }
        h2 { id: "rendering-lists",
            Link {
                to: BookRoute::ReferenceDynamicRendering {
                    section: ReferenceDynamicRenderingSection::RenderingLists,
                },
                class: "header",
                "Rendering Lists"
            }
        }
        p {
            "Often, you'll want to render a collection of components. For example, you might want to render a list of all comments on a post."
        }
        p {
            "For this, Dioxus accepts iterators that produce  "
            code { "Element" }
            "s. So we need to:"
        }
        ul {
            li {
                "Get an iterator over all of our items (e.g., if you have a "
                code { "Vec" }
                " of comments, iterate over it with "
                code { "iter()" }
                ")"
            }
            li {
                code { ".map" }
                " the iterator to convert each item into a "
                code { "LazyNode" }
                " using "
                code { "rsx!{{...}}" }
                ul {
                    li {
                        "Add a unique "
                        code { "key" }
                        " attribute to each iterator item"
                    }
                }
            }
            li { "Include this iterator in the final RSX (or use it inline)" }
        }
        p {
            "Example: suppose you have a list of comments you want to render. Then, you can render them like this:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> comment_field </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#66d9ef;\">String</span><span style=\"color:#f8f8f2;\">::new);\n</span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> next_id </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> comments </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#66d9ef;\">Vec</span><span style=\"color:#f8f8f2;\">::&lt;CommentData&gt;::new);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> comments_lock </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> comments.</span><span style=\"color:#66d9ef;\">read</span><span style=\"color:#f8f8f2;\">();\n</span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> comments_rendered </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> comments_lock.</span><span style=\"color:#66d9ef;\">iter</span><span style=\"color:#f8f8f2;\">().</span><span style=\"color:#66d9ef;\">map</span><span style=\"color:#f8f8f2;\">(|</span><span style=\"font-style:italic;color:#fd971f;\">comment</span><span style=\"color:#f8f8f2;\">| {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{ Comment {{ comment: comment.</span><span style=\"color:#66d9ef;\">clone</span><span style=\"color:#f8f8f2;\">() }} }}\n</span><span style=\"color:#f8f8f2;\">}});\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    form {{\n</span><span style=\"color:#f8f8f2;\">        onsubmit: </span><span style=\"color:#f92672;\">move |_| </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">            comments\n</span><span style=\"color:#f8f8f2;\">                .</span><span style=\"color:#66d9ef;\">write</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">                .</span><span style=\"color:#66d9ef;\">push</span><span style=\"color:#f8f8f2;\">(CommentData {{\n</span><span style=\"color:#f8f8f2;\">                    content: </span><span style=\"color:#66d9ef;\">comment_field</span><span style=\"color:#f8f8f2;\">(),\n</span><span style=\"color:#f8f8f2;\">                    id: </span><span style=\"color:#66d9ef;\">next_id</span><span style=\"color:#f8f8f2;\">(),\n</span><span style=\"color:#f8f8f2;\">                }});\n</span><span style=\"color:#f8f8f2;\">            next_id </span><span style=\"color:#f92672;\">+= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">            comment_field.</span><span style=\"color:#66d9ef;\">set</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#66d9ef;\">String</span><span style=\"color:#f8f8f2;\">::new());\n</span><span style=\"color:#f8f8f2;\">        }},\n</span><span style=\"color:#f8f8f2;\">        input {{\n</span><span style=\"color:#f8f8f2;\">            value: </span><span style=\"color:#ffee99;\">&quot;{{comment_field}}&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            oninput: </span><span style=\"color:#f92672;\">move |</span><span style=\"color:#f8f8f2;\">event</span><span style=\"color:#f92672;\">|</span><span style=\"color:#f8f8f2;\"> comment_field.</span><span style=\"color:#66d9ef;\">set</span><span style=\"color:#f8f8f2;\">(event.</span><span style=\"color:#66d9ef;\">value</span><span style=\"color:#f8f8f2;\">())\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">        input {{ r</span><span style=\"color:#f92672;\">#</span><span style=\"font-style:italic;color:#66d9ef;\">type</span><span style=\"color:#f8f8f2;\">: </span><span style=\"color:#ffee99;\">&quot;submit&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">    {{comments_rendered}}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "rendering_lists.rs".to_string(),
        }
        DemoFrame { rendering_lists::App {} }
        h3 { id: "inline-for-loops",
            Link {
                to: BookRoute::ReferenceDynamicRendering {
                    section: ReferenceDynamicRenderingSection::InlineForLoops,
                },
                class: "header",
                "Inline for loops"
            }
        }
        p {
            "Because of how common it is to render a list of items, Dioxus provides a shorthand for this. Instead of using  "
            code { ".iter" }
            ",  "
            code { ".map" }
            ", and  "
            code { "rsx" }
            ", you can use a  "
            code { "for" }
            " loop with a body of rsx code:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> comment_field </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#66d9ef;\">String</span><span style=\"color:#f8f8f2;\">::new);\n</span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> next_id </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> comments </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#66d9ef;\">Vec</span><span style=\"color:#f8f8f2;\">::&lt;CommentData&gt;::new);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    form {{\n</span><span style=\"color:#f8f8f2;\">        onsubmit: </span><span style=\"color:#f92672;\">move |_| </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">            comments\n</span><span style=\"color:#f8f8f2;\">                .</span><span style=\"color:#66d9ef;\">write</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">                .</span><span style=\"color:#66d9ef;\">push</span><span style=\"color:#f8f8f2;\">(CommentData {{\n</span><span style=\"color:#f8f8f2;\">                    content: </span><span style=\"color:#66d9ef;\">comment_field</span><span style=\"color:#f8f8f2;\">(),\n</span><span style=\"color:#f8f8f2;\">                    id: </span><span style=\"color:#66d9ef;\">next_id</span><span style=\"color:#f8f8f2;\">(),\n</span><span style=\"color:#f8f8f2;\">                }});\n</span><span style=\"color:#f8f8f2;\">            next_id </span><span style=\"color:#f92672;\">+= </span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#f8f8f2;\">            comment_field.</span><span style=\"color:#66d9ef;\">set</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#66d9ef;\">String</span><span style=\"color:#f8f8f2;\">::new());\n</span><span style=\"color:#f8f8f2;\">        }},\n</span><span style=\"color:#f8f8f2;\">        input {{\n</span><span style=\"color:#f8f8f2;\">            value: </span><span style=\"color:#ffee99;\">&quot;{{comment_field}}&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            oninput: </span><span style=\"color:#f92672;\">move |</span><span style=\"color:#f8f8f2;\">event</span><span style=\"color:#f92672;\">|</span><span style=\"color:#f8f8f2;\"> comment_field.</span><span style=\"color:#66d9ef;\">set</span><span style=\"color:#f8f8f2;\">(event.</span><span style=\"color:#66d9ef;\">value</span><span style=\"color:#f8f8f2;\">())\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">        input {{ r</span><span style=\"color:#f92672;\">#</span><span style=\"font-style:italic;color:#66d9ef;\">type</span><span style=\"color:#f8f8f2;\">: </span><span style=\"color:#ffee99;\">&quot;submit&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">for</span><span style=\"color:#f8f8f2;\"> comment </span><span style=\"color:#f92672;\">in </span><span style=\"color:#66d9ef;\">comments</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// Notice the body of this for loop is rsx code, not an expression\n</span><span style=\"color:#f8f8f2;\">        Comment {{ comment }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "rendering_lists.rs".to_string(),
        }
        DemoFrame { rendering_lists::AppForLoop {} }
        h3 { id: "the-key-attribute",
            Link {
                to: BookRoute::ReferenceDynamicRendering {
                    section: ReferenceDynamicRenderingSection::TheKeyAttribute,
                },
                class: "header",
                "The key Attribute"
            }
        }
        p {
            "Every time you re-render your list, Dioxus needs to keep track of which items go where to determine what updates need to be made to the UI."
        }
        p {
            "For example, suppose the  "
            code { "CommentComponent" }
            " had some state – e.g. a field where the user typed in a reply. If the order of comments suddenly changes, Dioxus needs to correctly associate that state with the same comment – otherwise, the user will end up replying to a different comment!"
        }
        p {
            "To help Dioxus keep track of list items, we need to associate each item with a unique key. In the example above, we dynamically generated the unique key. In real applications, it's more likely that the key will come from e.g. a database ID. It doesn't matter where you get the key from, as long as it meets the requirements:"
        }
        ul {
            li { "Keys must be unique in a list" }
            li { "The same item should always get associated with the same key" }
            li {
                "Keys should be relatively small (i.e. converting the entire Comment structure to a String would be a pretty bad key) so they can be compared efficiently"
            }
        }
        p {
            "You might be tempted to use an item's index in the list as its key. That’s what Dioxus will use if you don’t specify a key at all. This is only acceptable if you can guarantee that the list is constant – i.e., no re-ordering, additions, or deletions."
        }
        blockquote {
            p {
                "Note that if you pass the key to a component you've made, it won't receive the key as a prop. It’s only used as a hint by Dioxus itself. If your component needs an ID, you have to pass it as a separate prop."
            }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum ReferenceRouterSection {
    #[default]
    Empty,
    Router,
    WhatIsIt,
    UsingTheRouter,
    Links,
    MoreReading,
}
impl std::str::FromStr for ReferenceRouterSection {
    type Err = ReferenceRouterSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "router" => Ok(Self::Router),
            "what-is-it" => Ok(Self::WhatIsIt),
            "using-the-router" => Ok(Self::UsingTheRouter),
            "links" => Ok(Self::Links),
            "more-reading" => Ok(Self::MoreReading),
            _ => Err(ReferenceRouterSectionParseError),
        }
    }
}
impl std::fmt::Display for ReferenceRouterSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Router => f.write_str("router"),
            Self::WhatIsIt => f.write_str("what-is-it"),
            Self::UsingTheRouter => f.write_str("using-the-router"),
            Self::Links => f.write_str("links"),
            Self::MoreReading => f.write_str("more-reading"),
        }
    }
}
#[derive(Debug)]
pub struct ReferenceRouterSectionParseError;
impl std::fmt::Display for ReferenceRouterSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of ReferenceRouterSectionrouter, what-is-it, using-the-router, links, more-reading",
        )?;
        Ok(())
    }
}
impl std::error::Error for ReferenceRouterSectionParseError {}
#[component(no_case_check)]
pub fn ReferenceRouter(section: ReferenceRouterSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "router",
            Link {
                to: BookRoute::ReferenceRouter {
                    section: ReferenceRouterSection::Router,
                },
                class: "header",
                "Router"
            }
        }
        p {
            "In many of your apps, you'll want to have different \"scenes\". For a webpage, these scenes might be the different webpages with their own content. For a desktop app, these scenes might be different views in your app."
        }
        p {
            "To unify these platforms, Dioxus provides a first-party solution for scene management called Dioxus Router."
        }
        h2 { id: "what-is-it",
            Link {
                to: BookRoute::ReferenceRouter {
                    section: ReferenceRouterSection::WhatIsIt,
                },
                class: "header",
                "What is it?"
            }
        }
        p {
            "For an app like the Dioxus landing page (https://dioxuslabs.com), we want to have several different scenes:"
        }
        ul {
            li { "Homepage" }
            li { "Blog" }
        }
        p {
            "Each of these scenes is independent – we don't want to render both the homepage and blog at the same time."
        }
        p {
            "The Dioxus router makes it easy to create these scenes. To make sure we're using the router, add the  "
            code { "router" }
            " feature to your  "
            code { "dioxus" }
            " dependency:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">cargo add dioxus </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">features router</span></pre>\n" }
        h2 { id: "using-the-router",
            Link {
                to: BookRoute::ReferenceRouter {
                    section: ReferenceRouterSection::UsingTheRouter,
                },
                class: "header",
                "Using the router"
            }
        }
        p {
            "Unlike other routers in the Rust ecosystem, our router is built declaratively at compile time. This makes it possible to compose our app layout simply by defining an enum."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// All of our routes will be a variant of this Route enum\n</span><span style=\"color:#f8f8f2;\">#[derive(Routable, PartialEq, Clone)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">Route {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// if the current location is &quot;/home&quot;, render the Home component\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/home&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    Home {{}},\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// if the current location is &quot;/blog&quot;, render the Blog component\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/blog&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    Blog {{}},\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Home</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    todo!()\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Blog</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    todo!()\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "router_reference.rs".to_string(),
        }
        p {
            "Whenever we visit this app, we will get either the Home component or the Blog component rendered depending on which route we enter at. If neither of these routes match the current location, then nothing will render."
        }
        p { "We can fix this one of two ways:" }
        ul {
            li { "A fallback 404 page" }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// All of our routes will be a variant of this Route enum\n</span><span style=\"color:#f8f8f2;\">#[derive(Routable, PartialEq, Clone)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">Route {{\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/home&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    Home {{}},\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/blog&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    Blog {{}},\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">//  if the current location doesn&#39;t match any of the above routes, render the NotFound component\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/:..segments&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    NotFound {{ segments: Vec&lt;String&gt; }},\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Home</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    todo!()\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Blog</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    todo!()\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">#[component]\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">NotFound</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">segments</span><span style=\"color:#f8f8f2;\">: Vec&lt;String&gt;) -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    todo!()\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "router_reference.rs".to_string(),
        }
        ul {
            li { "Redirect 404 to home" }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#8c8c8c;\">// All of our routes will be a variant of this Route enum\n</span><span style=\"color:#f8f8f2;\">#[derive(Routable, PartialEq, Clone)]\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">Route {{\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/home&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">//  if the current location doesn&#39;t match any of the other routes, redirect to &quot;/home&quot;\n</span><span style=\"color:#f8f8f2;\">    #[redirect(</span><span style=\"color:#ffee99;\">&quot;/:..segments&quot;</span><span style=\"color:#f8f8f2;\">, |segments: Vec&lt;String&gt;| Route::Home {{}})]\n</span><span style=\"color:#f8f8f2;\">    Home {{}},\n</span><span style=\"color:#f8f8f2;\">    #[route(</span><span style=\"color:#ffee99;\">&quot;/blog&quot;</span><span style=\"color:#f8f8f2;\">)]\n</span><span style=\"color:#f8f8f2;\">    Blog {{}},\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "router_reference.rs".to_string(),
        }
        h2 { id: "links",
            Link {
                to: BookRoute::ReferenceRouter {
                    section: ReferenceRouterSection::Links,
                },
                class: "header",
                "Links"
            }
        }
        p {
            "For our app to navigate these routes, we can provide clickable elements called Links. These simply wrap  "
            code { "<a>" }
            " elements that, when clicked, navigate the app to the given location. Because our route is an enum of valid routes, if you try to link to a page that doesn't exist, you will get a compiler error."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    Link {{ to: Route::Home {{}}, </span><span style=\"color:#ffee99;\">&quot;Go home!&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "router_reference.rs".to_string(),
        }
        h2 { id: "more-reading",
            Link {
                to: BookRoute::ReferenceRouter {
                    section: ReferenceRouterSection::MoreReading,
                },
                class: "header",
                "More reading"
            }
        }
        p {
            "This page is just a very brief overview of the router. For more information, check out the "
            Link {
                to: BookRoute::RouterIndex {
                    section: RouterIndexSection::Empty,
                },
                "router book"
            }
            " or some of the "
            Link { to: "https://github.com/DioxusLabs/dioxus/blob/master/examples/router.rs",
                "router examples"
            }
            "."
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum ReferenceUseResourceSection {
    #[default]
    Empty,
    Resource,
    RestartingTheFuture,
    Dependencies,
}
impl std::str::FromStr for ReferenceUseResourceSection {
    type Err = ReferenceUseResourceSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "resource" => Ok(Self::Resource),
            "restarting-the-future" => Ok(Self::RestartingTheFuture),
            "dependencies" => Ok(Self::Dependencies),
            _ => Err(ReferenceUseResourceSectionParseError),
        }
    }
}
impl std::fmt::Display for ReferenceUseResourceSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Resource => f.write_str("resource"),
            Self::RestartingTheFuture => f.write_str("restarting-the-future"),
            Self::Dependencies => f.write_str("dependencies"),
        }
    }
}
#[derive(Debug)]
pub struct ReferenceUseResourceSectionParseError;
impl std::fmt::Display for ReferenceUseResourceSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of ReferenceUseResourceSectionresource, restarting-the-future, dependencies",
        )?;
        Ok(())
    }
}
impl std::error::Error for ReferenceUseResourceSectionParseError {}
#[component(no_case_check)]
pub fn ReferenceUseResource(section: ReferenceUseResourceSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "resource",
            Link {
                to: BookRoute::ReferenceUseResource {
                    section: ReferenceUseResourceSection::Resource,
                },
                class: "header",
                "Resource"
            }
        }
        p {
            Link { to: "https://docs.rs/dioxus-hooks/latest/dioxus_hooks/fn.use_resource.html",
                code { "use_resource" }
            }
            " lets you run an async closure, and provides you with its result."
        }
        p {
            "For example, we can make an API request (using "
            Link { to: "https://docs.rs/reqwest/latest/reqwest/index.html", "reqwest" }
            ") inside "
            code { "use_resource" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> future </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_resource</span><span style=\"color:#f8f8f2;\">(|| async </span><span style=\"color:#f92672;\">move </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">    reqwest::get(</span><span style=\"color:#ffee99;\">&quot;https://dog.ceo/api/breeds/image/random&quot;</span><span style=\"color:#f8f8f2;\">)\n</span><span style=\"color:#f8f8f2;\">        .await\n</span><span style=\"color:#f8f8f2;\">        .</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">        .json::&lt;ApiResponse&gt;()\n</span><span style=\"color:#f8f8f2;\">        .await\n</span><span style=\"color:#f8f8f2;\">}});</span></pre>\n",
            name: "use_resource.rs".to_string(),
        }
        p {
            "The code inside  "
            code { "use_resource" }
            " will be submitted to the Dioxus scheduler once the component has rendered."
        }
        p {
            "We can use  "
            code { "&*future.read_unchecked()" }
            " to get the result of the future. On the first run, since there's no data ready when the component loads, its value will be  "
            code { "None" }
            ". However, once the future is finished, the component will be re-rendered and the value will now be  "
            code { "Some(...)" }
            ", containing the return value of the closure."
        }
        p { "We can then render that result:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">match &amp;*</span><span style=\"color:#f8f8f2;\">future.</span><span style=\"color:#66d9ef;\">read_unchecked</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">Some</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#66d9ef;\">Ok</span><span style=\"color:#f8f8f2;\">(response)) </span><span style=\"color:#f92672;\">=&gt; </span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">        button {{ onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> future.</span><span style=\"color:#66d9ef;\">restart</span><span style=\"color:#f8f8f2;\">(), </span><span style=\"color:#ffee99;\">&quot;Click to fetch another doggo&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">        div {{\n</span><span style=\"color:#f8f8f2;\">            img {{\n</span><span style=\"color:#f8f8f2;\">                max_width: </span><span style=\"color:#ffee99;\">&quot;500px&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">                max_height: </span><span style=\"color:#ffee99;\">&quot;500px&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">                src: </span><span style=\"color:#ffee99;\">&quot;{{response.image_url}}&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }},\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">Some</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#66d9ef;\">Err</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">_</span><span style=\"color:#f8f8f2;\">)) </span><span style=\"color:#f92672;\">=&gt; </span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ </span><span style=\"color:#ffee99;\">&quot;Loading dogs failed&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }},\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">None </span><span style=\"color:#f92672;\">=&gt; </span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">        div {{ </span><span style=\"color:#ffee99;\">&quot;Loading dogs...&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }},\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "use_resource.rs".to_string(),
        }
        DemoFrame { use_resource::App {} }
        h2 { id: "restarting-the-future",
            Link {
                to: BookRoute::ReferenceUseResource {
                    section: ReferenceUseResourceSection::RestartingTheFuture,
                },
                class: "header",
                "Restarting the Future"
            }
        }
        p {
            "The  "
            code { "Resource" }
            " handle provides a  "
            code { "restart" }
            " method. It can be used to execute the future again, producing a new value."
        }
        h2 { id: "dependencies",
            Link {
                to: BookRoute::ReferenceUseResource {
                    section: ReferenceUseResourceSection::Dependencies,
                },
                class: "header",
                "Dependencies"
            }
        }
        p {
            "Often, you will need to run the future again every time some value (e.g. a state) changes. Rather than calling  "
            code { "restart" }
            " manually, you can read a signal inside of the future. It will automatically re-run the future when any of the states you read inside the future change. Example:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> future </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_resource</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">move ||</span><span style=\"color:#f8f8f2;\"> async </span><span style=\"color:#f92672;\">move </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">    reqwest::get(format!(</span><span style=\"color:#ffee99;\">&quot;https://dog.ceo/api/breed/</span><span style=\"color:#ff80f4;\">{{breed}}</span><span style=\"color:#ffee99;\">/images/random&quot;</span><span style=\"color:#f8f8f2;\">))\n</span><span style=\"color:#f8f8f2;\">        .await\n</span><span style=\"color:#f8f8f2;\">        .</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">        .json::&lt;ApiResponse&gt;()\n</span><span style=\"color:#f8f8f2;\">        .await\n</span><span style=\"color:#f8f8f2;\">}});\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#8c8c8c;\">// You can also add non-reactive state to the resource hook with the use_reactive method\n</span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> non_reactive_state </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;poodle&quot;</span><span style=\"color:#f8f8f2;\">;\n</span><span style=\"color:#66d9ef;\">use_resource</span><span style=\"color:#f8f8f2;\">(use_reactive!(|(</span><span style=\"font-style:italic;color:#fd971f;\">non_reactive_state</span><span style=\"color:#f8f8f2;\">,)| async </span><span style=\"color:#f92672;\">move </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">    reqwest::get(format!(\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#ffee99;\">&quot;https://dog.ceo/api/breed/</span><span style=\"color:#ff80f4;\">{{non_reactive_state}}</span><span style=\"color:#ffee99;\">/images/random&quot;\n</span><span style=\"color:#f8f8f2;\">    ))\n</span><span style=\"color:#f8f8f2;\">    .await\n</span><span style=\"color:#f8f8f2;\">    .</span><span style=\"color:#66d9ef;\">unwrap</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">    .json::&lt;ApiResponse&gt;()\n</span><span style=\"color:#f8f8f2;\">    .await\n</span><span style=\"color:#f8f8f2;\">}}));</span></pre>\n",
            name: "use_resource.rs".to_string(),
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum ReferenceUseCoroutineSection {
    #[default]
    Empty,
    Coroutines,
    UseCoroutine,
    YieldingValues,
    SendingValues,
    AutomaticInjectionIntoTheContextApi,
}
impl std::str::FromStr for ReferenceUseCoroutineSection {
    type Err = ReferenceUseCoroutineSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "coroutines" => Ok(Self::Coroutines),
            "use-coroutine" => Ok(Self::UseCoroutine),
            "yielding-values" => Ok(Self::YieldingValues),
            "sending-values" => Ok(Self::SendingValues),
            "automatic-injection-into-the-context-api" => {
                Ok(Self::AutomaticInjectionIntoTheContextApi)
            }
            _ => Err(ReferenceUseCoroutineSectionParseError),
        }
    }
}
impl std::fmt::Display for ReferenceUseCoroutineSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Coroutines => f.write_str("coroutines"),
            Self::UseCoroutine => f.write_str("use-coroutine"),
            Self::YieldingValues => f.write_str("yielding-values"),
            Self::SendingValues => f.write_str("sending-values"),
            Self::AutomaticInjectionIntoTheContextApi => {
                f.write_str("automatic-injection-into-the-context-api")
            }
        }
    }
}
#[derive(Debug)]
pub struct ReferenceUseCoroutineSectionParseError;
impl std::fmt::Display for ReferenceUseCoroutineSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of ReferenceUseCoroutineSectioncoroutines, use-coroutine, yielding-values, sending-values, automatic-injection-into-the-context-api",
        )?;
        Ok(())
    }
}
impl std::error::Error for ReferenceUseCoroutineSectionParseError {}
#[component(no_case_check)]
pub fn ReferenceUseCoroutine(section: ReferenceUseCoroutineSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "coroutines",
            Link {
                to: BookRoute::ReferenceUseCoroutine {
                    section: ReferenceUseCoroutineSection::Coroutines,
                },
                class: "header",
                "Coroutines"
            }
        }
        p {
            "Another tool in your async toolbox are coroutines. Coroutines are futures that can have values sent to them."
        }
        p {
            "Like regular futures, code in a coroutine will run until the next  "
            code { "await" }
            " point before yielding. This low-level control over asynchronous tasks is quite powerful, allowing for infinitely looping tasks like WebSocket polling, background timers, and other periodic actions."
        }
        h2 { id: "use-coroutine",
            Link {
                to: BookRoute::ReferenceUseCoroutine {
                    section: ReferenceUseCoroutineSection::UseCoroutine,
                },
                class: "header",
                "use_coroutine"
            }
        }
        p {
            "The  "
            code { "use_coroutine" }
            " hook allows you to create a coroutine. Most coroutines we write will be polling loops using await."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">futures_util::StreamExt;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">app</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> ws: Coroutine&lt;()&gt; </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_coroutine</span><span style=\"color:#f8f8f2;\">(|</span><span style=\"font-style:italic;color:#fd971f;\">rx</span><span style=\"color:#f8f8f2;\">| async </span><span style=\"color:#f92672;\">move </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// Connect to some sort of service\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> conn </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">connect_to_ws_server</span><span style=\"color:#f8f8f2;\">().await;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// Wait for data on the service\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">while </span><span style=\"font-style:italic;color:#66d9ef;\">let Some</span><span style=\"color:#f8f8f2;\">(msg) </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> conn.</span><span style=\"color:#66d9ef;\">next</span><span style=\"color:#f8f8f2;\">().await {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"color:#8c8c8c;\">// handle messages\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }});\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "use_coroutine_reference.rs".to_string(),
        }
        p { "For many services, a simple async loop will handle the majority of use cases." }
        h2 { id: "yielding-values",
            Link {
                to: BookRoute::ReferenceUseCoroutine {
                    section: ReferenceUseCoroutineSection::YieldingValues,
                },
                class: "header",
                "Yielding Values"
            }
        }
        p {
            "To yield values from a coroutine, simply bring in a  "
            code { "Signal" }
            " handle and set the value whenever your coroutine completes its work."
        }
        p {
            "The future must be  "
            code { "'static" }
            " – so any values captured by the task cannot carry any references to  "
            code { "cx" }
            ", such as a  "
            code { "Signal" }
            "."
        }
        p {
            "You can use "
            Link { to: "https://doc.rust-lang.org/std/borrow/trait.ToOwned.html#tymethod.to_owned",
                "to_owned"
            }
            " to create a clone of the hook handle which can be moved into the async closure."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> sync_status </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| Status::Launching);\n</span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> sync_task </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_coroutine</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">move |</span><span style=\"color:#f8f8f2;\">rx: UnboundedReceiver&lt;SyncAction&gt;</span><span style=\"color:#f92672;\">|</span><span style=\"color:#f8f8f2;\"> async </span><span style=\"color:#f92672;\">move </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">loop </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        tokio::time::sleep(Duration::from_secs(</span><span style=\"color:#ff80f4;\">1</span><span style=\"color:#f8f8f2;\">)).await;\n</span><span style=\"color:#f8f8f2;\">        sync_status.</span><span style=\"color:#66d9ef;\">set</span><span style=\"color:#f8f8f2;\">(Status::Working);\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}});</span></pre>\n",
            name: "use_coroutine_reference.rs".to_string(),
        }
        p {
            "To make this a bit less verbose, Dioxus exports the  "
            code { "to_owned!" }
            " macro which will create a binding as shown above, which can be quite helpful when dealing with many values."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> sync_status </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| Status::Launching);\n</span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> load_status </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| Status::Launching);\n</span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> sync_task </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_coroutine</span><span style=\"color:#f8f8f2;\">(|</span><span style=\"font-style:italic;color:#fd971f;\">rx</span><span style=\"color:#f8f8f2;\">: UnboundedReceiver&lt;SyncAction&gt;| {{\n</span><span style=\"color:#f8f8f2;\">    async </span><span style=\"color:#f92672;\">move </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// ...\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}});</span></pre>\n",
            name: "use_coroutine_reference.rs".to_string(),
        }
        h2 { id: "sending-values",
            Link {
                to: BookRoute::ReferenceUseCoroutine {
                    section: ReferenceUseCoroutineSection::SendingValues,
                },
                class: "header",
                "Sending Values"
            }
        }
        p {
            "You might've noticed the  "
            code { "use_coroutine" }
            " closure takes an argument called  "
            code { "rx" }
            ". What is that? Well, a common pattern in complex apps is to handle a bunch of async code at once. With libraries like Redux Toolkit, managing multiple promises at once can be challenging and a common source of bugs."
        }
        p {
            "With Coroutines, we can centralize our async logic. The  "
            code { "rx" }
            " parameter is an Channel that allows code external to the coroutine to send data "
            em { "into" }
            " the coroutine. Instead of looping on an external service, we can loop on the channel itself, processing messages from within our app without needing to spawn a new future. To send data into the coroutine, we would call \"send\" on the handle."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">futures_util::StreamExt;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">ProfileUpdate {{\n</span><span style=\"color:#f8f8f2;\">    SetUsername(</span><span style=\"font-style:italic;color:#66d9ef;\">String</span><span style=\"color:#f8f8f2;\">),\n</span><span style=\"color:#f8f8f2;\">    SetAge(</span><span style=\"font-style:italic;color:#66d9ef;\">i32</span><span style=\"color:#f8f8f2;\">),\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> profile </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_coroutine</span><span style=\"color:#f8f8f2;\">(|</span><span style=\"color:#f92672;\">mut </span><span style=\"font-style:italic;color:#fd971f;\">rx</span><span style=\"color:#f8f8f2;\">: UnboundedReceiver&lt;ProfileUpdate&gt;| async </span><span style=\"color:#f92672;\">move </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> server </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">connect_to_server</span><span style=\"color:#f8f8f2;\">().await;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">while </span><span style=\"font-style:italic;color:#66d9ef;\">let Some</span><span style=\"color:#f8f8f2;\">(msg) </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> rx.</span><span style=\"color:#66d9ef;\">next</span><span style=\"color:#f8f8f2;\">().await {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">match</span><span style=\"color:#f8f8f2;\"> msg {{\n</span><span style=\"color:#f8f8f2;\">            ProfileUpdate::SetUsername(name) </span><span style=\"color:#f92672;\">=&gt;</span><span style=\"color:#f8f8f2;\"> server.</span><span style=\"color:#66d9ef;\">update_username</span><span style=\"color:#f8f8f2;\">(name).await,\n</span><span style=\"color:#f8f8f2;\">            ProfileUpdate::SetAge(age) </span><span style=\"color:#f92672;\">=&gt;</span><span style=\"color:#f8f8f2;\"> server.</span><span style=\"color:#66d9ef;\">update_age</span><span style=\"color:#f8f8f2;\">(age).await,\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}});\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    button {{ onclick: </span><span style=\"color:#f92672;\">move |_|</span><span style=\"color:#f8f8f2;\"> profile.</span><span style=\"color:#66d9ef;\">send</span><span style=\"color:#f8f8f2;\">(ProfileUpdate::SetUsername(</span><span style=\"color:#ffee99;\">&quot;Bob&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">())),\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#ffee99;\">&quot;Update username&quot;\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "use_coroutine_reference.rs".to_string(),
        }
        blockquote {
            p {
                "Note: In order to use/run the  "
                code { "rx.next().await" }
                " statement you will need to extend the "
                "[ "
                code { "Stream" }
                "]"
                " trait (used by "
                "[ "
                code { "UnboundedReceiver" }
                "]"
                " "
                ") by adding 'futures_util' as a dependency to your project and adding the  "
                code { "use futures_util::stream::StreamExt;" }
                "."
            }
        }
        p {
            "For sufficiently complex apps, we could build a bunch of different useful \"services\" that loop on channels to update the app."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> profile </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_coroutine</span><span style=\"color:#f8f8f2;\">(profile_service);\n</span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> editor </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_coroutine</span><span style=\"color:#f8f8f2;\">(editor_service);\n</span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> sync </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_coroutine</span><span style=\"color:#f8f8f2;\">(sync_service);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">profile_service</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">rx</span><span style=\"color:#f8f8f2;\">: UnboundedReceiver&lt;ProfileCommand&gt;) {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// do stuff\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">sync_service</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">rx</span><span style=\"color:#f8f8f2;\">: UnboundedReceiver&lt;SyncCommand&gt;) {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// do stuff\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">editor_service</span><span style=\"color:#f8f8f2;\">(</span><span style=\"font-style:italic;color:#fd971f;\">rx</span><span style=\"color:#f8f8f2;\">: UnboundedReceiver&lt;EditorCommand&gt;) {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#8c8c8c;\">// do stuff\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "use_coroutine_reference.rs".to_string(),
        }
        p {
            "We can combine coroutines with Global State to emulate Redux Toolkit's Thunk system with much less headache. This lets us store all of our app's state "
            em { "within" }
            " a task and then simply update the \"view\" values stored in Atoms. It cannot be understated how powerful this technique is: we get all the perks of native Rust tasks with the optimizations and ergonomics of global state. This means your "
            em { "actual" }
            " state does not need to be tied up in a system like "
            code { "Signal::global" }
            " or Redux – the only Atoms that need to exist are those that are used to drive the display/UI."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">static </span><span style=\"color:#ff80f4;\">USERNAME</span><span style=\"color:#f8f8f2;\">: GlobalSignal&lt;String&gt; </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">Signal::global(|| </span><span style=\"color:#ffee99;\">&quot;default&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">());\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">app</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">use_coroutine</span><span style=\"color:#f8f8f2;\">(sync_service);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        Banner {{}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Banner</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    rsx! {{\n</span><span style=\"color:#f8f8f2;\">        h1 {{ </span><span style=\"color:#ffee99;\">&quot;Welcome back, {{USERNAME}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "use_coroutine_reference.rs".to_string(),
        }
        p {
            "Now, in our sync service, we can structure our state however we want. We only need to update the view values when ready."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">use </span><span style=\"color:#f8f8f2;\">futures_util::StreamExt;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">static </span><span style=\"color:#ff80f4;\">USERNAME</span><span style=\"color:#f8f8f2;\">: GlobalSignal&lt;String&gt; </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">Signal::global(|| </span><span style=\"color:#ffee99;\">&quot;default&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">());\n</span><span style=\"font-style:italic;color:#66d9ef;\">static </span><span style=\"color:#ff80f4;\">ERRORS</span><span style=\"color:#f8f8f2;\">: GlobalSignal&lt;Vec&lt;String&gt;&gt; </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">Signal::global(|| </span><span style=\"font-style:italic;color:#66d9ef;\">Vec</span><span style=\"color:#f8f8f2;\">::new());\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">enum </span><span style=\"color:#f8f8f2;\">SyncAction {{\n</span><span style=\"color:#f8f8f2;\">    SetUsername(</span><span style=\"font-style:italic;color:#66d9ef;\">String</span><span style=\"color:#f8f8f2;\">),\n</span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">async </span><span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">sync_service</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">mut </span><span style=\"font-style:italic;color:#fd971f;\">rx</span><span style=\"color:#f8f8f2;\">: UnboundedReceiver&lt;SyncAction&gt;) {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">while </span><span style=\"font-style:italic;color:#66d9ef;\">let Some</span><span style=\"color:#f8f8f2;\">(msg) </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> rx.</span><span style=\"color:#66d9ef;\">next</span><span style=\"color:#f8f8f2;\">().await {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">match</span><span style=\"color:#f8f8f2;\"> msg {{\n</span><span style=\"color:#f8f8f2;\">            SyncAction::SetUsername(name) </span><span style=\"color:#f92672;\">=&gt; </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">                </span><span style=\"color:#f92672;\">if </span><span style=\"color:#66d9ef;\">set_name_on_server</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#f92672;\">&amp;</span><span style=\"color:#f8f8f2;\">name).await.</span><span style=\"color:#66d9ef;\">is_ok</span><span style=\"color:#f8f8f2;\">() {{\n</span><span style=\"color:#f8f8f2;\">                    </span><span style=\"color:#f92672;\">*</span><span style=\"color:#ff80f4;\">USERNAME</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">write</span><span style=\"color:#f8f8f2;\">() </span><span style=\"color:#f92672;\">=</span><span style=\"color:#f8f8f2;\"> name;\n</span><span style=\"color:#f8f8f2;\">                }} </span><span style=\"color:#f92672;\">else </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">                    </span><span style=\"color:#f92672;\">*</span><span style=\"color:#ff80f4;\">ERRORS</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">write</span><span style=\"color:#f8f8f2;\">() </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">vec![</span><span style=\"color:#ffee99;\">&quot;Failed to set username&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">to_string</span><span style=\"color:#f8f8f2;\">()];\n</span><span style=\"color:#f8f8f2;\">                }}\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "use_coroutine_reference.rs".to_string(),
        }
        h2 { id: "automatic-injection-into-the-context-api",
            Link {
                to: BookRoute::ReferenceUseCoroutine {
                    section: ReferenceUseCoroutineSection::AutomaticInjectionIntoTheContextApi,
                },
                class: "header",
                "Automatic injection into the Context API"
            }
        }
        p {
            "Coroutine handles are automatically injected through the context API. You can use the  "
            code { "use_coroutine_handle" }
            " hook with the message type as a generic to fetch a handle."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">Child</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> sync_task </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">use_coroutine_handle::&lt;SyncAction&gt;();\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    sync_task.</span><span style=\"color:#66d9ef;\">send</span><span style=\"color:#f8f8f2;\">(SyncAction::SetUsername);\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    todo!()\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "use_coroutine_reference.rs".to_string(),
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum ReferenceSpawnSection {
    #[default]
    Empty,
    SpawningFutures,
    SpawningTokioTasks,
}
impl std::str::FromStr for ReferenceSpawnSection {
    type Err = ReferenceSpawnSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "spawning-futures" => Ok(Self::SpawningFutures),
            "spawning-tokio-tasks" => Ok(Self::SpawningTokioTasks),
            _ => Err(ReferenceSpawnSectionParseError),
        }
    }
}
impl std::fmt::Display for ReferenceSpawnSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::SpawningFutures => f.write_str("spawning-futures"),
            Self::SpawningTokioTasks => f.write_str("spawning-tokio-tasks"),
        }
    }
}
#[derive(Debug)]
pub struct ReferenceSpawnSectionParseError;
impl std::fmt::Display for ReferenceSpawnSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of ReferenceSpawnSectionspawning-futures, spawning-tokio-tasks",
        )?;
        Ok(())
    }
}
impl std::error::Error for ReferenceSpawnSectionParseError {}
#[component(no_case_check)]
pub fn ReferenceSpawn(section: ReferenceSpawnSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "spawning-futures",
            Link {
                to: BookRoute::ReferenceSpawn {
                    section: ReferenceSpawnSection::SpawningFutures,
                },
                class: "header",
                "Spawning Futures"
            }
        }
        p {
            "The  "
            code { "use_resource" }
            " and  "
            code { "use_coroutine" }
            " hooks are useful if you want to unconditionally spawn the future. Sometimes, though, you'll want to only spawn a future in response to an event, such as a mouse click. For example, suppose you need to send a request when the user clicks a \"log in\" button. For this, you can use  "
            code { "spawn" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">mut</span><span style=\"color:#f8f8f2;\"> response </span><span style=\"color:#f92672;\">= </span><span style=\"color:#66d9ef;\">use_signal</span><span style=\"color:#f8f8f2;\">(|| </span><span style=\"font-style:italic;color:#66d9ef;\">String</span><span style=\"color:#f8f8f2;\">::from(</span><span style=\"color:#ffee99;\">&quot;...&quot;</span><span style=\"color:#f8f8f2;\">));\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> log_in </span><span style=\"color:#f92672;\">= move |_| </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#66d9ef;\">spawn</span><span style=\"color:#f8f8f2;\">(async </span><span style=\"color:#f92672;\">move </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"font-style:italic;color:#66d9ef;\">let</span><span style=\"color:#f8f8f2;\"> resp </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">reqwest::Client::new()\n</span><span style=\"color:#f8f8f2;\">            .</span><span style=\"color:#66d9ef;\">get</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;https://dioxuslabs.com&quot;</span><span style=\"color:#f8f8f2;\">)\n</span><span style=\"color:#f8f8f2;\">            .</span><span style=\"color:#66d9ef;\">send</span><span style=\"color:#f8f8f2;\">()\n</span><span style=\"color:#f8f8f2;\">            .await;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#f92672;\">match</span><span style=\"color:#f8f8f2;\"> resp {{\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"font-style:italic;color:#66d9ef;\">Ok</span><span style=\"color:#f8f8f2;\">(_data) </span><span style=\"color:#f92672;\">=&gt; </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">                log::info</span><span style=\"color:#f92672;\">!</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;dioxuslabs.com responded!&quot;</span><span style=\"color:#f8f8f2;\">);\n</span><span style=\"color:#f8f8f2;\">                response.</span><span style=\"color:#66d9ef;\">set</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;dioxuslabs.com responded!&quot;</span><span style=\"color:#f8f8f2;\">.</span><span style=\"color:#66d9ef;\">into</span><span style=\"color:#f8f8f2;\">());\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">            </span><span style=\"font-style:italic;color:#66d9ef;\">Err</span><span style=\"color:#f8f8f2;\">(err) </span><span style=\"color:#f92672;\">=&gt; </span><span style=\"color:#f8f8f2;\">{{\n</span><span style=\"color:#f8f8f2;\">                log::info</span><span style=\"color:#f92672;\">!</span><span style=\"color:#f8f8f2;\">(</span><span style=\"color:#ffee99;\">&quot;Request failed with error: {{err:?}}&quot;</span><span style=\"color:#f8f8f2;\">)\n</span><span style=\"color:#f8f8f2;\">            }}\n</span><span style=\"color:#f8f8f2;\">        }}\n</span><span style=\"color:#f8f8f2;\">    }});\n</span><span style=\"color:#f8f8f2;\">}};\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">rsx! {{\n</span><span style=\"color:#f8f8f2;\">    button {{ onclick: log_in, </span><span style=\"color:#ffee99;\">&quot;Response: {{response}}&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
            name: "spawn.rs".to_string(),
        }
        DemoFrame { spawn::App {} }
        blockquote {
            p {
                "Note:  "
                code { "spawn" }
                " will always spawn a "
                em { "new" }
                " future. You most likely don't want to call it on every render."
            }
        }
        p {
            "Calling  "
            code { "spawn" }
            " will give you a  "
            code { "JoinHandle" }
            " which lets you cancel or pause the future."
        }
        h2 { id: "spawning-tokio-tasks",
            Link {
                to: BookRoute::ReferenceSpawn {
                    section: ReferenceSpawnSection::SpawningTokioTasks,
                },
                class: "header",
                "Spawning Tokio Tasks"
            }
        }
        p {
            "Sometimes, you might want to spawn a background task that needs multiple threads or talk to hardware that might block your app code. In these cases, we can directly spawn a Tokio task from our future. For Dioxus-Desktop, your task will be spawned onto Tokio's Multithreaded runtime:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#66d9ef;\">spawn</span><span style=\"color:#f8f8f2;\">(async {{\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">_ = </span><span style=\"color:#f8f8f2;\">tokio::spawn(async {{}}).await;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"font-style:italic;color:#66d9ef;\">let </span><span style=\"color:#f92672;\">_ = </span><span style=\"color:#f8f8f2;\">tokio::task::spawn_local(async {{\n</span><span style=\"color:#f8f8f2;\">        </span><span style=\"color:#8c8c8c;\">// some !Send work\n</span><span style=\"color:#f8f8f2;\">    }})\n</span><span style=\"color:#f8f8f2;\">    .await;\n</span><span style=\"color:#f8f8f2;\">}});</span></pre>\n",
            name: "spawn.rs".to_string(),
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum ContributingIndexSection {
    #[default]
    Empty,
    Contributing,
    ImprovingDocs,
    WorkingOnTheEcosystem,
    BugsFeatures,
    BeforeYouContribute,
    HowToTestDioxusWithLocalCrate,
}
impl std::str::FromStr for ContributingIndexSection {
    type Err = ContributingIndexSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "contributing" => Ok(Self::Contributing),
            "improving-docs" => Ok(Self::ImprovingDocs),
            "working-on-the-ecosystem" => Ok(Self::WorkingOnTheEcosystem),
            "bugs--features" => Ok(Self::BugsFeatures),
            "before-you-contribute" => Ok(Self::BeforeYouContribute),
            "how-to-test-dioxus-with-local-crate" => Ok(Self::HowToTestDioxusWithLocalCrate),
            _ => Err(ContributingIndexSectionParseError),
        }
    }
}
impl std::fmt::Display for ContributingIndexSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Contributing => f.write_str("contributing"),
            Self::ImprovingDocs => f.write_str("improving-docs"),
            Self::WorkingOnTheEcosystem => f.write_str("working-on-the-ecosystem"),
            Self::BugsFeatures => f.write_str("bugs--features"),
            Self::BeforeYouContribute => f.write_str("before-you-contribute"),
            Self::HowToTestDioxusWithLocalCrate => {
                f.write_str("how-to-test-dioxus-with-local-crate")
            }
        }
    }
}
#[derive(Debug)]
pub struct ContributingIndexSectionParseError;
impl std::fmt::Display for ContributingIndexSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of ContributingIndexSectioncontributing, improving-docs, working-on-the-ecosystem, bugs--features, before-you-contribute, how-to-test-dioxus-with-local-crate",
        )?;
        Ok(())
    }
}
impl std::error::Error for ContributingIndexSectionParseError {}
#[component(no_case_check)]
pub fn ContributingIndex(section: ContributingIndexSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "contributing",
            Link {
                to: BookRoute::ContributingIndex {
                    section: ContributingIndexSection::Contributing,
                },
                class: "header",
                "Contributing"
            }
        }
        p {
            "Development happens in the "
            Link { to: "https://github.com/DioxusLabs/dioxus", "Dioxus GitHub repository" }
            ". If you've found a bug or have an idea for a feature, please submit an issue (but first check if someone hasn't "
            Link { to: "https://github.com/DioxusLabs/dioxus/issues", "done it already" }
            ")."
        }
        p {
            Link { to: "https://github.com/DioxusLabs/dioxus/discussions", "GitHub discussions" }
            " can be used as a place to ask for help or talk about features. You can also join "
            Link { to: "https://discord.gg/XgGxMSkvUM", "our Discord channel" }
            " where some development discussion happens."
        }
        h2 { id: "improving-docs",
            Link {
                to: BookRoute::ContributingIndex {
                    section: ContributingIndexSection::ImprovingDocs,
                },
                class: "header",
                "Improving Docs"
            }
        }
        p {
            "If you'd like to improve the docs, PRs are welcome! The Rust docs ("
            Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages", "source" }
            ") and this guide ("
            Link { to: "https://github.com/DioxusLabs/docsite/tree/main/docs-src/0.6",
                "source"
            }
            ") can be found in their respective GitHub repos."
        }
        h2 { id: "working-on-the-ecosystem",
            Link {
                to: BookRoute::ContributingIndex {
                    section: ContributingIndexSection::WorkingOnTheEcosystem,
                },
                class: "header",
                "Working on the Ecosystem"
            }
        }
        p {
            "Part of what makes React great is the rich ecosystem. We'd like the same for Dioxus! So if you have a library in mind that you'd like to write and many people would benefit from, it will be appreciated. You can "
            Link { to: "https://www.npmjs.com/search?q=keywords:react-component", "browse npm.js" }
            " for inspiration. Once you are done, add your library to the "
            Link { to: "https://github.com/DioxusLabs/awesome-dioxus", "awesome dioxus" }
            " list or share it in the "
            code { "#I-made-a-thing" }
            " channel on "
            Link { to: "https://discord.gg/XgGxMSkvUM", "Discord" }
            "."
        }
        h2 { id: "bugs--features",
            Link {
                to: BookRoute::ContributingIndex {
                    section: ContributingIndexSection::BugsFeatures,
                },
                class: "header",
                "Bugs & Features"
            }
        }
        p {
            "If you've fixed "
            Link { to: "https://github.com/DioxusLabs/dioxus/issues", "an open issue" }
            ", feel free to submit a PR! Consider "
            Link { to: "https://discord.gg/XgGxMSkvUM", "reaching out" }
            " to the team first to make sure everyone's on the same page, and you don't do useless work!"
        }
        p {
            "All pull requests (including those made by a team member) must be approved by at least one other team member."
            " "
            "Larger, more nuanced decisions about design, architecture, breaking changes, trade-offs, etc. are made by team consensus."
        }
        h2 { id: "before-you-contribute",
            Link {
                to: BookRoute::ContributingIndex {
                    section: ContributingIndexSection::BeforeYouContribute,
                },
                class: "header",
                "Before you contribute"
            }
        }
        p {
            "You might be surprised that a lot of checks fail when making your first PR."
            " "
            "That's why you should first run these commands before contributing, and it will save you "
            em { "lots" }
            " of time, because the"
            " "
            "GitHub CI is much slower at executing all of these than your PC."
        }
        ul {
            li {
                "Format code with "
                Link { to: "https://github.com/rust-lang/rustfmt", "rustfmt" }
                ":"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">cargo fmt </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\"> src</span><span style=\"color:#8c8c8c;\">/**/</span><span style=\"color:#f92672;\">**</span><span style=\"color:#f8f8f2;\">.rs</span></pre>\n" }
        ul {
            li {
                "You might need to install some packages on Linux (Ubuntu/deb) before the following commands will complete successfully (there is also a Nix flake in the repo root):"
            }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">sudo apt install libgdk3.</span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">cil libatk1.</span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">dev libcairo2</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">dev libpango1.</span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">dev libgdk</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">pixbuf2.</span><span style=\"color:#ff80f4;\">0</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">dev libsoup</span><span style=\"color:#f92672;\">-</span><span style=\"color:#ff80f4;\">3.0</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">dev libjavascriptcoregtk</span><span style=\"color:#f92672;\">-</span><span style=\"color:#ff80f4;\">4.1</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">dev libwebkit2gtk</span><span style=\"color:#f92672;\">-</span><span style=\"color:#ff80f4;\">4.1</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">dev</span></pre>\n",
        }
        ul {
            li {
                "Check all code "
                Link { to: "https://doc.rust-lang.org/cargo/commands/cargo-check.html",
                    "cargo check"
                }
                ":"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">cargo check </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">workspace </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">examples </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">tests</span></pre>\n" }
        ul {
            li {
                "Check if "
                Link { to: "https://doc.rust-lang.org/clippy/", "Clippy" }
                " generates any warnings. Please fix these!"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">cargo clippy </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">workspace </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">examples </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">tests </span><span style=\"color:#f92672;\">-- -</span><span style=\"color:#f8f8f2;\">D warnings</span></pre>\n" }
        ul {
            li {
                "Test all code with "
                Link { to: "https://doc.rust-lang.org/cargo/commands/cargo-test.html",
                    "cargo-test"
                }
                ":"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">cargo test </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">all </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">tests</span></pre>\n" }
        ul {
            li {
                "More tests, this time with "
                Link { to: "https://sagiegurari.github.io/cargo-make/", "cargo-make" }
                ". Here are all steps, including installation:"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">cargo install </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">force cargo</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">make\n</span><span style=\"color:#f8f8f2;\">cargo make tests</span></pre>\n" }
        ul {
            li {
                "Test with Playwright. This tests the UI itself, right in a browser. Here are all steps, including installation:"
                strong {
                    "Disclaimer: This might inexplicably fail on your machine without it being your fault."
                }
                " Make that PR anyway!"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">cd playwright</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">tests\n</span><span style=\"color:#f8f8f2;\">npm ci\n</span><span style=\"color:#f8f8f2;\">npm install </span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">D </span><span style=\"color:#f92672;\">@</span><span style=\"color:#f8f8f2;\">playwright</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">test\n</span><span style=\"color:#f8f8f2;\">npx playwright install </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">with</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">deps\n</span><span style=\"color:#f8f8f2;\">npx playwright test</span></pre>\n" }
        h2 { id: "how-to-test-dioxus-with-local-crate",
            Link {
                to: BookRoute::ContributingIndex {
                    section: ContributingIndexSection::HowToTestDioxusWithLocalCrate,
                },
                class: "header",
                "How to test dioxus with local crate"
            }
        }
        p {
            "If you are developing a feature, you should test it in your local setup before raising a PR. This process makes sure you are aware of your code functionality before being reviewed by peers."
        }
        ul {
            li { "Fork the following github repo (DioxusLabs/dioxus):" }
        }
        p {
            code { "https://github.com/DioxusLabs/dioxus" }
        }
        ul {
            li {
                "Create a new or use an existing rust crate (ignore this step if you will use an existing rust crate):"
                " "
                "This is where we will be testing the features of the forked"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">cargo new </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">bin demo</span></pre>\n" }
        ul {
            li { "Add the dioxus dependency to your rust crate (new/existing) in Cargo.toml:" }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">dioxus </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">{{ path </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;&lt;path to forked dioxus project&gt;/dioxus/packages/dioxus&quot;</span><span style=\"color:#f8f8f2;\">, features </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;web&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;router&quot;</span><span style=\"color:#f8f8f2;\">] }}</span></pre>\n" }
        p {
            "This above example is for dioxus-web, with dioxus-router. To know about the dependencies for different renderer visit "
            Link {
                to: BookRoute::GettingStartedIndex {
                    section: GettingStartedIndexSection::Empty,
                },
                "here"
            }
            "."
        }
        ul {
            li { "Run and test your feature" }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">dx serve</span></pre>\n" }
        p {
            "If this is your first time with dioxus, please read "
            Link {
                to: BookRoute::GuideIndex {
                    section: GuideIndexSection::Empty,
                },
                "the guide"
            }
            " to get familiar with dioxus."
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum ContributingProjectStructureSection {
    #[default]
    Empty,
    ProjectStructure,
    EntryPoints,
    Renderers,
    ExperimentalNativeRendering,
    Fullstack,
    CoreUtilities,
    WebUtilities,
    StateManagement,
    Logging,
    Routing,
    Assets,
    Formatting,
    Linting,
    Translation,
    HotReloading,
    Cli,
    Extension,
    Testing,
}
impl std::str::FromStr for ContributingProjectStructureSection {
    type Err = ContributingProjectStructureSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "project-structure" => Ok(Self::ProjectStructure),
            "entry-points" => Ok(Self::EntryPoints),
            "renderers" => Ok(Self::Renderers),
            "experimental-native-rendering" => Ok(Self::ExperimentalNativeRendering),
            "fullstack" => Ok(Self::Fullstack),
            "core-utilities" => Ok(Self::CoreUtilities),
            "web-utilities" => Ok(Self::WebUtilities),
            "state-management" => Ok(Self::StateManagement),
            "logging" => Ok(Self::Logging),
            "routing" => Ok(Self::Routing),
            "assets" => Ok(Self::Assets),
            "formatting" => Ok(Self::Formatting),
            "linting" => Ok(Self::Linting),
            "translation" => Ok(Self::Translation),
            "hot-reloading" => Ok(Self::HotReloading),
            "cli" => Ok(Self::Cli),
            "extension" => Ok(Self::Extension),
            "testing" => Ok(Self::Testing),
            _ => Err(ContributingProjectStructureSectionParseError),
        }
    }
}
impl std::fmt::Display for ContributingProjectStructureSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::ProjectStructure => f.write_str("project-structure"),
            Self::EntryPoints => f.write_str("entry-points"),
            Self::Renderers => f.write_str("renderers"),
            Self::ExperimentalNativeRendering => f.write_str("experimental-native-rendering"),
            Self::Fullstack => f.write_str("fullstack"),
            Self::CoreUtilities => f.write_str("core-utilities"),
            Self::WebUtilities => f.write_str("web-utilities"),
            Self::StateManagement => f.write_str("state-management"),
            Self::Logging => f.write_str("logging"),
            Self::Routing => f.write_str("routing"),
            Self::Assets => f.write_str("assets"),
            Self::Formatting => f.write_str("formatting"),
            Self::Linting => f.write_str("linting"),
            Self::Translation => f.write_str("translation"),
            Self::HotReloading => f.write_str("hot-reloading"),
            Self::Cli => f.write_str("cli"),
            Self::Extension => f.write_str("extension"),
            Self::Testing => f.write_str("testing"),
        }
    }
}
#[derive(Debug)]
pub struct ContributingProjectStructureSectionParseError;
impl std::fmt::Display for ContributingProjectStructureSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of ContributingProjectStructureSectionproject-structure, entry-points, renderers, experimental-native-rendering, fullstack, core-utilities, web-utilities, state-management, logging, routing, assets, formatting, linting, translation, hot-reloading, cli, extension, testing",
        )?;
        Ok(())
    }
}
impl std::error::Error for ContributingProjectStructureSectionParseError {}
#[component(no_case_check)]
pub fn ContributingProjectStructure(
    section: ContributingProjectStructureSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "project-structure",
            Link {
                to: BookRoute::ContributingProjectStructure {
                    section: ContributingProjectStructureSection::ProjectStructure,
                },
                class: "header",
                "Project Structure"
            }
        }
        p {
            "There are many packages in the Dioxus organization. This document will help you understand the purpose of each package and how they fit together:"
        }
        p {
            img {
                src: asset!("/assets/static/workspace-graph.png", ImageAssetOptions::new().with_avif()),
                alt: "Dioxus Dependency Graph",
                title: "",
            }
        }
        h2 { id: "entry-points",
            Link {
                to: BookRoute::ContributingProjectStructure {
                    section: ContributingProjectStructureSection::EntryPoints,
                },
                class: "header",
                "Entry Points"
            }
        }
        ul {
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/dioxus",
                    "dioxus"
                }
                ": The main crate for Dioxus applications. The dioxus crate has different feature flags to enable a specific "
                Link {
                    to: BookRoute::ContributingProjectStructure {
                        section: ContributingProjectStructureSection::Renderers,
                    },
                    "renderer"
                }
                " with the launch API and expose different features like the router and "
                Link {
                    to: BookRoute::ContributingProjectStructure {
                        section: ContributingProjectStructureSection::Fullstack,
                    },
                    "fullstack"
                }
                ". The "
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/cli",
                    "CLI"
                }
                " uses the renderer feature flag that is enabled to determine what rust target to compile for."
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/dioxus-lib",
                    "dioxus-lib"
                }
                ": Dioxus lib is a re-export of the dioxus crate without any renderer features. This crate is recommended for libraries because it is impossible to pull in a renderer feature accidentally which would enable that renderer for any downstream crates."
            }
        }
        h2 { id: "renderers",
            Link {
                to: BookRoute::ContributingProjectStructure {
                    section: ContributingProjectStructureSection::Renderers,
                },
                class: "header",
                "Renderers"
            }
        }
        p {
            "Renderers are the entry point for Dioxus applications. They handle rendering the application, polling async tasks, and handling events. Each renderer depends on  "
            code { "dioxus-core" }
            " for the core virtual dom and implements both the history trait from  "
            code { "dioxus-history" }
            " and the event conversion trait from  "
            code { "dioxus-html" }
            ". Dioxus has four renderers in the main repository:"
        }
        ul {
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/desktop",
                    "desktop"
                }
                ": A Render that Runs Dioxus applications natively, but renders them with the system webview"
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/mobile",
                    "mobile"
                }
                ": A Render that Runs Dioxus applications natively, but renders them with the system webview. This is currently a think wrapper on top of the desktop renderer since both renderers use the webview"
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/web",
                    "web"
                }
                ": Renders Dioxus applications in the browser by compiling to WASM and manipulating the DOM. The web renderer has a hydration feature to take over rendering from the server if "
                Link {
                    to: BookRoute::ContributingProjectStructure {
                        section: ContributingProjectStructureSection::Fullstack,
                    },
                    "fullstack"
                }
                " is enabled"
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/liveview",
                    "liveview"
                }
                ": A Render that Runs on the server, and renders using a websocket proxy in the browser. The liveview renderer is currently supported, but development has been deprioritized in favor of fullstack and it may be removed in the future"
            }
        }
        blockquote {
            p {
                "The "
                Link { to: "https://github.com/DioxusLabs/blitz/tree/legacy/packages/dioxus-tui",
                    "TUI"
                }
                " renderer has been deprecated but may be revisited in the future once the new version of Blitz is more stable"
            }
        }
        h2 { id: "experimental-native-rendering",
            Link {
                to: BookRoute::ContributingProjectStructure {
                    section: ContributingProjectStructureSection::ExperimentalNativeRendering,
                },
                class: "header",
                "Experimental Native Rendering"
            }
        }
        p {
            "In addition to the renderers listed above, Dioxus also has an experimental native renderer called Blitz that uses WebGPU to render HTML+CSS for dioxus applications:"
        }
        ul {
            li {
                Link { to: "https://github.com/DioxusLabs/taffy", "taffy" }
                ": Layout engine powering Blitz-Core, Plasmo, and Bevy UI"
            }
            li {
                Link { to: "https://github.com/DioxusLabs/blitz", "blitz" }
                ": An experimental native renderer for Dioxus applications using WGPU"
            }
        }
        h2 { id: "fullstack",
            Link {
                to: BookRoute::ContributingProjectStructure {
                    section: ContributingProjectStructureSection::Fullstack,
                },
                class: "header",
                "Fullstack"
            }
        }
        p {
            "Fullstack can be layered on top of any renderer to add support for server functions and server-side rendering."
        }
        ul {
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/ssr",
                    "ssr"
                }
                ": dioxus-ssr handles rendering a dioxus virtual dom to a string for testing or on the server. SSR is used in the fullstack renderer to handle server side rendering and static generation."
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/isrg",
                    "isrg"
                }
                ": dioxus-isrg handles incremental static site generation for dioxus fullstack applications. It helps fullstack cache server side rendered routes in memory and on the file system."
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/fullstack",
                    "fullstack"
                }
                ": dioxus-fullstack package handles the integration between a "
                Link { to: "https://github.com/tokio-rs/axum", "axum" }
                " server and a dioxus renderer. If the frontend renderer is targeting the web, the fullstack renderer will prepare html with embedded data so the client can take over rendering after the initial load (hydration)"
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/server-macro",
                    "server-macro"
                }
                ": The server-macro crate defines the "
                code { "server" }
                " macro used to define server functions in Dioxus applications. It integrates with the "
                Link { to: "https://crates.io/crates/server_fn", "server_fn" }
                " to automatically register the server functions on the server and call them on the client."
            }
        }
        h2 { id: "core-utilities",
            Link {
                to: BookRoute::ContributingProjectStructure {
                    section: ContributingProjectStructureSection::CoreUtilities,
                },
                class: "header",
                "Core utilities"
            }
        }
        p {
            "The core utilities contain the implementation of the virtual dom, and other macros used in all dioxus renderers. The core of dioxus doesn't assume it is running in a web context, so these utilities can be used by third party renderers like "
            Link { to: "https://github.com/marc2332/freya", "Freya" }
            "."
        }
        ul {
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/core",
                    "core"
                }
                ": The core virtual dom implementation every Dioxus application uses. The main entry point for core is the "
                code { "VirtualDom" }
                ". The virtual dom diffing methods accept a cross platform "
                code { "WriteMutations" }
                " trait that is called any time the renderer need to change what is rendered. The vdom also has methods for running futures, and inserting events. You can read more about the architecture of the core "
                Link { to: "https://dioxuslabs.com/blog/templates-diffing/", "in this blog post" }
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/core-types",
                    "core-types"
                }
                ": The core types crate contains some of the core functions used in both in dioxus core and the hot reloading engine."
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/core-macro",
                    "core-macro"
                }
                ": The core macro crate implement the "
                code { "derive(Props)" }
                " and "
                code { "#[component]" }
                " macros to derive builds for components. It also re-exports the rsx macro"
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/rsx",
                    "rsx"
                }
                ": Implements parsing and expansion for the RSX macro. The parser is also used for hot reloading, and autoformatting in the CLI"
            }
        }
        h2 { id: "web-utilities",
            Link {
                to: BookRoute::ContributingProjectStructure {
                    section: ContributingProjectStructureSection::WebUtilities,
                },
                class: "header",
                "Web utilities"
            }
        }
        p {
            "Every first party dioxus renderer targets html and css. With the exception of the blitz, all renderers run inside the browser context. Dioxus has a few utilities in the workspace with shared traits and javascript bindings to help interact with the browser:"
        }
        ul {
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/interpreter",
                    "interpreter"
                }
                ": The interpreter implements the "
                code { "WriteMutations" }
                " trait from dioxus core to modify the DOM with the diffs the virtual dom generates. The interpreter is used by the desktop, web and liveview renderers. It uses a combination of "
                Link { to: "https://rustwasm.github.io/wasm-bindgen",
                    code { "wasm-bindgen" }
                }
                " and "
                Link { to: "https://github.com/ealmloff/sledgehammer_bindgen",
                    code { "sledgehammer-bindgen" }
                }
                " to interact with the browser"
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/html",
                    "html"
                }
                ": defines html specific elements, events, and attributes. The elements and attributes are used in the rsx macro and hot reloading engine to map the rust identifiers to the html names. The events defined in the html crate are traits defined for each platform."
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/html-internal-macro",
                    "html-internal-macro"
                }
                ": The html-internal-macro crate is used by the html crate to define the html elements and attributes."
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/lazy-js-bundle",
                    "lazy-js-bundle"
                }
                ": A library to bundle typescript files at build time with bun only if the contents change. Only compiling the typescript when the files change and committing the build output lets us not require a ts compiler to be installed when dioxus is added as a library."
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/history",
                    "history"
                }
                ": The dioxus-history crate defines the history trait backing each renderer must provide for use with the router. For web renderers, this should call the javascript history api. Native renderers maintain their own history stack in memory."
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/document",
                    "document"
                }
                ": The dioxus-document crate defines the document trait backing each renderer must provide for use with "
                code { "eval" }
                " and the "
                code { "document::*" }
                " components. "
                code { "eval" }
                " runs javascript code from rust, and the "
                code { "document::*" }
                " components create html elements in the head."
            }
        }
        h2 { id: "state-management",
            Link {
                to: BookRoute::ContributingProjectStructure {
                    section: ContributingProjectStructureSection::StateManagement,
                },
                class: "header",
                "State Management"
            }
        }
        ul {
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/generational-box",
                    "generational-box"
                }
                ": Generational Box is the core of all "
                code { "Copy" }
                " state management in Dioxus. It allocates an arena of dynamically borrow checked values used throughout the dioxus ecosystem. The "
                code { "GenerationalBox" }
                " type backs "
                code { "Signal" }
                ", "
                code { "Memo" }
                ", and "
                code { "Resource" }
                " in dioxus signals. It is also used in "
                code { "dioxus-core" }
                " to make the "
                code { "Closure" }
                " and "
                code { "EventHandler" }
                " types "
                code { "Copy" }
                "."
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/signals",
                    "signals"
                }
                ": Signals are the main user facing state management crate for Dioxus. Signals track when they are read and written to and automatically re-run any "
                code { "ReactiveContext" }
                "s that depends on the signal."
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/hooks",
                    "hooks"
                }
                ": Hooks are a collection of common hooks for Dioxus applications. Most hooks are a thin wrapper over the new methods in the "
                code { "signals" }
                " crate to only create the object once when the component is created."
            }
        }
        h2 { id: "logging",
            Link {
                to: BookRoute::ContributingProjectStructure {
                    section: ContributingProjectStructureSection::Logging,
                },
                class: "header",
                "Logging"
            }
        }
        ul {
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/logger",
                    "logger"
                }
                ": The logger crate provides a simple logging interface for Dioxus applications that works across native and wasm targets. It is automatically called in the launch function if the logging feature is enabled."
            }
        }
        h2 { id: "routing",
            Link {
                to: BookRoute::ContributingProjectStructure {
                    section: ContributingProjectStructureSection::Routing,
                },
                class: "header",
                "Routing"
            }
        }
        ul {
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/router",
                    "router"
                }
                ": The router crate handles routing in Dioxus applications. It uses the history provider the renderer provides to get and modify the url. The route parsing logic is derived with the "
                code { "derive(Routable)" }
                " macro defined in the dioxus-router-macro crate."
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/router-macro",
                    "router-macro"
                }
                ": The router-macro crate defines the "
                code { "derive(Routable)" }
                " macro used to the route enum from a url and display it as a url."
            }
        }
        h2 { id: "assets",
            Link {
                to: BookRoute::ContributingProjectStructure {
                    section: ContributingProjectStructureSection::Assets,
                },
                class: "header",
                "Assets"
            }
        }
        ul {
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/manganis/manganis",
                    "manganis"
                }
                ": Manganis is dioxus' asset system. It uses a macro to inject assets from rust code into the linker. Every asset gets a unique hash for cache busting. The CLI pulls the asset out of the linker and bundled them into the final application."
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/manganis/manganis-macro",
                    "manganis-macro"
                }
                ": Manganis-macro defines the "
                code { "asset!()" }
                " macro used to include assets in Dioxus applications."
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/manganis/manganis-core",
                    "manganis-core"
                }
                ": Manganis-core contains the builders for all options passed into the "
                code { "asset!()" }
                " macro and the link sections the asset macro and CLI use to bundle assets."
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/const-serialize",
                    "const-serialize"
                }
                ": Const Serialize defines a trait to serialize rust types to a cross platform format at compile time. This is used to serialize the options for assets at compile time in manganis."
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/const-serialize-macro",
                    "const-serialize-macro"
                }
                ": Const Serialize Macro defines a derive macro for types that can be serialized at compile time with the "
                code { "const-serialize" }
                " crate."
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/cli-opt",
                    "cli-opt"
                }
                ": The cli-opt optimizes the assets that manganis produces."
            }
        }
        h2 { id: "formatting",
            Link {
                to: BookRoute::ContributingProjectStructure {
                    section: ContributingProjectStructureSection::Formatting,
                },
                class: "header",
                "Formatting"
            }
        }
        ul {
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/autofmt",
                    "autofmt"
                }
                ": The autofmt crate finds and formats all rsx macros in a rust project. It uses the "
                code { "dioxus-rsx" }
                " crate to parse rsx."
            }
        }
        h2 { id: "linting",
            Link {
                to: BookRoute::ContributingProjectStructure {
                    section: ContributingProjectStructureSection::Linting,
                },
                class: "header",
                "Linting"
            }
        }
        ul {
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/check",
                    "check"
                }
                ": The dioxus-check crate analyzes dioxus code to check for common errors like calling hooks in conditionals or loops."
            }
        }
        h2 { id: "translation",
            Link {
                to: BookRoute::ContributingProjectStructure {
                    section: ContributingProjectStructureSection::Translation,
                },
                class: "header",
                "Translation"
            }
        }
        ul {
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/rsx-rosetta",
                    "rsx-rosetta"
                }
                ": The rsx-rosetta crate translates html to rsx. It uses the element definitions from "
                code { "dioxus-html" }
                " to translate html elements and attributes to their rust names and the "
                code { "rsx" }
                " crate to generate the rsx macro."
            }
        }
        h2 { id: "hot-reloading",
            Link {
                to: BookRoute::ContributingProjectStructure {
                    section: ContributingProjectStructureSection::HotReloading,
                },
                class: "header",
                "Hot Reloading"
            }
        }
        ul {
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/rsx-hotreload",
                    "rsx-hotreload"
                }
                ": The rsx-hotreload crate handles diffing rsx macros between builds and creating the hot reload templates for the CLI."
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/devtools",
                    "devtools"
                }
                ": The devtools crate contains the frontend for hot reloading each renderer needs to integrate with. It receives hot reload messages from a websocket connection with the CLI"
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/devtools-types",
                    "devtools-types"
                }
                ": The devtools-types crate contains the types used to communicate between the devtools frontend and the backend in the CLI."
            }
        }
        h2 { id: "cli",
            Link {
                to: BookRoute::ContributingProjectStructure {
                    section: ContributingProjectStructureSection::Cli,
                },
                class: "header",
                "CLI"
            }
        }
        ul {
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/cli",
                    "cli"
                }
                ": The cli crate contains the dioxus CLI. It integrates check, autofmt, cli-opt, and rsx-hotreload to build and serve Dioxus applications."
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/cli-config",
                    "cli-config"
                }
                ": The cli-config crate has shared types that are provided at runtime from the CLI to crates the CLI are built with. It is used by "
                code { "dioxus-desktop" }
                " to set the title from the "
                code { "Dioxus.toml" }
                " file and by "
                code { "dioxus-fullstack" }
                " to set the port the CLI proxies the server from."
            }
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/dx-wire-format",
                    "dx-wire-format"
                }
                ": The dx-wire-format crate has the unstable types the CLI emits in json mode. This is used by the dioxus playground."
            }
        }
        h2 { id: "extension",
            Link {
                to: BookRoute::ContributingProjectStructure {
                    section: ContributingProjectStructureSection::Extension,
                },
                class: "header",
                "Extension"
            }
        }
        ul {
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/extension",
                    "extension"
                }
                ": The extension folder contains the source code for the dioxus VSCode extension. It uses many of the same crates as the CLI, but packaged into a wasm+JS bundle for VSCode."
            }
        }
        h2 { id: "testing",
            Link {
                to: BookRoute::ContributingProjectStructure {
                    section: ContributingProjectStructureSection::Testing,
                },
                class: "header",
                "Testing"
            }
        }
        ul {
            li {
                Link { to: "https://github.com/DioxusLabs/dioxus/tree/main/packages/playwright-tests",
                    "playwright-tests"
                }
                ": The playwright-tests folder contains end to end tests for dioxus-web, dioxus-liveview and fullstack. These crates are not published on crates.io"
            }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum ContributingGuidingPrinciplesSection {
    #[default]
    Empty,
    OverallGoals,
    CrossPlatform,
    Performance,
    TypeSafety,
    DeveloperExperience,
}
impl std::str::FromStr for ContributingGuidingPrinciplesSection {
    type Err = ContributingGuidingPrinciplesSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "overall-goals" => Ok(Self::OverallGoals),
            "cross-platform" => Ok(Self::CrossPlatform),
            "performance" => Ok(Self::Performance),
            "type-safety" => Ok(Self::TypeSafety),
            "developer-experience" => Ok(Self::DeveloperExperience),
            _ => Err(ContributingGuidingPrinciplesSectionParseError),
        }
    }
}
impl std::fmt::Display for ContributingGuidingPrinciplesSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::OverallGoals => f.write_str("overall-goals"),
            Self::CrossPlatform => f.write_str("cross-platform"),
            Self::Performance => f.write_str("performance"),
            Self::TypeSafety => f.write_str("type-safety"),
            Self::DeveloperExperience => f.write_str("developer-experience"),
        }
    }
}
#[derive(Debug)]
pub struct ContributingGuidingPrinciplesSectionParseError;
impl std::fmt::Display for ContributingGuidingPrinciplesSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of ContributingGuidingPrinciplesSectionoverall-goals, cross-platform, performance, type-safety, developer-experience",
        )?;
        Ok(())
    }
}
impl std::error::Error for ContributingGuidingPrinciplesSectionParseError {}
#[component(no_case_check)]
pub fn ContributingGuidingPrinciples(
    section: ContributingGuidingPrinciplesSection,
) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "overall-goals",
            Link {
                to: BookRoute::ContributingGuidingPrinciples {
                    section: ContributingGuidingPrinciplesSection::OverallGoals,
                },
                class: "header",
                "Overall Goals"
            }
        }
        p {
            "This document outlines some of the overall goals for Dioxus. These goals are not set in stone, but they represent general guidelines for the project."
        }
        p {
            "The goal of Dioxus is to make it easy to build "
            strong { "cross-platform applications that scale" }
            "."
        }
        h2 { id: "cross-platform",
            Link {
                to: BookRoute::ContributingGuidingPrinciples {
                    section: ContributingGuidingPrinciplesSection::CrossPlatform,
                },
                class: "header",
                "Cross-Platform"
            }
        }
        p {
            "Dioxus is designed to be cross-platform by default. This means that it should be easy to build applications that run on the web, desktop, and mobile. However, Dioxus should also be flexible enough to allow users to opt into platform-specific features when needed. The  "
            code { "use_eval" }
            " is one example of this. By default, Dioxus does not assume that the platform supports JavaScript, but it does provide a hook that allows users to opt into JavaScript when needed."
        }
        h2 { id: "performance",
            Link {
                to: BookRoute::ContributingGuidingPrinciples {
                    section: ContributingGuidingPrinciplesSection::Performance,
                },
                class: "header",
                "Performance"
            }
        }
        p {
            "As Dioxus applications grow, they should remain relatively performant without the need for manual optimizations. There will be cases where manual optimizations are needed, but Dioxus should try to make these cases as rare as possible."
        }
        p {
            "One of the benefits of the core architecture of Dioxus is that it delivers reasonable performance even when components are rerendered often. It is based on a Virtual Dom which performs diffing which should prevent unnecessary re-renders even when large parts of the component tree are rerun. On top of this, Dioxus groups static parts of the RSX tree together to skip diffing them entirely."
        }
        h2 { id: "type-safety",
            Link {
                to: BookRoute::ContributingGuidingPrinciples {
                    section: ContributingGuidingPrinciplesSection::TypeSafety,
                },
                class: "header",
                "Type Safety"
            }
        }
        p {
            "As teams grow, the Type safety of Rust is a huge advantage. Dioxus should leverage this advantage to make it easy to build applications with large teams."
        }
        p {
            "To take full advantage of Rust's type system, Dioxus should try to avoid exposing public  "
            code { "Any" }
            " types and string-ly typed APIs where possible."
        }
        h2 { id: "developer-experience",
            Link {
                to: BookRoute::ContributingGuidingPrinciples {
                    section: ContributingGuidingPrinciplesSection::DeveloperExperience,
                },
                class: "header",
                "Developer Experience"
            }
        }
        p { "Dioxus should be easy to learn and ergonomic to use." }
        ul {
            li {
                p {
                    "The API of Dioxus attempts to remain close to React's API where possible. This makes it easier for people to learn Dioxus if they already know React"
                }
            }
            li {
                p {
                    "We can avoid the tradeoff between simplicity and flexibility by providing multiple layers of API: One for the very common use case, one for low-level control"
                }
                ul {
                    li {
                        "Hooks: the hooks crate has the most common use cases, but "
                        code { "use_hook" }
                        " provides a way to access the underlying persistent value if needed."
                    }
                    li {
                        "The builder pattern in platform Configs: The builder pattern is used to default to the most common use case, but users can change the defaults if needed."
                    }
                }
            }
            li {
                p { "Documentation:" }
                ul {
                    li { "All public APIs should have rust documentation" }
                    li {
                        "Examples should be provided for all public features. These examples both serve as documentation and testing. They are checked by CI to ensure that they continue to compile"
                    }
                    li { "The most common workflows should be documented in the guide" }
                }
            }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum CliIndexSection {
    #[default]
    Empty,
    Introduction,
    Features,
}
impl std::str::FromStr for CliIndexSection {
    type Err = CliIndexSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "introduction" => Ok(Self::Introduction),
            "features" => Ok(Self::Features),
            _ => Err(CliIndexSectionParseError),
        }
    }
}
impl std::fmt::Display for CliIndexSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::Introduction => f.write_str("introduction"),
            Self::Features => f.write_str("features"),
        }
    }
}
#[derive(Debug)]
pub struct CliIndexSectionParseError;
impl std::fmt::Display for CliIndexSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str("Invalid section name. Expected one of CliIndexSectionintroduction, features")?;
        Ok(())
    }
}
impl std::error::Error for CliIndexSectionParseError {}
#[component(no_case_check)]
pub fn CliIndex(section: CliIndexSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "introduction",
            Link {
                to: BookRoute::CliIndex {
                    section: CliIndexSection::Introduction,
                },
                class: "header",
                "Introduction"
            }
        }
        p {
            "The ✨"
            strong { "Dioxus CLI" }
            "✨ is a tool to get Dioxus projects off the ground."
        }
        p {
            "There's no documentation for commands here, but you can see all commands using  "
            code { "dx --help" }
            " once you've installed the CLI! Furthermore, you can run  "
            code { "dx <command> --help" }
            " to get help with a specific command."
        }
        h2 { id: "features",
            Link {
                to: BookRoute::CliIndex {
                    section: CliIndexSection::Features,
                },
                class: "header",
                "Features"
            }
        }
        ul {
            li { "Build and pack a Dioxus project." }
            li {
                "Format "
                code { "rsx" }
                " code."
            }
            li { "Hot Reload." }
            li { "Create a Dioxus project from a template repository." }
            li { "And more!" }
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum CliCreatingSection {
    #[default]
    Empty,
    CreateAProject,
    InitializingAProject,
}
impl std::str::FromStr for CliCreatingSection {
    type Err = CliCreatingSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "create-a-project" => Ok(Self::CreateAProject),
            "initializing-a-project" => Ok(Self::InitializingAProject),
            _ => Err(CliCreatingSectionParseError),
        }
    }
}
impl std::fmt::Display for CliCreatingSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::CreateAProject => f.write_str("create-a-project"),
            Self::InitializingAProject => f.write_str("initializing-a-project"),
        }
    }
}
#[derive(Debug)]
pub struct CliCreatingSectionParseError;
impl std::fmt::Display for CliCreatingSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of CliCreatingSectioncreate-a-project, initializing-a-project",
        )?;
        Ok(())
    }
}
impl std::error::Error for CliCreatingSectionParseError {}
#[component(no_case_check)]
pub fn CliCreating(section: CliCreatingSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "create-a-project",
            Link {
                to: BookRoute::CliCreating {
                    section: CliCreatingSection::CreateAProject,
                },
                class: "header",
                "Create a Project"
            }
        }
        p { "Once you have the Dioxus CLI installed, you can use it to create your own project!" }
        h2 { id: "initializing-a-project",
            Link {
                to: BookRoute::CliCreating {
                    section: CliCreatingSection::InitializingAProject,
                },
                class: "header",
                "Initializing a project"
            }
        }
        p {
            "First, run the  "
            code { "dx new" }
            " command to create a new project."
        }
        blockquote {
            p {
                "It clones this "
                Link { to: "https://github.com/DioxusLabs/dioxus-template", "template" }
                ", which is used to create dioxus apps."
            }
            p {
                "You can create your project from a different template by passing the  "
                code { "template" }
                " argument:"
            }
            CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">dx new </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">template gh:dioxuslabs</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">dioxus</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">template</span></pre>\n" }
        }
        p {
            "Next, navigate into your new project using  "
            code { "cd project-name" }
            ", or simply opening it in an IDE."
        }
        blockquote {
            p {
                "Make sure the WASM target is installed before running the projects."
                " "
                "You can install the WASM target for rust using rustup:"
            }
            CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">rustup target add wasm32</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">unknown</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">unknown</span></pre>\n" }
        }
        p {
            "Finally, serve your project with  "
            code { "dx serve" }
            "! The CLI will tell you the address it is serving on, along with additional"
            " "
            "info such as code warnings."
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum CliConfigureSection {
    #[default]
    Empty,
    ConfigureProject,
    Structure,
    Application,
    Webapp,
    Webwatcher,
    Webresource,
    Webresourcedev,
    Webproxy,
    Webhttps,
    WebpreCompress,
    WebwasmOpt,
    Bundle,
    Bundlemacos,
    Bundlewindows,
    ConfigExample,
}
impl std::str::FromStr for CliConfigureSection {
    type Err = CliConfigureSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "configure-project" => Ok(Self::ConfigureProject),
            "structure" => Ok(Self::Structure),
            "application-" => Ok(Self::Application),
            "webapp-" => Ok(Self::Webapp),
            "webwatcher-" => Ok(Self::Webwatcher),
            "webresource-" => Ok(Self::Webresource),
            "webresourcedev-" => Ok(Self::Webresourcedev),
            "webproxy" => Ok(Self::Webproxy),
            "webhttps" => Ok(Self::Webhttps),
            "webpre-compress" => Ok(Self::WebpreCompress),
            "webwasm-opt" => Ok(Self::WebwasmOpt),
            "bundle" => Ok(Self::Bundle),
            "bundlemacos" => Ok(Self::Bundlemacos),
            "bundlewindows" => Ok(Self::Bundlewindows),
            "config-example" => Ok(Self::ConfigExample),
            _ => Err(CliConfigureSectionParseError),
        }
    }
}
impl std::fmt::Display for CliConfigureSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::ConfigureProject => f.write_str("configure-project"),
            Self::Structure => f.write_str("structure"),
            Self::Application => f.write_str("application-"),
            Self::Webapp => f.write_str("webapp-"),
            Self::Webwatcher => f.write_str("webwatcher-"),
            Self::Webresource => f.write_str("webresource-"),
            Self::Webresourcedev => f.write_str("webresourcedev-"),
            Self::Webproxy => f.write_str("webproxy"),
            Self::Webhttps => f.write_str("webhttps"),
            Self::WebpreCompress => f.write_str("webpre-compress"),
            Self::WebwasmOpt => f.write_str("webwasm-opt"),
            Self::Bundle => f.write_str("bundle"),
            Self::Bundlemacos => f.write_str("bundlemacos"),
            Self::Bundlewindows => f.write_str("bundlewindows"),
            Self::ConfigExample => f.write_str("config-example"),
        }
    }
}
#[derive(Debug)]
pub struct CliConfigureSectionParseError;
impl std::fmt::Display for CliConfigureSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of CliConfigureSectionconfigure-project, structure, application-, webapp-, webwatcher-, webresource-, webresourcedev-, webproxy, webhttps, webpre-compress, webwasm-opt, bundle, bundlemacos, bundlewindows, config-example",
        )?;
        Ok(())
    }
}
impl std::error::Error for CliConfigureSectionParseError {}
#[component(no_case_check)]
pub fn CliConfigure(section: CliConfigureSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "configure-project",
            Link {
                to: BookRoute::CliConfigure {
                    section: CliConfigureSection::ConfigureProject,
                },
                class: "header",
                "Configure Project"
            }
        }
        p {
            "This chapter will teach you how to configure the CLI with the  "
            code { "Dioxus.toml" }
            " file. There's an "
            Link {
                to: BookRoute::CliConfigure {
                    section: CliConfigureSection::ConfigExample,
                },
                "example"
            }
            " which has comments to describe individual keys. You can copy that or view this documentation for a more complete learning experience."
        }
        p {
            "\"🔒\" indicates a mandatory item. Some headers are mandatory, but none of the keys inside them are. In that case, you only need to include the header, but no keys. It might look weird, but it's normal."
        }
        h2 { id: "structure",
            Link {
                to: BookRoute::CliConfigure {
                    section: CliConfigureSection::Structure,
                },
                class: "header",
                "Structure"
            }
        }
        p { "Each header has its TOML form directly under it." }
        h3 { id: "application-",
            Link {
                to: BookRoute::CliConfigure {
                    section: CliConfigureSection::Application,
                },
                class: "header",
                "Application 🔒"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[application]</span></pre>\n" }
        p { "Application-wide configuration. Applies to both web and desktop." }
        ul {
            li {
                strong { "asset_dir" }
                " - The directory with your static assets. The CLI will automatically copy these assets into the "
                strong { "out_dir" }
                " after a build/serve."
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">asset_dir </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;public&quot;</span></pre>\n" }
            }
            li {
                strong { "sub_package" }
                " - The sub package in the workspace to build by default."
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">sub_package </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;my-crate&quot;</span></pre>\n" }
            }
        }
        h3 { id: "webapp-",
            Link {
                to: BookRoute::CliConfigure {
                    section: CliConfigureSection::Webapp,
                },
                class: "header",
                "Web.App 🔒"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[web.app]</span></pre>\n" }
        p { "Web-specific configuration." }
        ul {
            li {
                strong { "title" }
                " - The title of the web page."
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\"># </span><span style=\"color:#ff80f4;\">HTML</span><span style=\"color:#f8f8f2;\"> title tag content\n</span><span style=\"color:#f8f8f2;\">title </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;project_name&quot;</span></pre>\n" }
            }
            li {
                strong { "base_path" }
                " - The base path to build the application for serving at. This can be useful when serving your application in a subdirectory under a domain. For example, when building a site to be served on GitHub Pages."
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> The application will be served at domain.com</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">my_application</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">, so we need to modify the base_path to the path </span><span style=\"color:#f92672;\">where</span><span style=\"color:#f8f8f2;\"> the application will be served\n</span><span style=\"color:#f8f8f2;\">base_path </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;my_application&quot;</span></pre>\n" }
            }
        }
        h3 { id: "webwatcher-",
            Link {
                to: BookRoute::CliConfigure {
                    section: CliConfigureSection::Webwatcher,
                },
                class: "header",
                "Web.Watcher 🔒"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[web.watcher]</span></pre>\n" }
        p { "Development server configuration." }
        ul {
            li {
                p {
                    strong { "reload_html" }
                    " - If this is true, the cli will rebuild the index.html file every time the application is rebuilt"
                }
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">reload_html </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">true</span></pre>\n" }
            }
            li {
                p {
                    strong { "watch_path" }
                    " - The files & directories to monitor for changes"
                }
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">watch_path </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;src&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;public&quot;</span><span style=\"color:#f8f8f2;\">]</span></pre>\n" }
            }
            li {
                p {
                    strong { "index_on_404" }
                    " - If enabled, Dioxus will serve the root page when a route is not found."
                    em { "This is needed when serving an application that uses the router" }
                    ". However, when serving your app using something else than Dioxus (e.g. GitHub Pages), you will have to check how to configure it on that platform. In GitHub Pages, you can make a copy of "
                    code { "index.html" }
                    " named "
                    code { "404.html" }
                    " in the same directory."
                }
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">index_on_404 </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">true</span></pre>\n" }
            }
        }
        h3 { id: "webresource-",
            Link {
                to: BookRoute::CliConfigure {
                    section: CliConfigureSection::Webresource,
                },
                class: "header",
                "Web.Resource 🔒"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[web.resource]</span></pre>\n" }
        p { "Static resource configuration." }
        ul {
            li {
                p {
                    strong { "style" }
                    " - CSS files to include in your application."
                }
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">style </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[\n</span><span style=\"color:#f8f8f2;\">   </span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> Include from public_dir.\n</span><span style=\"color:#f8f8f2;\">   </span><span style=\"color:#ffee99;\">&quot;./assets/style.css&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">   </span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> Or some asset from online cdn.\n</span><span style=\"color:#f8f8f2;\">   </span><span style=\"color:#ffee99;\">&quot;https://cdn.jsdelivr.net/npm/bootstrap/dist/css/bootstrap.css&quot;\n</span><span style=\"color:#f8f8f2;\">]</span></pre>\n" }
            }
            li {
                p {
                    strong { "script" }
                    " - JavaScript files to include in your application."
                }
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">script </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> Include from asset_dir.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#ffee99;\">&quot;./public/index.js&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> Or from an online </span><span style=\"color:#ff80f4;\">CDN</span><span style=\"color:#f8f8f2;\">.\n</span><span style=\"color:#f8f8f2;\">    </span><span style=\"color:#ffee99;\">&quot;https://cdn.jsdelivr.net/npm/bootstrap/dist/js/bootstrap.js&quot;\n</span><span style=\"color:#f8f8f2;\">]</span></pre>\n" }
            }
        }
        h3 { id: "webresourcedev-",
            Link {
                to: BookRoute::CliConfigure {
                    section: CliConfigureSection::Webresourcedev,
                },
                class: "header",
                "Web.Resource.Dev 🔒"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[web.resource.dev]</span></pre>\n" }
        p {
            "This is the same as "
            Link {
                to: BookRoute::CliConfigure {
                    section: CliConfigureSection::Webresource,
                },
                code { "[web.resource]" }
            }
            ", but it only works in development servers. For example, if you want to include a file in a "
            code { "dx serve" }
            " server, but not a "
            code { "dx serve --release" }
            " server, put it here."
        }
        h3 { id: "webproxy",
            Link {
                to: BookRoute::CliConfigure {
                    section: CliConfigureSection::Webproxy,
                },
                class: "header",
                "Web.Proxy"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[[web.proxy]]</span></pre>\n" }
        p {
            "Configuration related to any proxies your application requires during development. Proxies will forward requests to a new service."
        }
        ul {
            li {
                strong { "backend" }
                " - The URL to the server to proxy. The CLI will forward any requests under the backend relative route to the backend instead of returning 404"
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">backend </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;http://localhost:8000/api/&quot;</span></pre>\n" }
                "This will cause any requests made to the dev server with prefix /api/ to be redirected to the backend server at http://localhost:8000. The path and query parameters will be passed on as-is (path rewriting is currently not supported)."
            }
        }
        h3 { id: "webhttps",
            Link {
                to: BookRoute::CliConfigure {
                    section: CliConfigureSection::Webhttps,
                },
                class: "header",
                "Web.https"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[[web.https]]</span></pre>\n" }
        p { "Controls the https config for the CLI." }
        ul {
            li {
                strong { "enabled" }
                " enables or disables https in the CLI"
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">enabled </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">true</span></pre>\n" }
            }
            li {
                strong { "mkcert" }
                " enables or disables generating certs with the mkcert CLI"
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">mkcert </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">true</span></pre>\n" }
            }
            li {
                strong { "key_path" }
                " sets the path to use for the https key"
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">key_path </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;/path/to/key&quot;</span></pre>\n" }
            }
            li {
                strong { "cert_path" }
                " sets the path to use for the https cert"
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">cert_path </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;/path/to/cert&quot;</span></pre>\n" }
            }
        }
        h3 { id: "webpre-compress",
            Link {
                to: BookRoute::CliConfigure {
                    section: CliConfigureSection::WebpreCompress,
                },
                class: "header",
                "Web.pre_compress"
            }
        }
        p {
            "If this setting is enabled, the CLI will pre-compress the built assets in release mode with brotli. This setting is enabled by default."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[web]\n</span><span style=\"color:#f8f8f2;\">pre_compress </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">true</span></pre>\n" }
        h3 { id: "webwasm-opt",
            Link {
                to: BookRoute::CliConfigure {
                    section: CliConfigureSection::WebwasmOpt,
                },
                class: "header",
                "Web.wasm_opt"
            }
        }
        p { "Controls the wasm-opt config for the CLI." }
        ul {
            li {
                strong { "level" }
                " sets the level of optimization to use for wasm-opt in release builds."
                ul {
                    li { "z: optimize aggressively for size" }
                    li { "s: optimize for size" }
                    li { "1: optimize for speed" }
                    li { "2: optimize for more for speed" }
                    li { "3: optimize for even more for speed" }
                    li { "4: optimize aggressively for speed (default)" }
                }
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">level </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;z&quot;</span></pre>\n" }
            }
            li {
                strong { "debug" }
                " keep debug symbols in the wasm file even in release builds"
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">debug </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">true</span></pre>\n" }
            }
        }
        h3 { id: "bundle",
            Link {
                to: BookRoute::CliConfigure {
                    section: CliConfigureSection::Bundle,
                },
                class: "header",
                "Bundle"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[bundle]</span></pre>\n" }
        p {
            "Controls the bundling process for your application. Dioxus uses tauri-bundler under the hood. This section only includes a subset of the options available in tauri-bundler. More options can be found in the tauri-bundler "
            Link { to: "https://v1.tauri.app/v1/guides/building/#configuration-options",
                "documentation"
            }
            "."
        }
        ul {
            li {
                strong { "identifier" }
                " - A unique identifier for your application (e.g., "
                code { "com.dioxuslabs" }
                ")."
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">identifier </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;com.dioxuslabs&quot;</span></pre>\n" }
            }
            li {
                strong { "publisher" }
                " - The name of the entity publishing the application."
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">publisher </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;DioxusLabs&quot;</span></pre>\n" }
            }
            li {
                strong { "icon" }
                " - Paths to icon files to be used in the bundle. Icon files must be square and 16, 24, 32, 64, or 256 pixels in size. PNG icons must have a 32 bit depth in the RGBA format. If you use a "
                code { ".icns" }
                " file is must fit "
                Link { to: "https://github.com/tauri-apps/tauri/blob/d8db5042a28635259f646c329c3ec5ccf23eac9e/tooling/cli/src/helpers/icns.json",
                    "this"
                }
                " format. The icons must include a "
                code { ".icns" }
                " icon for macOS, "
                code { ".ico" }
                " for Windows and "
                code { ".png" }
                " for Linux."
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">icon </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[\n</span><span style=\"color:#f8f8f2;\">   </span><span style=\"color:#ffee99;\">&quot;icons/32x32.png&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">   </span><span style=\"color:#ffee99;\">&quot;icons/128x128.png&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">   </span><span style=\"color:#ffee99;\">&quot;icons/128x128@2x.png&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">   </span><span style=\"color:#ffee99;\">&quot;icons/icon.icns&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">   </span><span style=\"color:#ffee99;\">&quot;icons/icon.ico&quot;\n</span><span style=\"color:#f8f8f2;\">]</span></pre>\n" }
            }
            li {
                strong { "resources" }
                " - Additional files to include in the bundle. Each asset is copied from the path and is accessible from the bundle at the same path. Any "
                Link {
                    to: BookRoute::GuidesAssets {
                        section: GuidesAssetsSection::Empty,
                    },
                    "assets"
                }
                " are automatically bundled with the installer."
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">resources </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;path/to/resource&quot;</span><span style=\"color:#f8f8f2;\">]</span></pre>\n" }
            }
            li {
                strong { "copyright" }
                " - Copyright information for the application."
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">copyright </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;Copyright 2023 DioxusLabs&quot;</span></pre>\n" }
            }
            li {
                strong { "category" }
                " - The category of the application. Must be one of "
                code { "Business" }
                ", "
                code { "DeveloperTool" }
                ", "
                code { "Education" }
                ", "
                code { "Entertainment" }
                ", "
                code { "Finance" }
                ", "
                code { "Game" }
                ", "
                code { "ActionGame" }
                ", "
                code { "AdventureGame" }
                ", "
                code { "ArcadeGame" }
                ", "
                code { "BoardGame" }
                ", "
                code { "CardGame" }
                ", "
                code { "CasinoGame" }
                ", "
                code { "DiceGame" }
                ", "
                code { "EducationalGame" }
                ", "
                code { "FamilyGame" }
                ", "
                code { "KidsGame" }
                ", "
                code { "MusicGame" }
                ", "
                code { "PuzzleGame" }
                ", "
                code { "RacingGame" }
                ", "
                code { "RolePlayingGame" }
                ", "
                code { "SimulationGame" }
                ", "
                code { "SportsGame" }
                ", "
                code { "StrategyGame" }
                ", "
                code { "TriviaGame" }
                ", "
                code { "WordGame" }
                ", "
                code { "GraphicsAndDesign" }
                ", "
                code { "HealthcareAndFitness" }
                ", "
                code { "Lifestyle" }
                ", "
                code { "Medical" }
                ", "
                code { "Music" }
                ", "
                code { "News" }
                ", "
                code { "Photography" }
                ", "
                code { "Productivity" }
                ", "
                code { "Reference" }
                ", "
                code { "SocialNetworking" }
                ", "
                code { "Sports" }
                ", "
                code { "Travel" }
                ", "
                code { "Utility" }
                ", "
                code { "Video" }
                ", or "
                code { "Weather" }
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">category </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;Utility&quot;</span></pre>\n" }
            }
            li {
                strong { "short_description" }
                " - A brief description of the application."
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">short_description </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;A utility application built with Dioxus&quot;</span></pre>\n" }
            }
            li {
                strong { "long_description" }
                " - A detailed description of the application."
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">long_description </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;This application provides various utility functions...&quot;</span></pre>\n" }
            }
            li {
                strong { "external_bin" }
                " - Paths to external sidecar binaries to include in the bundle. These bundles may be accessed at runtime with the name of the binary (not the absolute path). "
                strong {
                    "the target triple will be automatically added to the binary name before it is added to the bundle."
                }
                CodeBlock {
                    contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">external_bin </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;path/to/external_binary&quot;</span><span style=\"color:#f8f8f2;\">] </span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> On macos, the binary at path</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">to</span><span style=\"color:#f92672;\">/</span><span style=\"color:#f8f8f2;\">external_binary</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">aarch64</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">apple</span><span style=\"color:#f92672;\">-</span><span style=\"color:#f8f8f2;\">darwin will be included </span><span style=\"color:#f92672;\">in</span><span style=\"color:#f8f8f2;\"> the bundle. It can be accessed at runtime with the name external_binary</span></pre>\n",
                }
            }
        }
        h3 { id: "bundlemacos",
            Link {
                to: BookRoute::CliConfigure {
                    section: CliConfigureSection::Bundlemacos,
                },
                class: "header",
                "Bundle.macos"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[bundle.macos]</span></pre>\n" }
        p { "Configuration options for macOS bundles." }
        ul {
            li {
                strong { "frameworks" }
                " - List of frameworks to include in the bundle."
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">frameworks </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;CoreML&quot;</span><span style=\"color:#f8f8f2;\">]</span></pre>\n" }
            }
            li {
                strong { "minimum_system_version" }
                " - Minimum macOS version required. (default: "
                code { "10.13" }
                ")"
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">minimum_system_version </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;10.13&quot;</span></pre>\n" }
            }
            li {
                strong { "license" }
                " - Path to the license file."
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">license </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;LICENSE.txt&quot;</span></pre>\n" }
            }
            li {
                strong { "exception_domain" }
                " - Domain for exception handling. The domain must be lowercase without a port or protocol."
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">exception_domain </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;mysite.com&quot;</span></pre>\n" }
            }
            li {
                strong { "signing_identity" }
                " - macOS signing identity."
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">signing_identity </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;SIGNING IDENTITY KEYCHAIN ENTRY NAME&quot;</span></pre>\n" }
            }
            li {
                strong { "provider_short_name" }
                " - Provider short name for the bundle."
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">provider_short_name </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;DioxusLabs&quot;</span></pre>\n" }
            }
            li {
                strong { "entitlements" }
                " - Path to the entitlements file."
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">entitlements </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;entitlements.plist&quot;</span></pre>\n" }
            }
            li {
                strong { "hardened_runtime" }
                " - Whether to enable the "
                Link { to: "https://developer.apple.com/documentation/security/hardened-runtime",
                    "hardened runtime"
                }
                " in the bundle."
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">hardened_runtime </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">true</span></pre>\n" }
            }
        }
        h3 { id: "bundlewindows",
            Link {
                to: BookRoute::CliConfigure {
                    section: CliConfigureSection::Bundlewindows,
                },
                class: "header",
                "Bundle.windows"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[bundle.windows]</span></pre>\n" }
        p { "Configuration options for Windows bundles." }
        ul {
            li {
                strong { "digest_algorithm" }
                " - Sets the file digest algorithm used for signing."
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">digest_algorithm </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;sha-256&quot;</span></pre>\n" }
            }
            li {
                strong { "certificate_thumbprint" }
                " - SHA1 hash of the signing certificate."
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">certificate_thumbprint </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;A1B2C3D4E5F6...&quot;</span></pre>\n" }
            }
            li {
                strong { "timestamp_url" }
                " - Sets the server to used for timestamping the signature."
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">timestamp_url </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;http://timestamp.digicert.com&quot;</span></pre>\n" }
            }
            li {
                strong { "tsp" }
                " - Whether to use the time stamping protocol."
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">tsp </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">true</span></pre>\n" }
            }
            li {
                strong { "icon_path" }
                " - Path to the icon for the system tray icon. (defaults to "
                code { "./icons/icon.ico" }
                ")"
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">icon_path </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;assets/icon.ico&quot;</span></pre>\n" }
            }
            li {
                strong { "webview_install_mode" }
                " - Installation mode for WebView2."
                " "
                "EmbedBootstrapper: embed the WebView2 bootstrapper into the installer"
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[webview_install_mode.EmbedBootstrapper]\n</span><span style=\"color:#f8f8f2;\">silent </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">true</span></pre>\n" }
                "DownloadBootstrapper: download the WebView2 bootstrapper in the installer at runtime"
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[webview_install_mode.DownloadBootstrapper]\n</span><span style=\"color:#f8f8f2;\">silent </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">true</span></pre>\n" }
                "OfflineInstaller: Embed the WebView2 installer into the main installer"
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[webview_install_mode.OfflineInstaller]\n</span><span style=\"color:#f8f8f2;\">silent </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">true</span></pre>\n" }
                "FixedRuntime: Use a fixed path to the WebView2 runtime"
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[webview_install_mode.FixedRuntime]\n</span><span style=\"color:#f8f8f2;\">path </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;path/to/runtime&quot;</span></pre>\n" }
                "Skip: Does not install WebView2 as part of the installer. This will cause the application to fail if webview was not already installed"
                CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">webview_install_mode </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;Skip&quot;</span></pre>\n" }
            }
        }
        h2 { id: "config-example",
            Link {
                to: BookRoute::CliConfigure {
                    section: CliConfigureSection::ConfigExample,
                },
                class: "header",
                "Config example"
            }
        }
        p { "This includes all fields, mandatory or not." }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">[application]\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> App name\n</span><span style=\"color:#f8f8f2;\">name </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;project_name&quot;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> `build` </span><span style=\"color:#f92672;\">&amp;</span><span style=\"color:#f8f8f2;\"> `serve` output path\n</span><span style=\"color:#f8f8f2;\">out_dir </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;dist&quot;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> The </span><span style=\"font-style:italic;color:#66d9ef;\">static</span><span style=\"color:#f8f8f2;\"> resource path\n</span><span style=\"color:#f8f8f2;\">asset_dir </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;public&quot;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">[web.app]\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\"># </span><span style=\"color:#ff80f4;\">HTML</span><span style=\"color:#f8f8f2;\"> title tag content\n</span><span style=\"color:#f8f8f2;\">title </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;project_name&quot;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">[web.watcher]\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> When watcher is triggered, regenerate the `index.html`\n</span><span style=\"color:#f8f8f2;\">reload_html </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ff80f4;\">true\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> Which files or dirs will be monitored\n</span><span style=\"color:#f8f8f2;\">watch_path </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[</span><span style=\"color:#ffee99;\">&quot;src&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;public&quot;</span><span style=\"color:#f8f8f2;\">]\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> Include style or script assets\n</span><span style=\"color:#f8f8f2;\">[web.resource]\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\"># </span><span style=\"color:#ff80f4;\">CSS</span><span style=\"color:#f8f8f2;\"> style file\n</span><span style=\"color:#f8f8f2;\">style </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[]\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> Javascript code file\n</span><span style=\"color:#f8f8f2;\">script </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[]\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">[web.resource.dev]\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> Same </span><span style=\"color:#f92672;\">as </span><span style=\"color:#f8f8f2;\">[web.resource], but </span><span style=\"color:#f92672;\">for</span><span style=\"color:#f8f8f2;\"> development servers\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\"># </span><span style=\"color:#ff80f4;\">CSS</span><span style=\"color:#f8f8f2;\"> style file\n</span><span style=\"color:#f8f8f2;\">style </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[]\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f92672;\">#</span><span style=\"color:#f8f8f2;\"> JavaScript files\n</span><span style=\"color:#f8f8f2;\">script </span><span style=\"color:#f92672;\">= </span><span style=\"color:#f8f8f2;\">[]\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">[[web.proxy]]\n</span><span style=\"color:#f8f8f2;\">backend </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;http://localhost:8000/api/&quot;\n</span><span style=\"color:#f8f8f2;\">\n</span><span style=\"color:#f8f8f2;\">[bundle]\n</span><span style=\"color:#f8f8f2;\">identifier </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;com.dioxuslabs&quot;\n</span><span style=\"color:#f8f8f2;\">publisher </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;DioxusLabs&quot;\n</span><span style=\"color:#f8f8f2;\">icon </span><span style=\"color:#f92672;\">= </span><span style=\"color:#ffee99;\">&quot;assets/icon.png&quot;</span></pre>\n",
        }
    }
}
#[derive(
    Clone, Copy, PartialEq, Eq, Hash, Debug, Default, serde::Serialize, serde::Deserialize,
)]
pub enum CliTranslateSection {
    #[default]
    Empty,
    TranslatingExistingHtml,
    Usage,
}
impl std::str::FromStr for CliTranslateSection {
    type Err = CliTranslateSectionParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "" => Ok(Self::Empty),
            "translating-existing-html" => Ok(Self::TranslatingExistingHtml),
            "usage" => Ok(Self::Usage),
            _ => Err(CliTranslateSectionParseError),
        }
    }
}
impl std::fmt::Display for CliTranslateSection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Empty => f.write_str(""),
            Self::TranslatingExistingHtml => f.write_str("translating-existing-html"),
            Self::Usage => f.write_str("usage"),
        }
    }
}
#[derive(Debug)]
pub struct CliTranslateSectionParseError;
impl std::fmt::Display for CliTranslateSectionParseError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(
            "Invalid section name. Expected one of CliTranslateSectiontranslating-existing-html, usage",
        )?;
        Ok(())
    }
}
impl std::error::Error for CliTranslateSectionParseError {}
#[component(no_case_check)]
pub fn CliTranslate(section: CliTranslateSection) -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "translating-existing-html",
            Link {
                to: BookRoute::CliTranslate {
                    section: CliTranslateSection::TranslatingExistingHtml,
                },
                class: "header",
                "Translating existing HTML"
            }
        }
        p {
            "Dioxus uses a custom format called RSX to represent the HTML because it is more concise and looks more like Rust code. However, it can be a pain to convert existing HTML to RSX. That's why Dioxus comes with a tool called  "
            code { "dx translate" }
            " that can automatically convert HTML to RSX!"
        }
        p {
            "Dx translate can make converting large chunks of HTML to RSX much easier! Lets try translating some of the HTML from the Dioxus homepage:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">dx translate </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">raw  </span><span style=\"color:#ffee99;\">&quot;&lt;div class=</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">relative w-full mx-4 sm:mx-auto text-gray-600</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">&gt;&lt;div class=</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">text-[3em] md:text-[5em] font-semibold dark:text-white text-ghdarkmetal font-sans py-12 flex flex-col</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">&gt;&lt;span&gt;Fullstack, crossplatform,&lt;/span&gt;&lt;span&gt;lightning fast, fully typed.&lt;/span&gt;&lt;/div&gt;&lt;h3 class=</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">text-[2em] dark:text-white font-extralight text-ghdarkmetal pt-4 max-w-screen-md mx-auto</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">&gt;Dioxus is a Rust library for building apps that run on desktop, web, mobile, and more.&lt;/h3&gt;&lt;div class=</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">pt-12 text-white text-[1.2em] font-sans font-bold flex flex-row justify-center space-x-4</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">&gt;&lt;a href=</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">/learn/0.6/getting_started</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\"> dioxus-prevent-default=</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">onclick</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\"> class=</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">bg-red-600 py-2 px-8 hover:-translate-y-2 transition-transform duration-300</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\"> data-dioxus-id=</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">216</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">&gt;Quickstart&lt;/a&gt;&lt;a href=</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">/learn/0.6/reference</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\"> dioxus-prevent-default=</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">onclick</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\"> class=</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">bg-blue-500 py-2 px-8 hover:-translate-y-2 transition-transform duration-300</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\"> data-dioxus-id=</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">214</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">&gt;Read the docs&lt;/a&gt;&lt;/div&gt;&lt;div class=</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">max-w-screen-2xl mx-auto pt-36</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">&gt;&lt;h1 class=</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">text-md</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">&gt;Trusted by top companies&lt;/h1&gt;&lt;div class=</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">pt-4 flex flex-row flex-wrap justify-center</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">&gt;&lt;div class=</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">h-12 w-40 bg-black p-2 m-4 flex justify-center items-center</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">&gt;&lt;img src=</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">static/futurewei_bw.png</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">&gt;&lt;/div&gt;&lt;div class=</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">h-12 w-40 bg-black p-2 m-4 flex justify-center items-center</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">&gt;&lt;img src=</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">static/airbuslogo.svg</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">&gt;&lt;/div&gt;&lt;div class=</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">h-12 w-40 bg-black p-2 m-4 flex justify-center items-center</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">&gt;&lt;img src=</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">static/ESA_logo.svg</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">&gt;&lt;/div&gt;&lt;div class=</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">h-12 w-40 bg-black p-2 m-4 flex justify-center items-center</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">&gt;&lt;img src=</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">static/yclogo.svg</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">&gt;&lt;/div&gt;&lt;div class=</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">h-12 w-40 bg-black p-2 m-4 flex justify-center items-center</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">&gt;&lt;img src=</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">static/satellite.webp</span><span style=\"color:#ff80f4;\">\\&quot;</span><span style=\"color:#ffee99;\">&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&quot;</span></pre>\n",
        }
        p { "We get the following RSX you can easily copy and paste into your code:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">div {{ class: </span><span style=\"color:#ffee99;\">&quot;relative w-full mx-4 sm:mx-auto text-gray-600&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">   div {{ class: </span><span style=\"color:#ffee99;\">&quot;text-[3em] md:text-[5em] font-semibold dark:text-white text-ghdarkmetal font-sans py-12 flex flex-col&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">      span {{ </span><span style=\"color:#ffee99;\">&quot;Fullstack, crossplatform,&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">      span {{ </span><span style=\"color:#ffee99;\">&quot;lightning fast, fully typed.&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">   }}\n</span><span style=\"color:#f8f8f2;\">   h3 {{ class: </span><span style=\"color:#ffee99;\">&quot;text-[2em] dark:text-white font-extralight text-ghdarkmetal pt-4 max-w-screen-md mx-auto&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">      </span><span style=\"color:#ffee99;\">&quot;Dioxus is a Rust library for building apps that run on desktop, web, mobile, and more.&quot;\n</span><span style=\"color:#f8f8f2;\">   }}\n</span><span style=\"color:#f8f8f2;\">   div {{ class: </span><span style=\"color:#ffee99;\">&quot;pt-12 text-white text-[1.2em] font-sans font-bold flex flex-row justify-center space-x-4&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">      a {{\n</span><span style=\"color:#f8f8f2;\">         href: </span><span style=\"color:#ffee99;\">&quot;/learn/0.6/getting_started&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">         data_dioxus_id: </span><span style=\"color:#ffee99;\">&quot;216&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">         dioxus_prevent_default: </span><span style=\"color:#ffee99;\">&quot;onclick&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">         class: </span><span style=\"color:#ffee99;\">&quot;bg-red-600 py-2 px-8 hover:-translate-y-2 transition-transform duration-300&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">         </span><span style=\"color:#ffee99;\">&quot;Quickstart&quot;\n</span><span style=\"color:#f8f8f2;\">      }}\n</span><span style=\"color:#f8f8f2;\">      a {{\n</span><span style=\"color:#f8f8f2;\">         dioxus_prevent_default: </span><span style=\"color:#ffee99;\">&quot;onclick&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">         href: </span><span style=\"color:#ffee99;\">&quot;/learn/0.6/reference&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">         data_dioxus_id: </span><span style=\"color:#ffee99;\">&quot;214&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">         class: </span><span style=\"color:#ffee99;\">&quot;bg-blue-500 py-2 px-8 hover:-translate-y-2 **transition**-transform duration-300&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">         </span><span style=\"color:#ffee99;\">&quot;Read the docs&quot;\n</span><span style=\"color:#f8f8f2;\">      }}\n</span><span style=\"color:#f8f8f2;\">   }}\n</span><span style=\"color:#f8f8f2;\">   div {{ class: </span><span style=\"color:#ffee99;\">&quot;max-w-screen-2xl mx-auto pt-36&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">      h1 {{ class: </span><span style=\"color:#ffee99;\">&quot;text-md&quot;</span><span style=\"color:#f8f8f2;\">, </span><span style=\"color:#ffee99;\">&quot;Trusted by top companies&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">      div {{ class: </span><span style=\"color:#ffee99;\">&quot;pt-4 flex flex-row flex-wrap justify-center&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">         div {{ class: </span><span style=\"color:#ffee99;\">&quot;h-12 w-40 p-2 m-4 flex justify-center items-center&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            img {{ src: </span><span style=\"color:#ffee99;\">&quot;/assets/static/futurewei_bw.png&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">         }}\n</span><span style=\"color:#f8f8f2;\">         div {{ class: </span><span style=\"color:#ffee99;\">&quot;h-12 w-40 p-2 m-4 flex justify-center items-center&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            img {{ src: </span><span style=\"color:#ffee99;\">&quot;/assets/static/airbuslogo.svg&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">         }}\n</span><span style=\"color:#f8f8f2;\">         div {{ class: </span><span style=\"color:#ffee99;\">&quot;h-12 w-40 p-2 m-4 flex justify-center items-center&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            img {{ src: </span><span style=\"color:#ffee99;\">&quot;/assets/static/ESA_logo.svg&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">         }}\n</span><span style=\"color:#f8f8f2;\">         div {{ class: </span><span style=\"color:#ffee99;\">&quot;h-12 w-40 p-2 m-4 flex justify-center items-center&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            img {{ src: </span><span style=\"color:#ffee99;\">&quot;/assets/static/yclogo.svg&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">         }}\n</span><span style=\"color:#f8f8f2;\">         div {{ class: </span><span style=\"color:#ffee99;\">&quot;h-12 w-40 p-2 m-4 flex justify-center items-center&quot;</span><span style=\"color:#f8f8f2;\">,\n</span><span style=\"color:#f8f8f2;\">            img {{ src: </span><span style=\"color:#ffee99;\">&quot;/assets/static/satellite.webp&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">         }}\n</span><span style=\"color:#f8f8f2;\">      }}\n</span><span style=\"color:#f8f8f2;\">   }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n",
        }
        h2 { id: "usage",
            Link {
                to: BookRoute::CliTranslate {
                    section: CliTranslateSection::Usage,
                },
                class: "header",
                "Usage"
            }
        }
        p {
            "The  "
            code { "dx translate" }
            " command has several flags you can use to control your html input and rsx output."
        }
        p {
            "You can use the  "
            code { "--file" }
            " flag to translate an HTML file to RSX:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">dx translate </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">file index.html</span></pre>\n" }
        p {
            "Or you can use the  "
            code { "--raw" }
            " flag to translate a string of HTML to RSX:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">dx translate </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">raw </span><span style=\"color:#ffee99;\">&quot;&lt;div&gt;Hello world&lt;/div&gt;&quot;</span></pre>\n" }
        p { "Both of those commands will output the following RSX:" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">div {{ </span><span style=\"color:#ffee99;\">&quot;Hello world&quot; </span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "The  "
            code { "dx translate" }
            " command will output the RSX to stdout. You can use the  "
            code { "--output" }
            " flag to write the RSX to a file instead."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">dx translate </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">raw </span><span style=\"color:#ffee99;\">&quot;&lt;div&gt;Hello world&lt;/div&gt;&quot; </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">output index.rs</span></pre>\n" }
        p {
            "You can automatically create a component with the  "
            code { "--component" }
            " flag."
        }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"color:#f8f8f2;\">dx translate </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">raw </span><span style=\"color:#ffee99;\">&quot;&lt;div&gt;Hello world&lt;/div&gt;&quot; </span><span style=\"color:#f92672;\">--</span><span style=\"color:#f8f8f2;\">component</span></pre>\n" }
        p { "This will output the following component:" }
        CodeBlock { contents: "<pre style=\"background-color:#0d0d0d;\">\n<span style=\"font-style:italic;color:#66d9ef;\">fn </span><span style=\"color:#a6e22e;\">component</span><span style=\"color:#f8f8f2;\">() -&gt; Element {{\n</span><span style=\"color:#f8f8f2;\">   rsx! {{\n</span><span style=\"color:#f8f8f2;\">      div {{ </span><span style=\"color:#ffee99;\">&quot;Hello world&quot; </span><span style=\"color:#f8f8f2;\">}}\n</span><span style=\"color:#f8f8f2;\">   }}\n</span><span style=\"color:#f8f8f2;\">}}</span></pre>\n" }
        p {
            "To learn more about the different flags  "
            code { "dx translate" }
            " supports, run  "
            code { "dx translate --help" }
            "."
        }
    }
}

use super::*;

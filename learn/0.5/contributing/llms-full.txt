<SYSTEM>This is the developer documentation for Dioxus at /learn/0.5/contributing/project_structure and all its subroutes.</SYSTEM>

# Project Structure

There are many packages in the Dioxus organization. This document will help you understand the purpose of each package and how they fit together.

## Renderers

* [Desktop](https://github.com/DioxusLabs/dioxus/tree/main/packages/desktop): A Render that Runs Dioxus applications natively, but renders them with the system webview
* [Mobile](https://github.com/DioxusLabs/dioxus/tree/main/packages/mobile): A Render that Runs Dioxus applications natively, but renders them with the system webview. This is currently a copy of the desktop render
* [Web](https://github.com/DioxusLabs/dioxus/tree/main/packages/web): Renders Dioxus applications in the browser by compiling to WASM and manipulating the DOM
* [Liveview](https://github.com/DioxusLabs/dioxus/tree/main/packages/liveview): A Render that Runs on the server, and renders using a websocket proxy in the browser
* [Plasmo](https://github.com/DioxusLabs/blitz/tree/master/packages/plasmo): A Renderer that renders a HTML-like tree into a terminal
* [TUI](https://github.com/DioxusLabs/blitz/tree/master/packages/dioxus-tui): A Renderer that uses Plasmo to render a Dioxus application in a terminal
* [Blitz-Core](https://github.com/DioxusLabs/blitz/tree/master/packages/blitz-core): An experimental native renderer that renders a HTML-like tree using WGPU.
* [Blitz](https://github.com/DioxusLabs/blitz): An experimental native renderer that uses Blitz-Core to render a Dioxus application using WGPU.
* [SSR](https://github.com/DioxusLabs/dioxus/tree/main/packages/ssr): A Render that Runs Dioxus applications on the server, and renders them to HTML

## State Management/Hooks

* [Hooks](https://github.com/DioxusLabs/dioxus/tree/main/packages/hooks): A collection of common hooks for Dioxus applications
* [Signals](https://github.com/DioxusLabs/dioxus/tree/main/packages/signals): A experimental state management library for Dioxus applications. This currently contains a `Copy` version of Signal
* [SDK](https://github.com/DioxusLabs/sdk): A collection of platform agnostic hooks to interact with system interfaces (The clipboard, camera, etc.).
* [Fermi](https://github.com/DioxusLabs/dioxus/tree/main/packages/fermi): A global state management library for Dioxus applications.
* [Router](https://github.com/DioxusLabs/dioxus/tree/main/packages/router): A client-side router for Dioxus applications

## Core utilities

* [core](https://github.com/DioxusLabs/dioxus/tree/main/packages/core): The core virtual dom implementation every Dioxus application uses
  * You can read more about the architecture of the core [in this blog post](https://dioxuslabs.com/blog/templates-diffing/) and the [custom renderer section of the guide](../cookbook/custom_renderer.md)
* [RSX](https://github.com/DioxusLabs/dioxus/tree/main/packages/rsx): The core parsing for RSX used for hot reloading, autoformatting, and the macro
* [core-macro](https://github.com/DioxusLabs/dioxus/tree/main/packages/core-macro): The rsx! macro used to write Dioxus applications. (This is a wrapper over the RSX crate)
* [HTML macro](https://github.com/DioxusLabs/dioxus-html-macro): A html-like alternative to the RSX macro

## Native Renderer Utilities

* [native-core](https://github.com/DioxusLabs/blitz/tree/main/packages/native-core): Incrementally computed tree of states (mostly styles)
  * You can read more about how native-core can help you build native renderers in the [custom renderer section of the guide](../cookbook/custom_renderer.md#native-core)
* [native-core-macro](https://github.com/DioxusLabs/blitz/tree/main/packages/native-core-macro): A helper macro for native core
* [Taffy](https://github.com/DioxusLabs/taffy): Layout engine powering Blitz-Core, Plasmo, and Bevy UI

## Web renderer tooling

* [HTML](https://github.com/DioxusLabs/dioxus/tree/main/packages/html): defines html specific elements, events, and attributes
* [Interpreter](https://github.com/DioxusLabs/dioxus/tree/main/packages/interpreter): defines browser bindings used by the web and desktop renderers

## Developer tooling

* [hot-reload](https://github.com/DioxusLabs/dioxus/tree/main/packages/hot-reload): Macro that uses the RSX crate to hot reload static parts of any rsx! macro. This macro works with any non-web renderer with an [integration](https://crates.io/crates/dioxus-hot-reload)
* [autofmt](https://github.com/DioxusLabs/dioxus/tree/main/packages/autofmt): Formats RSX code
* [rsx-rosetta](https://github.com/DioxusLabs/dioxus/tree/main/packages/rsx-rosetta): Handles conversion between HTML and RSX
* [CLI](https://github.com/DioxusLabs/dioxus/tree/main/packages/cli): A Command Line Interface and VSCode extension to assist with Dioxus usage
# Overall Goals

This document outlines some of the overall goals for Dioxus. These goals are not set in stone, but they represent general guidelines for the project.

The goal of Dioxus is to make it easy to build **cross-platform applications that scale**.

## Cross-Platform

Dioxus is designed to be cross-platform by default. This means that it should be easy to build applications that run on the web, desktop, and mobile. However, Dioxus should also be flexible enough to allow users to opt into platform-specific features when needed. The `use_eval` is one example of this. By default, Dioxus does not assume that the platform supports JavaScript, but it does provide a hook that allows users to opt into JavaScript when needed.

## Performance

As Dioxus applications grow, they should remain relatively performant without the need for manual optimizations. There will be cases where manual optimizations are needed, but Dioxus should try to make these cases as rare as possible.

One of the benefits of the core architecture of Dioxus is that it delivers reasonable performance even when components are rerendered often. It is based on a Virtual Dom which performs diffing which should prevent unnecessary re-renders even when large parts of the component tree are rerun. On top of this, Dioxus groups static parts of the RSX tree together to skip diffing them entirely.

## Type Safety

As teams grow, the Type safety of Rust is a huge advantage. Dioxus should leverage this advantage to make it easy to build applications with large teams.

To take full advantage of Rust's type system, Dioxus should try to avoid exposing public `Any` types and string-ly typed APIs where possible.

## Developer Experience

Dioxus should be easy to learn and ergonomic to use.

* The API of Dioxus attempts to remain close to React's API where possible. This makes it easier for people to learn Dioxus if they already know React

* We can avoid the tradeoff between simplicity and flexibility by providing multiple layers of API: One for the very common use case, one for low-level control
  
  * Hooks: the hooks crate has the most common use cases, but `use_hook` provides a way to access the underlying persistent value if needed.
  * The builder pattern in platform Configs: The builder pattern is used to default to the most common use case, but users can change the defaults if needed.
* Documentation:
  
  * All public APIs should have rust documentation
  * Examples should be provided for all public features. These examples both serve as documentation and testing. They are checked by CI to ensure that they continue to compile
  * The most common workflows should be documented in the guide
# Roadmap & Feature-set

This feature set and roadmap can help you decide if what Dioxus can do today works for you.

If a feature that you need doesn't exist or you want to contribute to projects on the roadmap, feel free to get involved by [joining the discord](https://discord.gg/XgGxMSkvUM).

Generally, here's the status of each platform:

* **Web**: Dioxus is a great choice for pure web-apps – especially for CRUD/complex apps. However, it does lack the ecosystem of React, so you might be missing a component library or some useful hook.

* **SSR**: Dioxus is a great choice for pre-rendering, hydration, and rendering HTML on a web endpoint. Be warned – the VirtualDom is not (currently) `Send + Sync`.

* **Desktop**: You can build very competent single-window desktop apps right now. However, multi-window apps require support from Dioxus core and are not ready.

* **Mobile**: Mobile support is very young. You'll be figuring things out as you go and there are not many support crates for peripherals.

* **LiveView**: LiveView support is very young. You'll be figuring things out as you go. Thankfully, none of it is too hard and any work can be upstreamed into Dioxus.

## Features

---

|Feature|Status|Description|
|-------|------|-----------|
|Conditional Rendering|x|if/then to hide/show component|
|Map, Iterator|x|map/filter/reduce to produce rsx!|
|Keyed Components|x|advanced diffing with keys|
|Web|x|renderer for web browser|
|Desktop (webview)|x|renderer for desktop|
|Shared State (Context)|x|share state through the tree|
|Hooks|x|memory cells in components|
|SSR|x|render directly to string|
|Component Children|x|cx.children() as a list of nodes|
|Headless components|x|components that don't return real elements|
|Fragments|x|multiple elements without a real root|
|Manual Props|x|Manually pass in props with spread syntax|
|Controlled Inputs|x|stateful wrappers around inputs|
|CSS/Inline Styles|x|syntax for inline styles/attribute groups|
|Custom elements|x|Define new element primitives|
|Suspense|x|schedule future render from future/promise|
|Integrated error handling|x|Gracefully handle errors with ? syntax|
|NodeRef|x|gain direct access to nodes|
|Re-hydration|x|Pre-render to HTML to speed up first contentful paint|
|Jank-Free Rendering|x|Large diffs are segmented across frames for silky-smooth transitions|
|Effects|x|Run effects after a component has been committed to render|
|Portals|\*|Render nodes outside of the traditional tree structure|
|Cooperative Scheduling|\*|Prioritize important events over non-important events|
|Server Components|\*|Hybrid components for SPA and Server|
|Bundle Splitting|i|Efficiently and asynchronously load the app|
|Lazy Components|i|Dynamically load the new components as the page is loaded|
|1st class global state|x|redux/recoil/mobx on top of context|
|Runs natively|x|runs as a portable binary w/o a runtime (Node)|
|Subtree Memoization|x|skip diffing static element subtrees|
|High-efficiency templates|x|rsx! calls are translated to templates on the DOM's side|
|Compile-time correct|x|Throw errors on invalid template layouts|
|Heuristic Engine|x|track component memory usage to minimize future allocations|
|Fine-grained reactivity|i|Skip diffing for fine-grain updates|

* x = implemented and working
* \* = actively being worked on
* i = not yet implemented or being worked on

## Roadmap

These Features are planned for the future of Dioxus:

### Core

* [x] Release of Dioxus Core
* [x] Upgrade documentation to include more theory and be more comprehensive
* [x] Support for HTML-side templates for lightning-fast dom manipulation
* [ ] Support for multiple renderers for same virtualdom (subtrees)
* [ ] Support for ThreadSafe (Send + Sync)
* [ ] Support for Portals

### SSR

* [x] SSR Support + Hydration
* [x] Integrated suspense support for SSR

### Desktop

* [ ] Declarative window management
* [ ] Templates for building/bundling
* [ ] Access to Canvas/WebGL context natively

### Mobile

* [ ] Mobile standard library
  * [ ] GPS
  * [ ] Camera
  * [ ] filesystem
  * [ ] Biometrics
  * [ ] WiFi
  * [ ] Bluetooth
  * [ ] Notifications
  * [ ] Clipboard
* [ ] Animations

### Bundling (CLI)

* [x] Translation from HTML into RSX
* [x] Dev server
* [x] Live reload
* [x] Translation from JSX into RSX
* [ ] Hot module replacement
* [ ] Code splitting
* [x] Asset macros
* [x] Css pipeline
* [x] Image pipeline

### Essential hooks

* [x] Router
* [x] Global state management
* [ ] Resize observer

## Work in Progress

### Build Tool

We are currently working on our own build tool called [Dioxus CLI](https://github.com/DioxusLabs/dioxus/tree/main/packages/cli) which will support:

* an interactive TUI
* on-the-fly reconfiguration
* hot CSS reloading
* two-way data binding between browser and source code
* an interpreter for `rsx!`
* ability to publish to github/netlify/vercel
* bundling for iOS/Desktop/etc

### Server Component Support

While not currently fully implemented, the expectation is that LiveView apps can be a hybrid between Wasm and server-rendered where only portions of a page are "live" and the rest of the page is either server-rendered, statically generated, or handled by the host SPA.

### Native rendering

We are currently working on a native renderer for Dioxus using WGPU called [Blitz](https://github.com/DioxusLabs/blitz/). This will allow you to build apps that are rendered natively for iOS, Android, and Desktop.
